/* Generated by Cython 0.29.28 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Aeskeys
#define __PYX_HAVE_API__Aeskeys
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PlinePMD/b28e1f46-f395-11ec-9d77-913ce098e614/Aeskeys.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable;
struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults {
  PyObject *__pyx_arg_padding;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_padding;
};
struct __pyx_defaults2 {
  PyObject *__pyx_arg_padding;
};

/* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes {
  PyObject_HEAD
  PyObject *__pyx_v_text;
};


/* "Aeskeys.pyx":23
 * 
 * def _string_to_bytes(text):
 *     return list(ord(c) for c in text)             # <<<<<<<<<<<<<<
 * 
 * def _bytes_to_string(binary):
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *__pyx_outer_scope;
  PyObject *__pyx_v_c;
};


/* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string {
  PyObject_HEAD
  PyObject *__pyx_v_binary;
};


/* "Aeskeys.pyx":26
 * 
 * def _bytes_to_string(binary):
 *     return "".join(chr(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 * def _concat_list(a, b):
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *__pyx_outer_scope;
  PyObject *__pyx_v_b;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable {
  PyObject_HEAD
  PyObject *__pyx_v_binary;
};


/* "Aeskeys.pyx":50
 *         if isinstance(binary, bytes):
 *             return binary
 *         return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *     def _get_byte(c):
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *__pyx_outer_scope;
  PyObject *__pyx_v_b;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable {
  PyObject_HEAD
  PyObject *__pyx_v_binary;
};


/* "Aeskeys.pyx":629
 *             if isinstance(binary, bytes):
 *                 return binary
 *             return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *         def _get_byte(c):
 */
struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *__pyx_outer_scope;
  PyObject *__pyx_v_b;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_LshiftObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_LshiftObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceLshift(op1, op2) : PyNumber_Lshift(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_FloorDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceFloorDivide(op1, op2) : PyNumber_FloorDivide(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AndObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAnd(op1, op2) : PyNumber_And(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RshiftObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRshift(op1, op2) : PyNumber_Rshift(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* pop_index.proto */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix);
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix);
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix);
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (likely(PyList_CheckExact(L) && __Pyx_fits_Py_ssize_t(ix, type, is_signed))) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    __Pyx_fits_Py_ssize_t(ix, type, is_signed) ?\
        __Pyx__PyList_PopIndex(L, py_ix, ix) : (\
        (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
            __Pyx__PyObject_PopIndex(L, py_ix)))
#else
#define __Pyx_PyList_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)\
    __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func)
#define __Pyx_PyObject_PopIndex(L, py_ix, ix, is_signed, type, to_py_func) (\
    (unlikely((py_ix) == Py_None)) ? __Pyx__PyObject_PopNewIndex(L, to_py_func(ix)) :\
        __Pyx__PyObject_PopIndex(L, py_ix))
#endif

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ModInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'Aeskeys' */
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct___string_to_bytes = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_2__bytes_to_string = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_4_to_bufferable = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_6_to_bufferable = 0;
static PyTypeObject *__pyx_ptype_7Aeskeys___pyx_scope_struct_7_genexpr = 0;
#define __Pyx_MODULE_NAME "Aeskeys"
extern int __pyx_module_is_main_Aeskeys;
int __pyx_module_is_main_Aeskeys = 0;

/* Implementation of 'Aeskeys' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_zip;
static const char __pyx_k_[] = "";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = ">i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_KC[] = "KC";
static const char __pyx_k_Kd[] = "_Kd";
static const char __pyx_k_Ke[] = "_Ke";
static const char __pyx_k_Si[] = "Si";
static const char __pyx_k_T1[] = "T1";
static const char __pyx_k_T2[] = "T2";
static const char __pyx_k_T3[] = "T3";
static const char __pyx_k_T4[] = "T4";
static const char __pyx_k_T5[] = "T5";
static const char __pyx_k_T6[] = "T6";
static const char __pyx_k_T7[] = "T7";
static const char __pyx_k_T8[] = "T8";
static const char __pyx_k_U1[] = "U1";
static const char __pyx_k_U2[] = "U2";
static const char __pyx_k_U3[] = "U3";
static const char __pyx_k_U4[] = "U4";
static const char __pyx_k_iv[] = "iv";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_s3[] = "s3";
static const char __pyx_k_tk[] = "tk";
static const char __pyx_k_tt[] = "tt";
static const char __pyx_k_AES[] = "AES";
static const char __pyx_k_aes[] = "_aes";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_cbc[] = "cbc";
static const char __pyx_k_cfb[] = "cfb";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_ctr[] = "ctr";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_ecb[] = "ecb";
static const char __pyx_k_i_2[] = "i";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_ofb[] = "ofb";
static const char __pyx_k_pad[] = "pad";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_feed[] = "feed";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_rcon[] = "rcon";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_chunk[] = "chunk";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_final[] = "final";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_binary[] = "binary";
static const char __pyx_k_buffer[] = "_buffer";
static const char __pyx_k_feed_2[] = "_feed";
static const char __pyx_k_feeder[] = "feeder";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_mode_2[] = "_mode";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_padded[] = "padded";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_rounds[] = "rounds";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_AES_CBC[] = "AES_CBC";
static const char __pyx_k_AES_CFB[] = "AES_CFB";
static const char __pyx_k_AES_CTR[] = "AES_CTR";
static const char __pyx_k_AES_ECB[] = "AES_ECB";
static const char __pyx_k_AES_OFB[] = "AES_OFB";
static const char __pyx_k_Aeskeys[] = "Aeskeys";
static const char __pyx_k_Counter[] = "Counter";
static const char __pyx_k_counter[] = "_counter";
static const char __pyx_k_decrypt[] = "decrypt";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_encrypt[] = "encrypt";
static const char __pyx_k_final_2[] = "_final";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_padding[] = "padding";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_get_byte[] = "_get_byte";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_Decrypter[] = "Decrypter";
static const char __pyx_k_Encrypter[] = "Encrypter";
static const char __pyx_k_converted[] = "converted";
static const char __pyx_k_counter_2[] = "counter";
static const char __pyx_k_crypttext[] = "crypttext";
static const char __pyx_k_decrypted[] = "decrypted";
static const char __pyx_k_decrypter[] = "decrypter";
static const char __pyx_k_encrypted[] = "encrypted";
static const char __pyx_k_encrypter[] = "encrypter";
static const char __pyx_k_in_stream[] = "in_stream";
static const char __pyx_k_increment[] = "increment";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_padding_2[] = "_padding";
static const char __pyx_k_plaintext[] = "plaintext";
static const char __pyx_k_AES___init[] = "AES.__init__";
static const char __pyx_k_BLOCK_SIZE[] = "BLOCK_SIZE";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_cipherbyte[] = "cipherbyte";
static const char __pyx_k_ciphertext[] = "ciphertext";
static const char __pyx_k_out_stream[] = "out_stream";
static const char __pyx_k_AES_decrypt[] = "AES.decrypt";
static const char __pyx_k_AES_encrypt[] = "AES.encrypt";
static const char __pyx_k_BlockFeeder[] = "BlockFeeder";
static const char __pyx_k_can_consume[] = "_can_consume";
static const char __pyx_k_cipherblock[] = "cipherblock";
static const char __pyx_k_concat_list[] = "_concat_list";
static const char __pyx_k_feed_stream[] = "_feed_stream";
static const char __pyx_k_rconpointer[] = "rconpointer";
static const char __pyx_k_xor_segment[] = "xor_segment";
static const char __pyx_k_AESoperation[] = "AESoperation";
static const char __pyx_k_PADDING_NONE[] = "PADDING_NONE";
static const char __pyx_k_compact_word[] = "_compact_word";
static const char __pyx_k_faux_padding[] = "faux_padding";
static const char __pyx_k_segment_size[] = "segment_size";
static const char __pyx_k_can_consume_2[] = "can_consume";
static const char __pyx_k_final_decrypt[] = "_final_decrypt";
static const char __pyx_k_final_encrypt[] = "_final_encrypt";
static const char __pyx_k_initial_value[] = "initial_value";
static const char __pyx_k_precipherbyte[] = "precipherbyte";
static const char __pyx_k_segment_bytes[] = "_segment_bytes";
static const char __pyx_k_to_bufferable[] = "to_bufferable";
static const char __pyx_k_AES_CBC___init[] = "AES_CBC.__init__";
static const char __pyx_k_AES_CFB___init[] = "AES_CFB.__init__";
static const char __pyx_k_AES_CFB_lambda[] = "AES_CFB.<lambda>";
static const char __pyx_k_AES_CTR___init[] = "AES_CTR.__init__";
static const char __pyx_k_AES_OFB___init[] = "AES_OFB.__init__";
static const char __pyx_k_Counter___init[] = "Counter.__init__";
static const char __pyx_k_Counter_lambda[] = "Counter.<lambda>";
static const char __pyx_k_cipher_segment[] = "cipher_segment";
static const char __pyx_k_decrypt_stream[] = "decrypt_stream";
static const char __pyx_k_encrypt_stream[] = "encrypt_stream";
static const char __pyx_k_invalid_length[] = "invalid length ~";
static const char __pyx_k_precipherblock[] = "precipherblock";
static const char __pyx_k_shift_register[] = "_shift_register";
static const char __pyx_k_util__get_byte[] = "util._get_byte";
static const char __pyx_k_AES_CBC_decrypt[] = "AES_CBC.decrypt";
static const char __pyx_k_AES_CBC_encrypt[] = "AES_CBC.encrypt";
static const char __pyx_k_AES_CFB_decrypt[] = "AES_CFB.decrypt";
static const char __pyx_k_AES_CFB_encrypt[] = "AES_CFB.encrypt";
static const char __pyx_k_AES_CTR_decrypt[] = "AES_CTR.decrypt";
static const char __pyx_k_AES_CTR_encrypt[] = "AES_CTR.encrypt";
static const char __pyx_k_AES_ECB_decrypt[] = "AES_ECB.decrypt";
static const char __pyx_k_AES_ECB_encrypt[] = "AES_ECB.encrypt";
static const char __pyx_k_AES_OFB_decrypt[] = "AES_OFB.decrypt";
static const char __pyx_k_AES_OFB_encrypt[] = "AES_OFB.encrypt";
static const char __pyx_k_PADDING_DEFAULT[] = "PADDING_DEFAULT";
static const char __pyx_k_bytes_to_string[] = "_bytes_to_string";
static const char __pyx_k_not_implemented[] = "not implemented ~";
static const char __pyx_k_remaining_block[] = "_remaining_block";
static const char __pyx_k_round_key_count[] = "round_key_count";
static const char __pyx_k_segment_bytes_2[] = "segment_bytes";
static const char __pyx_k_string_to_bytes[] = "_string_to_bytes";
static const char __pyx_k_BlockFeeder_feed[] = "BlockFeeder.feed";
static const char __pyx_k_Decrypter___init[] = "Decrypter.__init__";
static const char __pyx_k_Encrypter___init[] = "Encrypter.__init__";
static const char __pyx_k_Invalid_key_size[] = "Invalid key size ><";
static const char __pyx_k_last_cipherblock[] = "_last_cipherblock";
static const char __pyx_k_number_of_rounds[] = "number_of_rounds";
static const char __pyx_k_Counter_increment[] = "Counter.increment";
static const char __pyx_k_block_can_consume[] = "_block_can_consume";
static const char __pyx_k_plaintext_segment[] = "plaintext_segment";
static const char __pyx_k_remaining_counter[] = "_remaining_counter";
static const char __pyx_k_BlockFeeder___init[] = "BlockFeeder.__init__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_stream_can_consume[] = "_stream_can_consume";
static const char __pyx_k_util_to_bufferable[] = "util.to_bufferable";
static const char __pyx_k_wrong_block_length[] = "wrong block length ><";
static const char __pyx_k_block_final_decrypt[] = "_block_final_decrypt";
static const char __pyx_k_block_final_encrypt[] = "_block_final_encrypt";
static const char __pyx_k_last_precipherblock[] = "_last_precipherblock";
static const char __pyx_k_segment_can_consume[] = "_segment_can_consume";
static const char __pyx_k_strip_PKCS7_padding[] = "strip_PKCS7_padding";
static const char __pyx_k_append_PKCS7_padding[] = "append_PKCS7_padding";
static const char __pyx_k_invalid_padding_byte[] = "invalid padding byte ~";
static const char __pyx_k_stream_final_decrypt[] = "_stream_final_decrypt";
static const char __pyx_k_stream_final_encrypt[] = "_stream_final_encrypt";
static const char __pyx_k_segment_final_decrypt[] = "_segment_final_decrypt";
static const char __pyx_k_segment_final_encrypt[] = "_segment_final_encrypt";
static const char __pyx_k_invalid_padding_option[] = "invalid padding option ^^";
static const char __pyx_k_AESBlockModeOfOperation[] = "AESBlockModeOfOperation";
static const char __pyx_k_already_finished_feeder[] = "already finished feeder ~";
static const char __pyx_k_AESStreamModeOfOperation[] = "AESStreamModeOfOperation";
static const char __pyx_k_invalid_padding_option_2[] = "invalid padding option ><";
static const char __pyx_k_util_strip_PKCS7_padding[] = "util.strip_PKCS7_padding";
static const char __pyx_k_AESSegmentModeOfOperation[] = "AESSegmentModeOfOperation";
static const char __pyx_k_util_append_PKCS7_padding[] = "util.append_PKCS7_padding";
static const char __pyx_k_to_bufferable_locals_genexpr[] = "to_bufferable.<locals>.genexpr";
static const char __pyx_k_AESBlockModeOfOperation___init[] = "AESBlockModeOfOperation.__init__";
static const char __pyx_k_bytes_to_string_locals_genexpr[] = "_bytes_to_string.<locals>.genexpr";
static const char __pyx_k_string_to_bytes_locals_genexpr[] = "_string_to_bytes.<locals>.genexpr";
static const char __pyx_k_AESBlockModeOfOperation_decrypt[] = "AESBlockModeOfOperation.decrypt";
static const char __pyx_k_AESBlockModeOfOperation_encrypt[] = "AESBlockModeOfOperation.encrypt";
static const char __pyx_k_PlinePMD_b28e1f46_f395_11ec_9d77[] = "PlinePMD/b28e1f46-f395-11ec-9d77-913ce098e614/Aeskeys.pyx";
static const char __pyx_k_ciphertext_block_must_be_16_byte[] = "ciphertext block must be 16 bytes >< \nBut you give %d";
static const char __pyx_k_ciphertext_block_must_be_a_multi[] = "ciphertext block must be a multiple of segment_size ><";
static const char __pyx_k_initialization_vector_must_be_16[] = "initialization vector must be 16 bytes ><";
static const char __pyx_k_invalid_data_length_for_final_bl[] = "invalid data length for final block ^^";
static const char __pyx_k_plaintext_block_must_be_16_bytes[] = "plaintext block must be 16 bytes >< \nBut you give %d";
static const char __pyx_k_plaintext_block_must_be_a_multip[] = "plaintext block must be a multiple of segment_size ><";
static const char __pyx_k_util_to_bufferable_locals_genexp[] = "util.to_bufferable.<locals>.genexpr";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_AES;
static PyObject *__pyx_n_s_AESBlockModeOfOperation;
static PyObject *__pyx_n_s_AESBlockModeOfOperation___init;
static PyObject *__pyx_n_s_AESBlockModeOfOperation_decrypt;
static PyObject *__pyx_n_s_AESBlockModeOfOperation_encrypt;
static PyObject *__pyx_n_s_AESSegmentModeOfOperation;
static PyObject *__pyx_n_s_AESStreamModeOfOperation;
static PyObject *__pyx_n_s_AES_CBC;
static PyObject *__pyx_n_s_AES_CBC___init;
static PyObject *__pyx_n_s_AES_CBC_decrypt;
static PyObject *__pyx_n_s_AES_CBC_encrypt;
static PyObject *__pyx_n_s_AES_CFB;
static PyObject *__pyx_n_s_AES_CFB___init;
static PyObject *__pyx_n_s_AES_CFB_decrypt;
static PyObject *__pyx_n_s_AES_CFB_encrypt;
static PyObject *__pyx_n_s_AES_CFB_lambda;
static PyObject *__pyx_n_s_AES_CTR;
static PyObject *__pyx_n_s_AES_CTR___init;
static PyObject *__pyx_n_s_AES_CTR_decrypt;
static PyObject *__pyx_n_s_AES_CTR_encrypt;
static PyObject *__pyx_n_s_AES_ECB;
static PyObject *__pyx_n_s_AES_ECB_decrypt;
static PyObject *__pyx_n_s_AES_ECB_encrypt;
static PyObject *__pyx_n_s_AES_OFB;
static PyObject *__pyx_n_s_AES_OFB___init;
static PyObject *__pyx_n_s_AES_OFB_decrypt;
static PyObject *__pyx_n_s_AES_OFB_encrypt;
static PyObject *__pyx_n_s_AES___init;
static PyObject *__pyx_n_s_AES_decrypt;
static PyObject *__pyx_n_s_AES_encrypt;
static PyObject *__pyx_n_s_AESoperation;
static PyObject *__pyx_n_s_Aeskeys;
static PyObject *__pyx_n_s_BLOCK_SIZE;
static PyObject *__pyx_n_s_BlockFeeder;
static PyObject *__pyx_n_s_BlockFeeder___init;
static PyObject *__pyx_n_s_BlockFeeder_feed;
static PyObject *__pyx_n_s_Counter;
static PyObject *__pyx_n_s_Counter___init;
static PyObject *__pyx_n_s_Counter_increment;
static PyObject *__pyx_n_s_Counter_lambda;
static PyObject *__pyx_n_s_Decrypter;
static PyObject *__pyx_n_s_Decrypter___init;
static PyObject *__pyx_n_s_Encrypter;
static PyObject *__pyx_n_s_Encrypter___init;
static PyObject *__pyx_kp_s_Invalid_key_size;
static PyObject *__pyx_n_s_KC;
static PyObject *__pyx_n_s_Kd;
static PyObject *__pyx_n_s_Ke;
static PyObject *__pyx_n_s_PADDING_DEFAULT;
static PyObject *__pyx_n_s_PADDING_NONE;
static PyObject *__pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_Si;
static PyObject *__pyx_n_s_T1;
static PyObject *__pyx_n_s_T2;
static PyObject *__pyx_n_s_T3;
static PyObject *__pyx_n_s_T4;
static PyObject *__pyx_n_s_T5;
static PyObject *__pyx_n_s_T6;
static PyObject *__pyx_n_s_T7;
static PyObject *__pyx_n_s_T8;
static PyObject *__pyx_n_s_U1;
static PyObject *__pyx_n_s_U2;
static PyObject *__pyx_n_s_U3;
static PyObject *__pyx_n_s_U4;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_aes;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_kp_s_already_finished_feeder;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_append_PKCS7_padding;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_binary;
static PyObject *__pyx_n_s_block_can_consume;
static PyObject *__pyx_n_s_block_final_decrypt;
static PyObject *__pyx_n_s_block_final_encrypt;
static PyObject *__pyx_n_s_block_size;
static PyObject *__pyx_n_s_buffer;
static PyObject *__pyx_n_s_bytes_to_string;
static PyObject *__pyx_n_s_bytes_to_string_locals_genexpr;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_can_consume;
static PyObject *__pyx_n_s_can_consume_2;
static PyObject *__pyx_n_s_cbc;
static PyObject *__pyx_n_s_cfb;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_chunk;
static PyObject *__pyx_n_s_cipher_segment;
static PyObject *__pyx_n_s_cipherblock;
static PyObject *__pyx_n_s_cipherbyte;
static PyObject *__pyx_n_s_ciphertext;
static PyObject *__pyx_kp_s_ciphertext_block_must_be_16_byte;
static PyObject *__pyx_kp_s_ciphertext_block_must_be_a_multi;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_compact_word;
static PyObject *__pyx_n_s_concat_list;
static PyObject *__pyx_n_s_converted;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_counter;
static PyObject *__pyx_n_s_counter_2;
static PyObject *__pyx_n_s_crypttext;
static PyObject *__pyx_n_s_ctr;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decrypt;
static PyObject *__pyx_n_s_decrypt_stream;
static PyObject *__pyx_n_s_decrypted;
static PyObject *__pyx_n_s_decrypter;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_ecb;
static PyObject *__pyx_n_s_encrypt;
static PyObject *__pyx_n_s_encrypt_stream;
static PyObject *__pyx_n_s_encrypted;
static PyObject *__pyx_n_s_encrypter;
static PyObject *__pyx_n_s_faux_padding;
static PyObject *__pyx_n_s_feed;
static PyObject *__pyx_n_s_feed_2;
static PyObject *__pyx_n_s_feed_stream;
static PyObject *__pyx_n_s_feeder;
static PyObject *__pyx_n_s_final;
static PyObject *__pyx_n_s_final_2;
static PyObject *__pyx_n_s_final_decrypt;
static PyObject *__pyx_n_s_final_encrypt;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_byte;
static PyObject *__pyx_kp_s_i;
static PyObject *__pyx_n_s_i_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_stream;
static PyObject *__pyx_n_s_increment;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initial_value;
static PyObject *__pyx_kp_s_initialization_vector_must_be_16;
static PyObject *__pyx_kp_s_invalid_data_length_for_final_bl;
static PyObject *__pyx_kp_s_invalid_length;
static PyObject *__pyx_kp_s_invalid_padding_byte;
static PyObject *__pyx_kp_s_invalid_padding_option;
static PyObject *__pyx_kp_s_invalid_padding_option_2;
static PyObject *__pyx_n_s_iv;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_last_cipherblock;
static PyObject *__pyx_n_s_last_precipherblock;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mode_2;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_kp_s_not_implemented;
static PyObject *__pyx_n_s_number_of_rounds;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_ofb;
static PyObject *__pyx_n_s_out_stream;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pad;
static PyObject *__pyx_n_s_padded;
static PyObject *__pyx_n_s_padding;
static PyObject *__pyx_n_s_padding_2;
static PyObject *__pyx_n_s_plaintext;
static PyObject *__pyx_kp_s_plaintext_block_must_be_16_bytes;
static PyObject *__pyx_kp_s_plaintext_block_must_be_a_multip;
static PyObject *__pyx_n_s_plaintext_segment;
static PyObject *__pyx_n_s_pop;
static PyObject *__pyx_n_s_precipherblock;
static PyObject *__pyx_n_s_precipherbyte;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rcon;
static PyObject *__pyx_n_s_rconpointer;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_remaining_block;
static PyObject *__pyx_n_s_remaining_counter;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_round_key_count;
static PyObject *__pyx_n_s_rounds;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_n_s_s3;
static PyObject *__pyx_n_s_segment_bytes;
static PyObject *__pyx_n_s_segment_bytes_2;
static PyObject *__pyx_n_s_segment_can_consume;
static PyObject *__pyx_n_s_segment_final_decrypt;
static PyObject *__pyx_n_s_segment_final_encrypt;
static PyObject *__pyx_n_s_segment_size;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_shift_register;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_stream_can_consume;
static PyObject *__pyx_n_s_stream_final_decrypt;
static PyObject *__pyx_n_s_stream_final_encrypt;
static PyObject *__pyx_n_s_string_to_bytes;
static PyObject *__pyx_n_s_string_to_bytes_locals_genexpr;
static PyObject *__pyx_n_s_strip_PKCS7_padding;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tk;
static PyObject *__pyx_n_s_to_bufferable;
static PyObject *__pyx_n_s_to_bufferable_locals_genexpr;
static PyObject *__pyx_n_s_tt;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_util;
static PyObject *__pyx_n_s_util__get_byte;
static PyObject *__pyx_n_s_util_append_PKCS7_padding;
static PyObject *__pyx_n_s_util_strip_PKCS7_padding;
static PyObject *__pyx_n_s_util_to_bufferable;
static PyObject *__pyx_n_s_util_to_bufferable_locals_genexp;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_kp_s_wrong_block_length;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xor_segment;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_7Aeskeys__compact_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_word); /* proto */
static PyObject *__pyx_pf_7Aeskeys_16_string_to_bytes_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_2_string_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_7Aeskeys_16_bytes_to_string_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4_bytes_to_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary); /* proto */
static PyObject *__pyx_pf_7Aeskeys_6_concat_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7Aeskeys_8_string_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_7Aeskeys_10_bytes_to_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary); /* proto */
static PyObject *__pyx_pf_7Aeskeys_12_concat_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7Aeskeys_13to_bufferable_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_14to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary); /* proto */
static PyObject *__pyx_pf_7Aeskeys_16_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7Aeskeys_3AES___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7Aeskeys_3AES_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_3AES_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_lambda_funcdef_7Aeskeys_7Counter_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7Counter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_initial_value); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7Counter_2increment(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation_2decrypt(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation_4encrypt(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_ECB_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_ECB_2decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CBC___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CBC_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CBC_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_lambda_funcdef_7Aeskeys_7AES_CFB_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CFB___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv, PyObject *__pyx_v_segment_size); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CFB_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CFB_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_OFB___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_OFB_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_OFB_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CTR___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_counter); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CTR_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_7AES_CTR_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_crypttext); /* proto */
static PyObject *__pyx_pf_7Aeskeys_18_block_can_consume(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_7Aeskeys_20_block_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_22_block_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_24_segment_can_consume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_7Aeskeys_26_segment_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_28_segment_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_30_stream_can_consume(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_7Aeskeys_32_stream_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_34_stream_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_42__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_11BlockFeeder___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_feed, PyObject *__pyx_v_final, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_11BlockFeeder_2feed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7Aeskeys_44__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_9Encrypter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_46__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_9Decrypter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_36_feed_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_feeder, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size); /* proto */
static PyObject *__pyx_pf_7Aeskeys_38encrypt_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_40decrypt_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size, PyObject *__pyx_v_padding); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_2_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_13to_bufferable_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_4to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_6_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_8append_PKCS7_padding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7Aeskeys_4util_10strip_PKCS7_padding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct___string_to_bytes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_2__bytes_to_string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_4_to_bufferable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_6_to_bufferable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_17;
static PyObject *__pyx_int_18;
static PyObject *__pyx_int_19;
static PyObject *__pyx_int_20;
static PyObject *__pyx_int_21;
static PyObject *__pyx_int_22;
static PyObject *__pyx_int_23;
static PyObject *__pyx_int_24;
static PyObject *__pyx_int_25;
static PyObject *__pyx_int_26;
static PyObject *__pyx_int_27;
static PyObject *__pyx_int_28;
static PyObject *__pyx_int_29;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_31;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_54;
static PyObject *__pyx_int_55;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_57;
static PyObject *__pyx_int_58;
static PyObject *__pyx_int_59;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_63;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_65;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_72;
static PyObject *__pyx_int_73;
static PyObject *__pyx_int_74;
static PyObject *__pyx_int_75;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_77;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_79;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_82;
static PyObject *__pyx_int_83;
static PyObject *__pyx_int_84;
static PyObject *__pyx_int_85;
static PyObject *__pyx_int_86;
static PyObject *__pyx_int_87;
static PyObject *__pyx_int_88;
static PyObject *__pyx_int_89;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_91;
static PyObject *__pyx_int_92;
static PyObject *__pyx_int_93;
static PyObject *__pyx_int_94;
static PyObject *__pyx_int_95;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_97;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_99;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_101;
static PyObject *__pyx_int_102;
static PyObject *__pyx_int_103;
static PyObject *__pyx_int_104;
static PyObject *__pyx_int_105;
static PyObject *__pyx_int_106;
static PyObject *__pyx_int_107;
static PyObject *__pyx_int_108;
static PyObject *__pyx_int_109;
static PyObject *__pyx_int_110;
static PyObject *__pyx_int_111;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_114;
static PyObject *__pyx_int_115;
static PyObject *__pyx_int_116;
static PyObject *__pyx_int_117;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_119;
static PyObject *__pyx_int_120;
static PyObject *__pyx_int_121;
static PyObject *__pyx_int_122;
static PyObject *__pyx_int_123;
static PyObject *__pyx_int_124;
static PyObject *__pyx_int_125;
static PyObject *__pyx_int_126;
static PyObject *__pyx_int_127;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_129;
static PyObject *__pyx_int_130;
static PyObject *__pyx_int_131;
static PyObject *__pyx_int_132;
static PyObject *__pyx_int_133;
static PyObject *__pyx_int_134;
static PyObject *__pyx_int_135;
static PyObject *__pyx_int_136;
static PyObject *__pyx_int_137;
static PyObject *__pyx_int_138;
static PyObject *__pyx_int_139;
static PyObject *__pyx_int_140;
static PyObject *__pyx_int_141;
static PyObject *__pyx_int_142;
static PyObject *__pyx_int_143;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_145;
static PyObject *__pyx_int_146;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_148;
static PyObject *__pyx_int_149;
static PyObject *__pyx_int_150;
static PyObject *__pyx_int_151;
static PyObject *__pyx_int_152;
static PyObject *__pyx_int_153;
static PyObject *__pyx_int_154;
static PyObject *__pyx_int_155;
static PyObject *__pyx_int_156;
static PyObject *__pyx_int_157;
static PyObject *__pyx_int_158;
static PyObject *__pyx_int_159;
static PyObject *__pyx_int_160;
static PyObject *__pyx_int_161;
static PyObject *__pyx_int_162;
static PyObject *__pyx_int_163;
static PyObject *__pyx_int_164;
static PyObject *__pyx_int_165;
static PyObject *__pyx_int_166;
static PyObject *__pyx_int_167;
static PyObject *__pyx_int_168;
static PyObject *__pyx_int_169;
static PyObject *__pyx_int_170;
static PyObject *__pyx_int_171;
static PyObject *__pyx_int_172;
static PyObject *__pyx_int_173;
static PyObject *__pyx_int_174;
static PyObject *__pyx_int_175;
static PyObject *__pyx_int_176;
static PyObject *__pyx_int_177;
static PyObject *__pyx_int_178;
static PyObject *__pyx_int_179;
static PyObject *__pyx_int_180;
static PyObject *__pyx_int_181;
static PyObject *__pyx_int_182;
static PyObject *__pyx_int_183;
static PyObject *__pyx_int_184;
static PyObject *__pyx_int_185;
static PyObject *__pyx_int_186;
static PyObject *__pyx_int_187;
static PyObject *__pyx_int_188;
static PyObject *__pyx_int_189;
static PyObject *__pyx_int_190;
static PyObject *__pyx_int_191;
static PyObject *__pyx_int_192;
static PyObject *__pyx_int_193;
static PyObject *__pyx_int_194;
static PyObject *__pyx_int_195;
static PyObject *__pyx_int_196;
static PyObject *__pyx_int_197;
static PyObject *__pyx_int_198;
static PyObject *__pyx_int_199;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_201;
static PyObject *__pyx_int_202;
static PyObject *__pyx_int_203;
static PyObject *__pyx_int_204;
static PyObject *__pyx_int_205;
static PyObject *__pyx_int_206;
static PyObject *__pyx_int_207;
static PyObject *__pyx_int_208;
static PyObject *__pyx_int_209;
static PyObject *__pyx_int_210;
static PyObject *__pyx_int_211;
static PyObject *__pyx_int_212;
static PyObject *__pyx_int_213;
static PyObject *__pyx_int_214;
static PyObject *__pyx_int_215;
static PyObject *__pyx_int_216;
static PyObject *__pyx_int_217;
static PyObject *__pyx_int_218;
static PyObject *__pyx_int_219;
static PyObject *__pyx_int_220;
static PyObject *__pyx_int_221;
static PyObject *__pyx_int_222;
static PyObject *__pyx_int_223;
static PyObject *__pyx_int_224;
static PyObject *__pyx_int_225;
static PyObject *__pyx_int_226;
static PyObject *__pyx_int_227;
static PyObject *__pyx_int_228;
static PyObject *__pyx_int_229;
static PyObject *__pyx_int_230;
static PyObject *__pyx_int_231;
static PyObject *__pyx_int_232;
static PyObject *__pyx_int_233;
static PyObject *__pyx_int_234;
static PyObject *__pyx_int_235;
static PyObject *__pyx_int_236;
static PyObject *__pyx_int_237;
static PyObject *__pyx_int_238;
static PyObject *__pyx_int_239;
static PyObject *__pyx_int_240;
static PyObject *__pyx_int_241;
static PyObject *__pyx_int_242;
static PyObject *__pyx_int_243;
static PyObject *__pyx_int_244;
static PyObject *__pyx_int_245;
static PyObject *__pyx_int_246;
static PyObject *__pyx_int_247;
static PyObject *__pyx_int_248;
static PyObject *__pyx_int_249;
static PyObject *__pyx_int_250;
static PyObject *__pyx_int_251;
static PyObject *__pyx_int_252;
static PyObject *__pyx_int_253;
static PyObject *__pyx_int_254;
static PyObject *__pyx_int_255;
static PyObject *__pyx_int_256;
static PyObject *__pyx_int_8192;
static PyObject *__pyx_int_16843522;
static PyObject *__pyx_int_16974337;
static PyObject *__pyx_int_19308535;
static PyObject *__pyx_int_24197544;
static PyObject *__pyx_int_25965917;
static PyObject *__pyx_int_26054028;
static PyObject *__pyx_int_32283319;
static PyObject *__pyx_int_33027830;
static PyObject *__pyx_int_33620227;
static PyObject *__pyx_int_33687044;
static PyObject *__pyx_int_33778362;
static PyObject *__pyx_int_33948674;
static PyObject *__pyx_int_38544885;
static PyObject *__pyx_int_46346101;
static PyObject *__pyx_int_48394827;
static PyObject *__pyx_int_49674231;
static PyObject *__pyx_int_50462977;
static PyObject *__pyx_int_50529542;
static PyObject *__pyx_int_50660867;
static PyObject *__pyx_int_53458370;
static PyObject *__pyx_int_57326082;
static PyObject *__pyx_int_59542671;
static PyObject *__pyx_int_59727847;
static PyObject *__pyx_int_59984867;
static PyObject *__pyx_int_67240454;
static PyObject *__pyx_int_67374088;
static PyObject *__pyx_int_67556463;
static PyObject *__pyx_int_67897348;
static PyObject *__pyx_int_77089521;
static PyObject *__pyx_int_77422314;
static PyObject *__pyx_int_81781910;
static PyObject *__pyx_int_82966005;
static PyObject *__pyx_int_84217610;
static PyObject *__pyx_int_84280067;
static PyObject *__pyx_int_84871685;
static PyObject *__pyx_int_91341917;
static PyObject *__pyx_int_92987698;
static PyObject *__pyx_int_93294474;
static PyObject *__pyx_int_95345982;
static PyObject *__pyx_int_96392454;
static PyObject *__pyx_int_100860677;
static PyObject *__pyx_int_100925954;
static PyObject *__pyx_int_101039829;
static PyObject *__pyx_int_101059084;
static PyObject *__pyx_int_101321734;
static PyObject *__pyx_int_104699613;
static PyObject *__pyx_int_106852767;
static PyObject *__pyx_int_114585348;
static PyObject *__pyx_int_117901582;
static PyObject *__pyx_int_118033927;
static PyObject *__pyx_int_122466165;
static PyObject *__pyx_int_126454664;
static PyObject *__pyx_int_126783113;
static PyObject *__pyx_int_129166120;
static PyObject *__pyx_int_133361907;
static PyObject *__pyx_int_133428468;
static PyObject *__pyx_int_134480908;
static PyObject *__pyx_int_134748176;
static PyObject *__pyx_int_135050206;
static PyObject *__pyx_int_135794696;
static PyObject *__pyx_int_136428751;
static PyObject *__pyx_int_137073913;
static PyObject *__pyx_int_145085239;
static PyObject *__pyx_int_150598129;
static PyObject *__pyx_int_151591698;
static PyObject *__pyx_int_151849742;
static PyObject *__pyx_int_151914247;
static PyObject *__pyx_int_152769033;
static PyObject *__pyx_int_159417987;
static PyObject *__pyx_int_160008576;
static PyObject *__pyx_int_164439672;
static PyObject *__pyx_int_164948639;
static PyObject *__pyx_int_168101135;
static PyObject *__pyx_int_168435220;
static PyObject *__pyx_int_168560134;
static PyObject *__pyx_int_168810852;
static PyObject *__pyx_int_169743370;
static PyObject *__pyx_int_172466556;
static PyObject *__pyx_int_174567692;
static PyObject *__pyx_int_182621114;
static PyObject *__pyx_int_185277718;
static PyObject *__pyx_int_185469197;
static PyObject *__pyx_int_186455563;
static PyObject *__pyx_int_188127444;
static PyObject *__pyx_int_188821243;
static PyObject *__pyx_int_193195065;
static PyObject *__pyx_int_193497219;
static PyObject *__pyx_int_201060592;
static PyObject *__pyx_int_201721354;
static PyObject *__pyx_int_201851908;
static PyObject *__pyx_int_202008497;
static PyObject *__pyx_int_202118168;
static PyObject *__pyx_int_202643468;
static PyObject *__pyx_int_209336225;
static PyObject *__pyx_int_213114376;
static PyObject *__pyx_int_213705253;
static PyObject *__pyx_int_218828297;
static PyObject *__pyx_int_218961690;
static PyObject *__pyx_int_219617805;
static PyObject *__pyx_int_223377554;
static PyObject *__pyx_int_226906860;
static PyObject *__pyx_int_227249030;
static PyObject *__pyx_int_227885567;
static PyObject *__pyx_int_234877682;
static PyObject *__pyx_int_235341577;
static PyObject *__pyx_int_235474187;
static PyObject *__pyx_int_235803164;
static PyObject *__pyx_int_236067854;
static PyObject *__pyx_int_243256656;
static PyObject *__pyx_int_244860394;
static PyObject *__pyx_int_251524083;
static PyObject *__pyx_int_251657213;
static PyObject *__pyx_int_252314885;
static PyObject *__pyx_int_252645662;
static PyObject *__pyx_int_252780047;
static PyObject *__pyx_int_260388950;
static PyObject *__pyx_int_260737669;
static PyObject *__pyx_int_261314535;
static PyObject *__pyx_int_265905162;
static PyObject *__pyx_int_266959938;
static PyObject *__pyx_int_268961816;
static PyObject *__pyx_int_269496352;
static PyObject *__pyx_int_270040487;
static PyObject *__pyx_int_271589392;
static PyObject *__pyx_int_272786309;
static PyObject *__pyx_int_273792366;
static PyObject *__pyx_int_274084841;
static PyObject *__pyx_int_283769337;
static PyObject *__pyx_int_286339874;
static PyObject *__pyx_int_287182607;
static PyObject *__pyx_int_287343814;
static PyObject *__pyx_int_288563729;
static PyObject *__pyx_int_292596766;
static PyObject *__pyx_int_293963156;
static PyObject *__pyx_int_294930682;
static PyObject *__pyx_int_296679730;
static PyObject *__pyx_int_302582043;
static PyObject *__pyx_int_303183396;
static PyObject *__pyx_int_303699484;
static PyObject *__pyx_int_303765277;
static PyObject *__pyx_int_303828494;
static PyObject *__pyx_int_305538066;
static PyObject *__pyx_int_310463728;
static PyObject *__pyx_int_313773861;
static PyObject *__pyx_int_320025894;
static PyObject *__pyx_int_322250259;
static PyObject *__pyx_int_322734571;
static PyObject *__pyx_int_325965383;
static PyObject *__pyx_int_327451799;
static PyObject *__pyx_int_328671808;
static PyObject *__pyx_int_331544205;
static PyObject *__pyx_int_334231800;
static PyObject *__pyx_int_336202270;
static PyObject *__pyx_int_336870440;
static PyObject *__pyx_int_337120268;
static PyObject *__pyx_int_337553864;
static PyObject *__pyx_int_339486740;
static PyObject *__pyx_int_344873464;
static PyObject *__pyx_int_349075736;
static PyObject *__pyx_int_350174575;
static PyObject *__pyx_int_353713962;
static PyObject *__pyx_int_355706840;
static PyObject *__pyx_int_356461077;
static PyObject *__pyx_int_361203602;
static PyObject *__pyx_int_361929877;
static PyObject *__pyx_int_367585007;
static PyObject *__pyx_int_368048890;
static PyObject *__pyx_int_369057872;
static PyObject *__pyx_int_369822493;
static PyObject *__pyx_int_370555436;
static PyObject *__pyx_int_370938394;
static PyObject *__pyx_int_371049330;
static PyObject *__pyx_int_372911126;
static PyObject *__pyx_int_376187827;
static PyObject *__pyx_int_377642221;
static PyObject *__pyx_int_384695291;
static PyObject *__pyx_int_387397934;
static PyObject *__pyx_int_387583245;
static PyObject *__pyx_int_387781147;
static PyObject *__pyx_int_389623319;
static PyObject *__pyx_int_394692241;
static PyObject *__pyx_int_395441711;
static PyObject *__pyx_int_396673818;
static PyObject *__pyx_int_401639597;
static PyObject *__pyx_int_403442708;
static PyObject *__pyx_int_403703816;
static PyObject *__pyx_int_404016761;
static PyObject *__pyx_int_404236336;
static PyObject *__pyx_int_405286936;
static PyObject *__pyx_int_409198410;
static PyObject *__pyx_int_410887952;
static PyObject *__pyx_int_418672217;
static PyObject *__pyx_int_421079858;
static PyObject *__pyx_int_422261273;
static PyObject *__pyx_int_425408743;
static PyObject *__pyx_int_427917720;
static PyObject *__pyx_int_428169201;
static PyObject *__pyx_int_428819965;
static PyObject *__pyx_int_429456164;
static PyObject *__pyx_int_434634494;
static PyObject *__pyx_int_437062935;
static PyObject *__pyx_int_437656594;
static PyObject *__pyx_int_437757123;
static PyObject *__pyx_int_437923380;
static PyObject *__pyx_int_439235610;
static PyObject *__pyx_int_439452389;
static PyObject *__pyx_int_446754879;
static PyObject *__pyx_int_451280895;
static PyObject *__pyx_int_454166793;
static PyObject *__pyx_int_454499602;
static PyObject *__pyx_int_454765878;
static PyObject *__pyx_int_455947803;
static PyObject *__pyx_int_457992840;
static PyObject *__pyx_int_459744698;
static PyObject *__pyx_int_461406363;
static PyObject *__pyx_int_463180190;
static PyObject *__pyx_int_470683154;
static PyObject *__pyx_int_470948374;
static PyObject *__pyx_int_471606328;
static PyObject *__pyx_int_472135708;
static PyObject *__pyx_int_472615631;
static PyObject *__pyx_int_484572669;
static PyObject *__pyx_int_484830689;
static PyObject *__pyx_int_486441376;
static PyObject *__pyx_int_487725847;
static PyObject *__pyx_int_487983883;
static PyObject *__pyx_int_488449850;
static PyObject *__pyx_int_489110045;
static PyObject *__pyx_int_492483431;
static PyObject *__pyx_int_495158174;
static PyObject *__pyx_int_496906059;
static PyObject *__pyx_int_499347990;
static PyObject *__pyx_int_504303377;
static PyObject *__pyx_int_504459436;
static PyObject *__pyx_int_504629770;
static PyObject *__pyx_int_505291324;
static PyObject *__pyx_int_505560094;
static PyObject *__pyx_int_507358933;
static PyObject *__pyx_int_514443284;
static PyObject *__pyx_int_516552836;
static PyObject *__pyx_int_522133822;
static PyObject *__pyx_int_522272287;
static PyObject *__pyx_int_528646813;
static PyObject *__pyx_int_529487843;
static PyObject *__pyx_int_530400753;
static PyObject *__pyx_int_532201772;
static PyObject *__pyx_int_533804130;
static PyObject *__pyx_int_535035132;
static PyObject *__pyx_int_537923632;
static PyObject *__pyx_int_538992704;
static PyObject *__pyx_int_540080725;
static PyObject *__pyx_int_543178784;
static PyObject *__pyx_int_545572369;
static PyObject *__pyx_int_547512796;
static PyObject *__pyx_int_548169417;
static PyObject *__pyx_int_550103529;
static PyObject *__pyx_int_555836226;
static PyObject *__pyx_int_557719327;
static PyObject *__pyx_int_560153121;
static PyObject *__pyx_int_560487590;
static PyObject *__pyx_int_562755902;
static PyObject *__pyx_int_563977660;
static PyObject *__pyx_int_566021896;
static PyObject *__pyx_int_567498868;
static PyObject *__pyx_int_571543859;
static PyObject *__pyx_int_572679748;
static PyObject *__pyx_int_573804783;
static PyObject *__pyx_int_574365214;
static PyObject *__pyx_int_574624663;
static PyObject *__pyx_int_575138148;
static PyObject *__pyx_int_577127458;
static PyObject *__pyx_int_585122620;
static PyObject *__pyx_int_589522246;
static PyObject *__pyx_int_590424639;
static PyObject *__pyx_int_593839651;
static PyObject *__pyx_int_597466303;
static PyObject *__pyx_int_598438867;
static PyObject *__pyx_int_599762354;
static PyObject *__pyx_int_600235211;
static PyObject *__pyx_int_600565992;
static PyObject *__pyx_int_605164086;
static PyObject *__pyx_int_605657339;
static PyObject *__pyx_int_606366792;
static PyObject *__pyx_int_607398968;
static PyObject *__pyx_int_607530554;
static PyObject *__pyx_int_607656988;
static PyObject *__pyx_int_611076132;
static PyObject *__pyx_int_612205898;
static PyObject *__pyx_int_621591778;
static PyObject *__pyx_int_621982671;
static PyObject *__pyx_int_623210314;
static PyObject *__pyx_int_628050469;
static PyObject *__pyx_int_631218106;
static PyObject *__pyx_int_632953703;
static PyObject *__pyx_int_634383082;
static PyObject *__pyx_int_636813900;
static PyObject *__pyx_int_638784309;
static PyObject *__pyx_int_640051788;
static PyObject *__pyx_int_641025152;
static PyObject *__pyx_int_644500518;
static PyObject *__pyx_int_645401037;
static PyObject *__pyx_int_648017665;
static PyObject *__pyx_int_651029483;
static PyObject *__pyx_int_651868046;
static PyObject *__pyx_int_656894286;
static PyObject *__pyx_int_657861945;
static PyObject *__pyx_int_658119965;
static PyObject *__pyx_int_660510266;
static PyObject *__pyx_int_661212711;
static PyObject *__pyx_int_664706745;
static PyObject *__pyx_int_666464733;
static PyObject *__pyx_int_669961897;
static PyObject *__pyx_int_671593195;
static PyObject *__pyx_int_672404540;
static PyObject *__pyx_int_673740880;
static PyObject *__pyx_int_674240536;
static PyObject *__pyx_int_675039627;
static PyObject *__pyx_int_678973480;
static PyObject *__pyx_int_679998000;
static PyObject *__pyx_int_681933534;
static PyObject *__pyx_int_690584402;
static PyObject *__pyx_int_692707433;
static PyObject *__pyx_int_695634755;
static PyObject *__pyx_int_695947817;
static PyObject *__pyx_int_697932208;
static PyObject *__pyx_int_698445255;
static PyObject *__pyx_int_699432150;
static PyObject *__pyx_int_700968686;
static PyObject *__pyx_int_706024767;
static PyObject *__pyx_int_707427924;
static PyObject *__pyx_int_708780849;
static PyObject *__pyx_int_711349675;
static PyObject *__pyx_int_712922154;
static PyObject *__pyx_int_717615087;
static PyObject *__pyx_int_718002117;
static PyObject *__pyx_int_719700128;
static PyObject *__pyx_int_724270422;
static PyObject *__pyx_int_724703513;
static PyObject *__pyx_int_729634347;
static PyObject *__pyx_int_730517276;
static PyObject *__pyx_int_731183368;
static PyObject *__pyx_int_731420851;
static PyObject *__pyx_int_733156972;
static PyObject *__pyx_int_736970802;
static PyObject *__pyx_int_739644986;
static PyObject *__pyx_int_740276417;
static PyObject *__pyx_int_741110872;
static PyObject *__pyx_int_741876788;
static PyObject *__pyx_int_742039012;
static PyObject *__pyx_int_745822252;
static PyObject *__pyx_int_750906861;
static PyObject *__pyx_int_752375421;
static PyObject *__pyx_int_757954394;
static PyObject *__pyx_int_758520603;
static PyObject *__pyx_int_758720310;
static PyObject *__pyx_int_762796589;
static PyObject *__pyx_int_765172662;
static PyObject *__pyx_int_766078933;
static PyObject *__pyx_int_766945465;
static PyObject *__pyx_int_768917123;
static PyObject *__pyx_int_773265209;
static PyObject *__pyx_int_774795868;
static PyObject *__pyx_int_775166490;
static PyObject *__pyx_int_775550814;
static PyObject *__pyx_int_775562294;
static PyObject *__pyx_int_777231668;
static PyObject *__pyx_int_779246638;
static PyObject *__pyx_int_788204353;
static PyObject *__pyx_int_790073846;
static PyObject *__pyx_int_791638366;
static PyObject *__pyx_int_793451934;
static PyObject *__pyx_int_795958831;
static PyObject *__pyx_int_796197571;
static PyObject *__pyx_int_798661301;
static PyObject *__pyx_int_800440835;
static PyObject *__pyx_int_801369324;
static PyObject *__pyx_int_806885416;
static PyObject *__pyx_int_807407632;
static PyObject *__pyx_int_807962610;
static PyObject *__pyx_int_808472672;
static PyObject *__pyx_int_810573872;
static PyObject *__pyx_int_818324884;
static PyObject *__pyx_int_821288114;
static PyObject *__pyx_int_821712160;
static PyObject *__pyx_int_824852259;
static PyObject *__pyx_int_825316194;
static PyObject *__pyx_int_827548209;
static PyObject *__pyx_int_830661914;
static PyObject *__pyx_int_831886756;
static PyObject *__pyx_int_832877231;
static PyObject *__pyx_int_836232934;
static PyObject *__pyx_int_836553431;
static PyObject *__pyx_int_839224033;
static PyObject *__pyx_int_840019705;
static PyObject *__pyx_int_840505643;
static PyObject *__pyx_int_841739592;
static PyObject *__pyx_int_842159716;
static PyObject *__pyx_int_844522546;
static PyObject *__pyx_int_850817237;
static PyObject *__pyx_int_852879335;
static PyObject *__pyx_int_857870609;
static PyObject *__pyx_int_859002214;
static PyObject *__pyx_int_861234739;
static PyObject *__pyx_int_861968209;
static PyObject *__pyx_int_865136418;
static PyObject *__pyx_int_865375399;
static PyObject *__pyx_int_866637845;
static PyObject *__pyx_int_870912086;
static PyObject *__pyx_int_874125870;
static PyObject *__pyx_int_875313188;
static PyObject *__pyx_int_875451293;
static PyObject *__pyx_int_875846760;
static PyObject *__pyx_int_878443390;
static PyObject *__pyx_int_878471220;
static PyObject *__pyx_int_878845905;
static PyObject *__pyx_int_886171109;
static PyObject *__pyx_int_891687699;
static PyObject *__pyx_int_892690282;
static PyObject *__pyx_int_893681702;
static PyObject *__pyx_int_895287692;
static PyObject *__pyx_int_895445557;
static PyObject *__pyx_int_899127202;
static PyObject *__pyx_int_899835584;
static PyObject *__pyx_int_901210569;
static PyObject *__pyx_int_907746093;
static PyObject *__pyx_int_908333586;
static PyObject *__pyx_int_908933415;
static PyObject *__pyx_int_908999204;
static PyObject *__pyx_int_909531756;
static PyObject *__pyx_int_911895606;
static PyObject *__pyx_int_915985419;
static PyObject *__pyx_int_919489135;
static PyObject *__pyx_int_923313619;
static PyObject *__pyx_int_926374254;
static PyObject *__pyx_int_928607799;
static PyObject *__pyx_int_930369212;
static PyObject *__pyx_int_932615841;
static PyObject *__pyx_int_933301370;
static PyObject *__pyx_int_935293895;
static PyObject *__pyx_int_936633572;
static PyObject *__pyx_int_941366308;
static PyObject *__pyx_int_941896748;
static PyObject *__pyx_int_943212656;
static PyObject *__pyx_int_944271416;
static PyObject *__pyx_int_945164165;
static PyObject *__pyx_int_953270745;
static PyObject *__pyx_int_953803233;
static PyObject *__pyx_int_954669403;
static PyObject *__pyx_int_957055980;
static PyObject *__pyx_int_958871085;
static PyObject *__pyx_int_959321879;
static PyObject *__pyx_int_960056178;
static PyObject *__pyx_int_961245753;
static PyObject *__pyx_int_965841320;
static PyObject *__pyx_int_967311729;
static PyObject *__pyx_int_972512814;
static PyObject *__pyx_int_974986535;
static PyObject *__pyx_int_975451694;
static PyObject *__pyx_int_975658646;
static PyObject *__pyx_int_975967766;
static PyObject *__pyx_int_976899700;
static PyObject *__pyx_int_978220090;
static PyObject *__pyx_int_983426092;
static PyObject *__pyx_int_984907214;
static PyObject *__pyx_int_993742198;
static PyObject *__pyx_int_994932283;
static PyObject *__pyx_int_999329963;
static PyObject *__pyx_int_1001089995;
static PyObject *__pyx_int_1002142683;
static PyObject *__pyx_int_1002783846;
static PyObject *__pyx_int_1003007129;
static PyObject *__pyx_int_1004265696;
static PyObject *__pyx_int_1008606754;
static PyObject *__pyx_int_1008918595;
static PyObject *__pyx_int_1009259540;
static PyObject *__pyx_int_1010582648;
static PyObject *__pyx_int_1011120188;
static PyObject *__pyx_int_1011452712;
static PyObject *__pyx_int_1014646705;
static PyObject *__pyx_int_1015671571;
static PyObject *__pyx_int_1027426170;
static PyObject *__pyx_int_1028094525;
static PyObject *__pyx_int_1030690015;
static PyObject *__pyx_int_1033081774;
static PyObject *__pyx_int_1033297158;
static PyObject *__pyx_int_1034867998;
static PyObject *__pyx_int_1038082786;
static PyObject *__pyx_int_1039717051;
static PyObject *__pyx_int_1040559837;
static PyObject *__pyx_int_1042226977;
static PyObject *__pyx_int_1042385657;
static PyObject *__pyx_int_1044267644;
static PyObject *__pyx_int_1044544574;
static PyObject *__pyx_int_1047239000;
static PyObject *__pyx_int_1052338372;
static PyObject *__pyx_int_1054729187;
static PyObject *__pyx_int_1058709744;
static PyObject *__pyx_int_1059270954;
static PyObject *__pyx_int_1059722517;
static PyObject *__pyx_int_1061110142;
static PyObject *__pyx_int_1061256767;
static PyObject *__pyx_int_1062597235;
static PyObject *__pyx_int_1066570413;
static PyObject *__pyx_int_1068351396;
static PyObject *__pyx_int_1075025698;
static PyObject *__pyx_int_1075847264;
static PyObject *__pyx_int_1077985408;
static PyObject *__pyx_int_1078185097;
static PyObject *__pyx_int_1080017571;
static PyObject *__pyx_int_1080094634;
static PyObject *__pyx_int_1082771913;
static PyObject *__pyx_int_1086357568;
static PyObject *__pyx_int_1093597963;
static PyObject *__pyx_int_1094828930;
static PyObject *__pyx_int_1097159550;
static PyObject *__pyx_int_1098792767;
static PyObject *__pyx_int_1101901292;
static PyObject *__pyx_int_1103331905;
static PyObject *__pyx_int_1106041591;
static PyObject *__pyx_int_1107234197;
static PyObject *__pyx_int_1108339068;
static PyObject *__pyx_int_1109467491;
static PyObject *__pyx_int_1111672452;
static PyObject *__pyx_int_1113818384;
static PyObject *__pyx_int_1115438654;
static PyObject *__pyx_int_1119727848;
static PyObject *__pyx_int_1120306242;
static PyObject *__pyx_int_1120974935;
static PyObject *__pyx_int_1126790795;
static PyObject *__pyx_int_1128014560;
static PyObject *__pyx_int_1128514950;
static PyObject *__pyx_int_1133234376;
static PyObject *__pyx_int_1135389935;
static PyObject *__pyx_int_1137018435;
static PyObject *__pyx_int_1137477952;
static PyObject *__pyx_int_1139781709;
static PyObject *__pyx_int_1143087718;
static PyObject *__pyx_int_1145359496;
static PyObject *__pyx_int_1147550661;
static PyObject *__pyx_int_1148730428;
static PyObject *__pyx_int_1149249077;
static PyObject *__pyx_int_1150208456;
static PyObject *__pyx_int_1154254916;
static PyObject *__pyx_int_1155237496;
static PyObject *__pyx_int_1162203018;
static PyObject *__pyx_int_1164071807;
static PyObject *__pyx_int_1167051466;
static PyObject *__pyx_int_1169141738;
static PyObject *__pyx_int_1171229253;
static PyObject *__pyx_int_1172967064;
static PyObject *__pyx_int_1173430173;
static PyObject *__pyx_int_1174215055;
static PyObject *__pyx_int_1176707941;
static PyObject *__pyx_int_1179044492;
static PyObject *__pyx_int_1179510461;
static PyObject *__pyx_int_1180849278;
static PyObject *__pyx_int_1181045119;
static PyObject *__pyx_int_1183697867;
static PyObject *__pyx_int_1184342925;
static PyObject *__pyx_int_1187679302;
static PyObject *__pyx_int_1192455638;
static PyObject *__pyx_int_1195886990;
static PyObject *__pyx_int_1199193405;
static PyObject *__pyx_int_1201765386;
static PyObject *__pyx_int_1202630377;
static PyObject *__pyx_int_1202797690;
static PyObject *__pyx_int_1204391495;
static PyObject *__pyx_int_1206477858;
static PyObject *__pyx_int_1210328172;
static PyObject *__pyx_int_1211247597;
static PyObject *__pyx_int_1212733584;
static PyObject *__pyx_int_1214797936;
static PyObject *__pyx_int_1215061108;
static PyObject *__pyx_int_1215313976;
static PyObject *__pyx_int_1222152264;
static PyObject *__pyx_int_1224348052;
static PyObject *__pyx_int_1229577106;
static PyObject *__pyx_int_1229899655;
static PyObject *__pyx_int_1233637070;
static PyObject *__pyx_int_1233856572;
static PyObject *__pyx_int_1235855840;
static PyObject *__pyx_int_1239126601;
static PyObject *__pyx_int_1239331162;
static PyObject *__pyx_int_1239443753;
static PyObject *__pyx_int_1243112415;
static PyObject *__pyx_int_1243905413;
static PyObject *__pyx_int_1243948399;
static PyObject *__pyx_int_1246420628;
static PyObject *__pyx_int_1248802510;
static PyObject *__pyx_int_1250283471;
static PyObject *__pyx_int_1256100938;
static PyObject *__pyx_int_1257309336;
static PyObject *__pyx_int_1258480242;
static PyObject *__pyx_int_1260232239;
static PyObject *__pyx_int_1263263126;
static PyObject *__pyx_int_1265195639;
static PyObject *__pyx_int_1265776953;
static PyObject *__pyx_int_1269344483;
static PyObject *__pyx_int_1272813131;
static PyObject *__pyx_int_1273168787;
static PyObject *__pyx_int_1277555970;
static PyObject *__pyx_int_1277568618;
static PyObject *__pyx_int_1280103576;
static PyObject *__pyx_int_1282050075;
static PyObject *__pyx_int_1283575245;
static PyObject *__pyx_int_1286567175;
static PyObject *__pyx_int_1289001036;
static PyObject *__pyx_int_1290801793;
static PyObject *__pyx_int_1296297904;
static PyObject *__pyx_int_1296947098;
static PyObject *__pyx_int_1297403050;
static PyObject *__pyx_int_1299594043;
static PyObject *__pyx_int_1303096294;
static PyObject *__pyx_int_1305906550;
static PyObject *__pyx_int_1305975373;
static PyObject *__pyx_int_1306967366;
static PyObject *__pyx_int_1311188841;
static PyObject *__pyx_int_1313788572;
static PyObject *__pyx_int_1315562145;
static PyObject *__pyx_int_1315723890;
static PyObject *__pyx_int_1316239930;
static PyObject *__pyx_int_1320957812;
static PyObject *__pyx_int_1321699145;
static PyObject *__pyx_int_1322425422;
static PyObject *__pyx_int_1330631070;
static PyObject *__pyx_int_1333838021;
static PyObject *__pyx_int_1334037708;
static PyObject *__pyx_int_1335535747;
static PyObject *__pyx_int_1336584933;
static PyObject *__pyx_int_1337376481;
static PyObject *__pyx_int_1339137615;
static PyObject *__pyx_int_1340463100;
static PyObject *__pyx_int_1343127501;
static PyObject *__pyx_int_1343618912;
static PyObject *__pyx_int_1344809080;
static PyObject *__pyx_int_1347481760;
static PyObject *__pyx_int_1347548327;
static PyObject *__pyx_int_1348481072;
static PyObject *__pyx_int_1350078989;
static PyObject *__pyx_int_1357946960;
static PyObject *__pyx_int_1362321559;
static PyObject *__pyx_int_1364325282;
static PyObject *__pyx_int_1367295589;
static PyObject *__pyx_int_1368901318;
static PyObject *__pyx_int_1369810420;
static PyObject *__pyx_int_1371368976;
static PyObject *__pyx_int_1374921297;
static PyObject *__pyx_int_1374988112;
static PyObject *__pyx_int_1378429307;
static PyObject *__pyx_int_1381168804;
static PyObject *__pyx_int_1381620373;
static PyObject *__pyx_int_1383856311;
static PyObject *__pyx_int_1385356242;
static PyObject *__pyx_int_1385547719;
static PyObject *__pyx_int_1391201670;
static PyObject *__pyx_int_1391895634;
static PyObject *__pyx_int_1398011302;
static PyObject *__pyx_int_1398944049;
static PyObject *__pyx_int_1400783205;
static PyObject *__pyx_int_1400849762;
static PyObject *__pyx_int_1402811438;
static PyObject *__pyx_int_1403299063;
static PyObject *__pyx_int_1408607827;
static PyObject *__pyx_int_1408749034;
static PyObject *__pyx_int_1412049534;
static PyObject *__pyx_int_1414855848;
static PyObject *__pyx_int_1417561698;
static PyObject *__pyx_int_1418573201;
static PyObject *__pyx_int_1418839493;
static PyObject *__pyx_int_1422699085;
static PyObject *__pyx_int_1423022939;
static PyObject *__pyx_int_1425844308;
static PyObject *__pyx_int_1428173050;
static PyObject *__pyx_int_1431699370;
static PyObject *__pyx_int_1432761139;
static PyObject *__pyx_int_1436590835;
static PyObject *__pyx_int_1437050866;
static PyObject *__pyx_int_1437280870;
static PyObject *__pyx_int_1441952575;
static PyObject *__pyx_int_1442818645;
static PyObject *__pyx_int_1443857720;
static PyObject *__pyx_int_1445669757;
static PyObject *__pyx_int_1446242576;
static PyObject *__pyx_int_1448540844;
static PyObject *__pyx_int_1449407026;
static PyObject *__pyx_int_1451044056;
static PyObject *__pyx_int_1455525988;
static PyObject *__pyx_int_1459268694;
static PyObject *__pyx_int_1463996600;
static PyObject *__pyx_int_1465383342;
static PyObject *__pyx_int_1469301956;
static PyObject *__pyx_int_1470539505;
static PyObject *__pyx_int_1474502543;
static PyObject *__pyx_int_1474760595;
static PyObject *__pyx_int_1475418501;
static PyObject *__pyx_int_1475980887;
static PyObject *__pyx_int_1479289972;
static PyObject *__pyx_int_1480485785;
static PyObject *__pyx_int_1482221744;
static PyObject *__pyx_int_1483753576;
static PyObject *__pyx_int_1484005843;
static PyObject *__pyx_int_1486471617;
static PyObject *__pyx_int_1487645946;
static PyObject *__pyx_int_1491644504;
static PyObject *__pyx_int_1494807662;
static PyObject *__pyx_int_1499065266;
static PyObject *__pyx_int_1500395319;
static PyObject *__pyx_int_1503449823;
static PyObject *__pyx_int_1503764984;
static PyObject *__pyx_int_1507497298;
static PyObject *__pyx_int_1508618841;
static PyObject *__pyx_int_1509430414;
static PyObject *__pyx_int_1512910199;
static PyObject *__pyx_int_1514790577;
static PyObject *__pyx_int_1515908788;
static PyObject *__pyx_int_1517041206;
static PyObject *__pyx_int_1517440620;
static PyObject *__pyx_int_1517767529;
static PyObject *__pyx_int_1521706781;
static PyObject *__pyx_int_1525593178;
static PyObject *__pyx_int_1530455833;
static PyObject *__pyx_int_1532285339;
static PyObject *__pyx_int_1532751286;
static PyObject *__pyx_int_1533017514;
static PyObject *__pyx_int_1536934080;
static PyObject *__pyx_int_1537253627;
static PyObject *__pyx_int_1542305371;
static PyObject *__pyx_int_1543208500;
static PyObject *__pyx_int_1546530418;
static PyObject *__pyx_int_1549591736;
static PyObject *__pyx_int_1550332980;
static PyObject *__pyx_int_1551037884;
static PyObject *__pyx_int_1551124588;
static PyObject *__pyx_int_1554391400;
static PyObject *__pyx_int_1558493276;
static PyObject *__pyx_int_1559041666;
static PyObject *__pyx_int_1560382517;
static PyObject *__pyx_int_1560637892;
static PyObject *__pyx_int_1566435258;
static PyObject *__pyx_int_1568718495;
static PyObject *__pyx_int_1570751170;
static PyObject *__pyx_int_1571005438;
static PyObject *__pyx_int_1575467613;
static PyObject *__pyx_int_1576976609;
static PyObject *__pyx_int_1580087799;
static PyObject *__pyx_int_1580150641;
static PyObject *__pyx_int_1583276732;
static PyObject *__pyx_int_1584504582;
static PyObject *__pyx_int_1586903591;
static PyObject *__pyx_int_1587397571;
static PyObject *__pyx_int_1591917662;
static PyObject *__pyx_int_1592394909;
static PyObject *__pyx_int_1600119230;
static PyObject *__pyx_int_1600795957;
static PyObject *__pyx_int_1604494077;
static PyObject *__pyx_int_1606591296;
static PyObject *__pyx_int_1607244650;
static PyObject *__pyx_int_1608629855;
static PyObject *__pyx_int_1608975247;
static PyObject *__pyx_int_1610459739;
static PyObject *__pyx_int_1613770832;
static PyObject *__pyx_int_1614815264;
static PyObject *__pyx_int_1615861247;
static PyObject *__pyx_int_1616945344;
static PyObject *__pyx_int_1620529459;
static PyObject *__pyx_int_1621147744;
static PyObject *__pyx_int_1626319424;
static PyObject *__pyx_int_1627235199;
static PyObject *__pyx_int_1633788866;
static PyObject *__pyx_int_1635502980;
static PyObject *__pyx_int_1636604631;
static PyObject *__pyx_int_1638122081;
static PyObject *__pyx_int_1639438038;
static PyObject *__pyx_int_1639824860;
static PyObject *__pyx_int_1640576439;
static PyObject *__pyx_int_1641816226;
static PyObject *__pyx_int_1646252340;
static PyObject *__pyx_int_1647391059;
static PyObject *__pyx_int_1649639237;
static PyObject *__pyx_int_1649704518;
static PyObject *__pyx_int_1650632388;
static PyObject *__pyx_int_1654886325;
static PyObject *__pyx_int_1655096418;
static PyObject *__pyx_int_1656084439;
static PyObject *__pyx_int_1665278241;
static PyObject *__pyx_int_1667474886;
static PyObject *__pyx_int_1668212892;
static PyObject *__pyx_int_1669664834;
static PyObject *__pyx_int_1671808611;
static PyObject *__pyx_int_1673061617;
static PyObject *__pyx_int_1673313503;
static PyObject *__pyx_int_1675577880;
static PyObject *__pyx_int_1678381017;
static PyObject *__pyx_int_1679968233;
static PyObject *__pyx_int_1681011286;
static PyObject *__pyx_int_1683407248;
static PyObject *__pyx_int_1684319432;
static PyObject *__pyx_int_1685577905;
static PyObject *__pyx_int_1689045092;
static PyObject *__pyx_int_1689376213;
static PyObject *__pyx_int_1699095331;
static PyObject *__pyx_int_1699839814;
static PyObject *__pyx_int_1699970625;
static PyObject *__pyx_int_1701162954;
static PyObject *__pyx_int_1706019429;
static PyObject *__pyx_int_1707065306;
static PyObject *__pyx_int_1708848333;
static PyObject *__pyx_int_1709610350;
static PyObject *__pyx_int_1714631509;
static PyObject *__pyx_int_1715193156;
static PyObject *__pyx_int_1715741218;
static PyObject *__pyx_int_1716890410;
static PyObject *__pyx_int_1718004428;
static PyObject *__pyx_int_1722469478;
static PyObject *__pyx_int_1723872674;
static PyObject *__pyx_int_1724457132;
static PyObject *__pyx_int_1729977011;
static PyObject *__pyx_int_1730525723;
static PyObject *__pyx_int_1734846926;
static PyObject *__pyx_int_1739181671;
static PyObject *__pyx_int_1739656202;
static PyObject *__pyx_int_1739838676;
static PyObject *__pyx_int_1740553945;
static PyObject *__pyx_int_1742315127;
static PyObject *__pyx_int_1748251740;
static PyObject *__pyx_int_1750626376;
static PyObject *__pyx_int_1750902305;
static PyObject *__pyx_int_1751693520;
static PyObject *__pyx_int_1756818940;
static PyObject *__pyx_int_1756942440;
static PyObject *__pyx_int_1757008337;
static PyObject *__pyx_int_1757691577;
static PyObject *__pyx_int_1764313568;
static PyObject *__pyx_int_1766729511;
static PyObject *__pyx_int_1767536459;
static PyObject *__pyx_int_1768537042;
static PyObject *__pyx_int_1773779408;
static PyObject *__pyx_int_1773916777;
static PyObject *__pyx_int_1775276924;
static PyObject *__pyx_int_1776460110;
static PyObject *__pyx_int_1781871967;
static PyObject *__pyx_int_1783375398;
static PyObject *__pyx_int_1784663195;
static PyObject *__pyx_int_1785380564;
static PyObject *__pyx_int_1786102409;
static PyObject *__pyx_int_1787304780;
static PyObject *__pyx_int_1790575107;
static PyObject *__pyx_int_1790891114;
static PyObject *__pyx_int_1802223062;
static PyObject *__pyx_int_1805211710;
static PyObject *__pyx_int_1806599355;
static PyObject *__pyx_int_1807268051;
static PyObject *__pyx_int_1807470800;
static PyObject *__pyx_int_1807603307;
static PyObject *__pyx_int_1808481195;
static PyObject *__pyx_int_1809054150;
static PyObject *__pyx_int_1814803222;
static PyObject *__pyx_int_1815492186;
static PyObject *__pyx_int_1816667172;
static PyObject *__pyx_int_1817866830;
static PyObject *__pyx_int_1817998408;
static PyObject *__pyx_int_1819063512;
static PyObject *__pyx_int_1820824798;
static PyObject *__pyx_int_1823791212;
static PyObject *__pyx_int_1835907034;
static PyObject *__pyx_int_1836772287;
static PyObject *__pyx_int_1840765549;
static PyObject *__pyx_int_1841019862;
static PyObject *__pyx_int_1841287890;
static PyObject *__pyx_int_1841768865;
static PyObject *__pyx_int_1842759443;
static PyObject *__pyx_int_1844882806;
static PyObject *__pyx_int_1846563261;
static PyObject *__pyx_int_1849112409;
static PyObject *__pyx_int_1851332852;
static PyObject *__pyx_int_1852171925;
static PyObject *__pyx_int_1852748508;
static PyObject *__pyx_int_1857215598;
static PyObject *__pyx_int_1857934291;
static PyObject *__pyx_int_1860738147;
static PyObject *__pyx_int_1862534868;
static PyObject *__pyx_int_1863638845;
static PyObject *__pyx_int_1865862730;
static PyObject *__pyx_int_1867130149;
static PyObject *__pyx_int_1869591006;
static PyObject *__pyx_int_1873927791;
static PyObject *__pyx_int_1874508501;
static PyObject *__pyx_int_1876241833;
static PyObject *__pyx_int_1882732616;
static PyObject *__pyx_int_1883793496;
static PyObject *__pyx_int_1886425312;
static PyObject *__pyx_int_1888542832;
static PyObject *__pyx_int_1890179545;
static PyObject *__pyx_int_1890328081;
static PyObject *__pyx_int_1891211689;
static PyObject *__pyx_int_1893020342;
static PyObject *__pyx_int_1899603969;
static PyObject *__pyx_int_1901997871;
static PyObject *__pyx_int_1903268834;
static PyObject *__pyx_int_1905517169;
static PyObject *__pyx_int_1906247262;
static PyObject *__pyx_int_1907733956;
static PyObject *__pyx_int_1908694277;
static PyObject *__pyx_int_1910319033;
static PyObject *__pyx_int_1914052035;
static PyObject *__pyx_int_1916352843;
static PyObject *__pyx_int_1917518562;
static PyObject *__pyx_int_1917742170;
static PyObject *__pyx_int_1918643758;
static PyObject *__pyx_int_1920112356;
static PyObject *__pyx_int_1922491506;
static PyObject *__pyx_int_1928707164;
static PyObject *__pyx_int_1933530610;
static PyObject *__pyx_int_1936954854;
static PyObject *__pyx_int_1939203699;
static PyObject *__pyx_int_1940642008;
static PyObject *__pyx_int_1941222599;
static PyObject *__pyx_int_1942435775;
static PyObject *__pyx_int_1943217067;
static PyObject *__pyx_int_1945798516;
static PyObject *__pyx_int_1948373848;
static PyObject *__pyx_int_1949973070;
static PyObject *__pyx_int_1950903388;
static PyObject *__pyx_int_1951317047;
static PyObject *__pyx_int_1951935532;
static PyObject *__pyx_int_1953757831;
static PyObject *__pyx_int_1953799400;
static PyObject *__pyx_int_1956440180;
static PyObject *__pyx_int_1963115311;
static PyObject *__pyx_int_1963412655;
static PyObject *__pyx_int_1970642922;
static PyObject *__pyx_int_1973414517;
static PyObject *__pyx_int_1973745387;
static PyObject *__pyx_int_1974459098;
static PyObject *__pyx_int_1974974402;
static PyObject *__pyx_int_1975683434;
static PyObject *__pyx_int_1983593293;
static PyObject *__pyx_int_1984812685;
static PyObject *__pyx_int_1986918061;
static PyObject *__pyx_int_1987484396;
static PyObject *__pyx_int_1988838185;
static PyObject *__pyx_int_1989249228;
static PyObject *__pyx_int_1989864566;
static PyObject *__pyx_int_1991105499;
static PyObject *__pyx_int_2001430874;
static PyObject *__pyx_int_2002398509;
static PyObject *__pyx_int_2003294622;
static PyObject *__pyx_int_2004326894;
static PyObject *__pyx_int_2006576759;
static PyObject *__pyx_int_2008463041;
static PyObject *__pyx_int_2009195472;
static PyObject *__pyx_int_2011214180;
static PyObject *__pyx_int_2013908262;
static PyObject *__pyx_int_2017213508;
static PyObject *__pyx_int_2017778566;
static PyObject *__pyx_int_2018519080;
static PyObject *__pyx_int_2021165296;
static PyObject *__pyx_int_2022240376;
static PyObject *__pyx_int_2022837584;
static PyObject *__pyx_int_2029293177;
static PyObject *__pyx_int_2031621326;
static PyObject *__pyx_int_2037970062;
static PyObject *__pyx_int_2038008818;
static PyObject *__pyx_int_2039214713;
static PyObject *__pyx_int_2041044702;
static PyObject *__pyx_int_2041688520;
static PyObject *__pyx_int_2041877159;
static PyObject *__pyx_int_2043211483;
static PyObject *__pyx_int_2050466060;
static PyObject *__pyx_int_2050833735;
static PyObject *__pyx_int_2051518780;
static PyObject *__pyx_int_2054852340;
static PyObject *__pyx_int_2056189050;
static PyObject *__pyx_int_2057691103;
static PyObject *__pyx_int_2061379749;
static PyObject *__pyx_int_2062270317;
static PyObject *__pyx_int_2068982057;
static PyObject *__pyx_int_2071694838;
static PyObject *__pyx_int_2072901243;
static PyObject *__pyx_int_2073724613;
static PyObject *__pyx_int_2075177163;
static PyObject *__pyx_int_2076935265;
static PyObject *__pyx_int_2077965243;
static PyObject *__pyx_int_2079897426;
static PyObject *__pyx_int_2081048481;
static PyObject *__pyx_int_2084453954;
static PyObject *__pyx_int_2084704233;
static PyObject *__pyx_int_2087309459;
static PyObject *__pyx_int_2088535288;
static PyObject *__pyx_int_2089089148;
static PyObject *__pyx_int_2090982877;
static PyObject *__pyx_int_2094410160;
static PyObject *__pyx_int_2100090966;
static PyObject *__pyx_int_2102799147;
static PyObject *__pyx_int_2105378810;
static PyObject *__pyx_int_2105887268;
static PyObject *__pyx_int_2106063485;
static PyObject *__pyx_int_2108100632;
static PyObject *__pyx_int_2108928974;
static PyObject *__pyx_int_2110667444;
static PyObject *__pyx_int_2117360635;
static PyObject *__pyx_int_2118074177;
static PyObject *__pyx_int_2118214995;
static PyObject *__pyx_int_2118541908;
static PyObject *__pyx_int_2119445034;
static PyObject *__pyx_int_2122220284;
static PyObject *__pyx_int_2122513534;
static PyObject *__pyx_int_2125135846;
static PyObject *__pyx_int_2135253587;
static PyObject *__pyx_int_2135319889;
static PyObject *__pyx_int_2137062819;
static PyObject *__pyx_int_2139062782;
static PyObject *__pyx_int_2139225727;
static PyObject *__pyx_int_2141445340;
static PyObject *__pyx_int_2142417613;
static PyObject *__pyx_int_2144161806;
static PyObject *__pyx_int_2148108681;
static PyObject *__pyx_int_2149987652;
static PyObject *__pyx_int_2151694528;
static PyObject *__pyx_int_2155911963;
static PyObject *__pyx_int_2156299017;
static PyObject *__pyx_int_2157648768;
static PyObject *__pyx_int_2159976285;
static PyObject *__pyx_int_2160117071;
static PyObject *__pyx_int_2169303058;
static PyObject *__pyx_int_2172753945;
static PyObject *__pyx_int_2174228865;
static PyObject *__pyx_int_2174754046;
static PyObject *__pyx_int_2177544179;
static PyObject *__pyx_int_2177748300;
static PyObject *__pyx_int_2177869557;
static PyObject *__pyx_int_2180939647;
static PyObject *__pyx_int_2185314755;
static PyObject *__pyx_int_2187128086;
static PyObject *__pyx_int_2189597983;
static PyObject *__pyx_int_2191335298;
static PyObject *__pyx_int_2193862645;
static PyObject *__pyx_int_2194319100;
static PyObject *__pyx_int_2196052529;
static PyObject *__pyx_int_2197585534;
static PyObject *__pyx_int_2198438022;
static PyObject *__pyx_int_2198571144;
static PyObject *__pyx_int_2200818878;
static PyObject *__pyx_int_2203032232;
static PyObject *__pyx_int_2206440989;
static PyObject *__pyx_int_2208177539;
static PyObject *__pyx_int_2211236943;
static PyObject *__pyx_int_2213296395;
static PyObject *__pyx_int_2216610296;
static PyObject *__pyx_int_2218934982;
static PyObject *__pyx_int_2220981195;
static PyObject *__pyx_int_2223281939;
static PyObject *__pyx_int_2224493444;
static PyObject *__pyx_int_2226875310;
static PyObject *__pyx_int_2227573024;
static PyObject *__pyx_int_2230877308;
static PyObject *__pyx_int_2232388234;
static PyObject *__pyx_int_2232435299;
static PyObject *__pyx_int_2235061775;
static PyObject *__pyx_int_2236228733;
static PyObject *__pyx_int_2237133081;
static PyObject *__pyx_int_2240123921;
static PyObject *__pyx_int_2241073541;
static PyObject *__pyx_int_2244988746;
static PyObject *__pyx_int_2249034635;
static PyObject *__pyx_int_2252555205;
static PyObject *__pyx_int_2253581325;
static PyObject *__pyx_int_2256028891;
static PyObject *__pyx_int_2256734592;
static PyObject *__pyx_int_2256965911;
static PyObject *__pyx_int_2257655686;
static PyObject *__pyx_int_2261089178;
static PyObject *__pyx_int_2269728455;
static PyObject *__pyx_int_2272556026;
static PyObject *__pyx_int_2273808917;
static PyObject *__pyx_int_2274497927;
static PyObject *__pyx_int_2274680428;
static PyObject *__pyx_int_2278477385;
static PyObject *__pyx_int_2280796200;
static PyObject *__pyx_int_2281340285;
static PyObject *__pyx_int_2282195339;
static PyObject *__pyx_int_2283490410;
static PyObject *__pyx_int_2286175436;
static PyObject *__pyx_int_2290289544;
static PyObject *__pyx_int_2290647819;
static PyObject *__pyx_int_2293045232;
static PyObject *__pyx_int_2295101073;
static PyObject *__pyx_int_2297460856;
static PyObject *__pyx_int_2298973838;
static PyObject *__pyx_int_2302690252;
static PyObject *__pyx_int_2305455554;
static PyObject *__pyx_int_2306869641;
static PyObject *__pyx_int_2307489801;
static PyObject *__pyx_int_2307622919;
static PyObject *__pyx_int_2311702848;
static PyObject *__pyx_int_2313884476;
static PyObject *__pyx_int_2315620239;
static PyObject *__pyx_int_2319795663;
static PyObject *__pyx_int_2323976074;
static PyObject *__pyx_int_2324333839;
static PyObject *__pyx_int_2328143614;
static PyObject *__pyx_int_2328828971;
static PyObject *__pyx_int_2330014213;
static PyObject *__pyx_int_2331590177;
static PyObject *__pyx_int_2334669897;
static PyObject *__pyx_int_2336434550;
static PyObject *__pyx_int_2340818315;
static PyObject *__pyx_int_2340947849;
static PyObject *__pyx_int_2341176845;
static PyObject *__pyx_int_2345119218;
static PyObject *__pyx_int_2345191491;
static PyObject *__pyx_int_2347923833;
static PyObject *__pyx_int_2348912013;
static PyObject *__pyx_int_2352307457;
static PyObject *__pyx_int_2353415882;
static PyObject *__pyx_int_2358021891;
static PyObject *__pyx_int_2358182796;
static PyObject *__pyx_int_2358957921;
static PyObject *__pyx_int_2361698556;
static PyObject *__pyx_int_2362090238;
static PyObject *__pyx_int_2366882550;
static PyObject *__pyx_int_2370213795;
static PyObject *__pyx_int_2373340630;
static PyObject *__pyx_int_2374762893;
static PyObject *__pyx_int_2374863873;
static PyObject *__pyx_int_2377486676;
static PyObject *__pyx_int_2378943302;
static PyObject *__pyx_int_2381740923;
static PyObject *__pyx_int_2384911031;
static PyObject *__pyx_int_2387036105;
static PyObject *__pyx_int_2388260884;
static PyObject *__pyx_int_2390325492;
static PyObject *__pyx_int_2391345038;
static PyObject *__pyx_int_2391705863;
static PyObject *__pyx_int_2395588676;
static PyObject *__pyx_int_2398386810;
static PyObject *__pyx_int_2399374476;
static PyObject *__pyx_int_2403728665;
static PyObject *__pyx_int_2404901663;
static PyObject *__pyx_int_2405426947;
static PyObject *__pyx_int_2408187279;
static PyObject *__pyx_int_2408548869;
static PyObject *__pyx_int_2411029155;
static PyObject *__pyx_int_2412431941;
static PyObject *__pyx_int_2420656344;
static PyObject *__pyx_int_2422494913;
static PyObject *__pyx_int_2425400123;
static PyObject *__pyx_int_2427141008;
static PyObject *__pyx_int_2429595872;
static PyObject *__pyx_int_2430122216;
static PyObject *__pyx_int_2430627952;
static PyObject *__pyx_int_2431590963;
static PyObject *__pyx_int_2434238086;
static PyObject *__pyx_int_2438237621;
static PyObject *__pyx_int_2441661558;
static PyObject *__pyx_int_2442242105;
static PyObject *__pyx_int_2443058075;
static PyObject *__pyx_int_2443721105;
static PyObject *__pyx_int_2445657428;
static PyObject *__pyx_int_2448830231;
static PyObject *__pyx_int_2450346104;
static PyObject *__pyx_int_2450884487;
static PyObject *__pyx_int_2454276571;
static PyObject *__pyx_int_2459086143;
static PyObject *__pyx_int_2459735317;
static PyObject *__pyx_int_2460449204;
static PyObject *__pyx_int_2460827538;
static PyObject *__pyx_int_2463879762;
static PyObject *__pyx_int_2471224067;
static PyObject *__pyx_int_2472011535;
static PyObject *__pyx_int_2474404304;
static PyObject *__pyx_int_2475929149;
static PyObject *__pyx_int_2477669779;
static PyObject *__pyx_int_2478443234;
static PyObject *__pyx_int_2479146071;
static PyObject *__pyx_int_2481090929;
static PyObject *__pyx_int_2484176261;
static PyObject *__pyx_int_2486224549;
static PyObject *__pyx_int_2487810577;
static PyObject *__pyx_int_2487896798;
static PyObject *__pyx_int_2492770099;
static PyObject *__pyx_int_2493985684;
static PyObject *__pyx_int_2497604743;
static PyObject *__pyx_int_2499348523;
static PyObject *__pyx_int_2501218972;
static PyObject *__pyx_int_2504130317;
static PyObject *__pyx_int_2505202138;
static PyObject *__pyx_int_2507040230;
static PyObject *__pyx_int_2509612081;
static PyObject *__pyx_int_2510565781;
static PyObject *__pyx_int_2512897874;
static PyObject *__pyx_int_2514908019;
static PyObject *__pyx_int_2516901860;
static PyObject *__pyx_int_2520393566;
static PyObject *__pyx_int_2521517021;
static PyObject *__pyx_int_2526454071;
static PyObject *__pyx_int_2527147926;
static PyObject *__pyx_int_2530391278;
static PyObject *__pyx_int_2531067453;
static PyObject *__pyx_int_2531553906;
static PyObject *__pyx_int_2534638724;
static PyObject *__pyx_int_2535604243;
static PyObject *__pyx_int_2538681184;
static PyObject *__pyx_int_2543297077;
static PyObject *__pyx_int_2543990167;
static PyObject *__pyx_int_2544078150;
static PyObject *__pyx_int_2546386513;
static PyObject *__pyx_int_2547432937;
static PyObject *__pyx_int_2551808385;
static PyObject *__pyx_int_2554718734;
static PyObject *__pyx_int_2555048196;
static PyObject *__pyx_int_2555137236;
static PyObject *__pyx_int_2560144171;
static PyObject *__pyx_int_2561878936;
static PyObject *__pyx_int_2564033334;
static PyObject *__pyx_int_2566595609;
static PyObject *__pyx_int_2570832044;
static PyObject *__pyx_int_2572697195;
static PyObject *__pyx_int_2576986153;
static PyObject *__pyx_int_2578018489;
static PyObject *__pyx_int_2578459033;
static PyObject *__pyx_int_2579611992;
static PyObject *__pyx_int_2581445614;
static PyObject *__pyx_int_2582542199;
static PyObject *__pyx_int_2588757463;
static PyObject *__pyx_int_2592523643;
static PyObject *__pyx_int_2593830191;
static PyObject *__pyx_int_2594734927;
static PyObject *__pyx_int_2595565466;
static PyObject *__pyx_int_2595684844;
static PyObject *__pyx_int_2597806476;
static PyObject *__pyx_int_2599188086;
static PyObject *__pyx_int_2602270848;
static PyObject *__pyx_int_2606453969;
static PyObject *__pyx_int_2607439820;
static PyObject *__pyx_int_2610011675;
static PyObject *__pyx_int_2610673197;
static PyObject *__pyx_int_2612407707;
static PyObject *__pyx_int_2613100635;
static PyObject *__pyx_int_2614737639;
static PyObject *__pyx_int_2622377682;
static PyObject *__pyx_int_2623762152;
static PyObject *__pyx_int_2627016082;
static PyObject *__pyx_int_2627518243;
static PyObject *__pyx_int_2629772188;
static PyObject *__pyx_int_2631065433;
static PyObject *__pyx_int_2631447780;
static PyObject *__pyx_int_2632479860;
static PyObject *__pyx_int_2636087938;
static PyObject *__pyx_int_2637442643;
static PyObject *__pyx_int_2638606623;
static PyObject *__pyx_int_2640243204;
static PyObject *__pyx_int_2644360225;
static PyObject *__pyx_int_2646352285;
static PyObject *__pyx_int_2646852446;
static PyObject *__pyx_int_2648976442;
static PyObject *__pyx_int_2652609425;
static PyObject *__pyx_int_2652734339;
static PyObject *__pyx_int_2653899549;
static PyObject *__pyx_int_2655997905;
static PyObject *__pyx_int_2658625497;
static PyObject *__pyx_int_2661202215;
static PyObject *__pyx_int_2662934430;
static PyObject *__pyx_int_2664543715;
static PyObject *__pyx_int_2667994737;
static PyObject *__pyx_int_2668221674;
static PyObject *__pyx_int_2673705150;
static PyObject *__pyx_int_2678045221;
static PyObject *__pyx_int_2679776671;
static PyObject *__pyx_int_2680341085;
static PyObject *__pyx_int_2682942837;
static PyObject *__pyx_int_2683765030;
static PyObject *__pyx_int_2686254721;
static PyObject *__pyx_int_2687165888;
static PyObject *__pyx_int_2689618160;
static PyObject *__pyx_int_2694904667;
static PyObject *__pyx_int_2695033685;
static PyObject *__pyx_int_2696962144;
static PyObject *__pyx_int_2700099354;
static PyObject *__pyx_int_2700827552;
static PyObject *__pyx_int_2701949495;
static PyObject *__pyx_int_2704774806;
static PyObject *__pyx_int_2706270690;
static PyObject *__pyx_int_2708326185;
static PyObject *__pyx_int_2709260871;
static PyObject *__pyx_int_2711746649;
static PyObject *__pyx_int_2715671932;
static PyObject *__pyx_int_2717407649;
static PyObject *__pyx_int_2721421207;
static PyObject *__pyx_int_2723238387;
static PyObject *__pyx_int_2724322336;
static PyObject *__pyx_int_2724642869;
static PyObject *__pyx_int_2728590687;
static PyObject *__pyx_int_2733856160;
static PyObject *__pyx_int_2734514082;
static PyObject *__pyx_int_2734591178;
static PyObject *__pyx_int_2738905026;
static PyObject *__pyx_int_2743034109;
static PyObject *__pyx_int_2743944855;
static PyObject *__pyx_int_2744104290;
static PyObject *__pyx_int_2745433693;
static PyObject *__pyx_int_2747425121;
static PyObject *__pyx_int_2749160575;
static PyObject *__pyx_int_2751356323;
static PyObject *__pyx_int_2754712981;
static PyObject *__pyx_int_2755636671;
static PyObject *__pyx_int_2756858614;
static PyObject *__pyx_int_2762274643;
static PyObject *__pyx_int_2763173681;
static PyObject *__pyx_int_2764249623;
static PyObject *__pyx_int_2767645557;
static PyObject *__pyx_int_2767672228;
static PyObject *__pyx_int_2776292904;
static PyObject *__pyx_int_2777952454;
static PyObject *__pyx_int_2779116625;
static PyObject *__pyx_int_2779915199;
static PyObject *__pyx_int_2781242211;
static PyObject *__pyx_int_2782082824;
static PyObject *__pyx_int_2782912378;
static PyObject *__pyx_int_2784252325;
static PyObject *__pyx_int_2787207260;
static PyObject *__pyx_int_2790478837;
static PyObject *__pyx_int_2795958615;
static PyObject *__pyx_int_2797888098;
static PyObject *__pyx_int_2800834470;
static PyObject *__pyx_int_2801107407;
static PyObject *__pyx_int_2801566410;
static PyObject *__pyx_int_2801699524;
static PyObject *__pyx_int_2802849917;
static PyObject *__pyx_int_2805175444;
static PyObject *__pyx_int_2807058932;
static PyObject *__pyx_int_2809771154;
static PyObject *__pyx_int_2812801621;
static PyObject *__pyx_int_2815956275;
static PyObject *__pyx_int_2816401017;
static PyObject *__pyx_int_2817676711;
static PyObject *__pyx_int_2818666809;
static PyObject *__pyx_int_2822345105;
static PyObject *__pyx_int_2824099068;
static PyObject *__pyx_int_2827177882;
static PyObject *__pyx_int_2829640523;
static PyObject *__pyx_int_2830708150;
static PyObject *__pyx_int_2833468328;
static PyObject *__pyx_int_2835123396;
static PyObject *__pyx_int_2837966542;
static PyObject *__pyx_int_2842678573;
static PyObject *__pyx_int_2842737049;
static PyObject *__pyx_int_2846482505;
static PyObject *__pyx_int_2848461854;
static PyObject *__pyx_int_2848876391;
static PyObject *__pyx_int_2849626480;
static PyObject *__pyx_int_2850048425;
static PyObject *__pyx_int_2856345839;
static PyObject *__pyx_int_2857194700;
static PyObject *__pyx_int_2857719295;
static PyObject *__pyx_int_2858115069;
static PyObject *__pyx_int_2863326543;
static PyObject *__pyx_int_2865522278;
static PyObject *__pyx_int_2867154858;
static PyObject *__pyx_int_2868897406;
static PyObject *__pyx_int_2871682645;
static PyObject *__pyx_int_2872807568;
static PyObject *__pyx_int_2875968315;
static PyObject *__pyx_int_2876494627;
static PyObject *__pyx_int_2880169549;
static PyObject *__pyx_int_2880240216;
static PyObject *__pyx_int_2883115123;
static PyObject *__pyx_int_2883997099;
static PyObject *__pyx_int_2887651696;
static PyObject *__pyx_int_2891339514;
static PyObject *__pyx_int_2892417312;
static PyObject *__pyx_int_2895723464;
static PyObject *__pyx_int_2897014595;
static PyObject *__pyx_int_2898814052;
static PyObject *__pyx_int_2901361580;
static PyObject *__pyx_int_2902087851;
static PyObject *__pyx_int_2904027272;
static PyObject *__pyx_int_2906624658;
static PyObject *__pyx_int_2910219766;
static PyObject *__pyx_int_2913856577;
static PyObject *__pyx_int_2915017791;
static PyObject *__pyx_int_2916866934;
static PyObject *__pyx_int_2917941677;
static PyObject *__pyx_int_2918353863;
static PyObject *__pyx_int_2923271059;
static PyObject *__pyx_int_2924959737;
static PyObject *__pyx_int_2927934315;
static PyObject *__pyx_int_2930698567;
static PyObject *__pyx_int_2933202493;
static PyObject *__pyx_int_2933734917;
static PyObject *__pyx_int_2934523822;
static PyObject *__pyx_int_2935566865;
static PyObject *__pyx_int_2939266226;
static PyObject *__pyx_int_2943682380;
static PyObject *__pyx_int_2947541573;
static PyObject *__pyx_int_2949277029;
static PyObject *__pyx_int_2950355573;
static PyObject *__pyx_int_2951366063;
static PyObject *__pyx_int_2951971274;
static PyObject *__pyx_int_2952102595;
static PyObject *__pyx_int_2955516313;
static PyObject *__pyx_int_2957853679;
static PyObject *__pyx_int_2958579944;
static PyObject *__pyx_int_2960971305;
static PyObject *__pyx_int_2964376443;
static PyObject *__pyx_int_2966125488;
static PyObject *__pyx_int_2967507152;
static PyObject *__pyx_int_2968011453;
static PyObject *__pyx_int_2970356327;
static PyObject *__pyx_int_2973530695;
static PyObject *__pyx_int_2975484382;
static PyObject *__pyx_int_2976151520;
static PyObject *__pyx_int_2981218425;
static PyObject *__pyx_int_2982705585;
static PyObject *__pyx_int_2983581028;
static PyObject *__pyx_int_2984144751;
static PyObject *__pyx_int_2988687269;
static PyObject *__pyx_int_2989552604;
static PyObject *__pyx_int_2992200171;
static PyObject *__pyx_int_2997825956;
static PyObject *__pyx_int_2998062463;
static PyObject *__pyx_int_2999812018;
static PyObject *__pyx_int_3000790638;
static PyObject *__pyx_int_3001755655;
static PyObject *__pyx_int_3004591147;
static PyObject *__pyx_int_3005978776;
static PyObject *__pyx_int_3009879386;
static PyObject *__pyx_int_3014905469;
static PyObject *__pyx_int_3016654259;
static PyObject *__pyx_int_3016697106;
static PyObject *__pyx_int_3017069671;
static PyObject *__pyx_int_3017672716;
static PyObject *__pyx_int_3025820398;
static PyObject *__pyx_int_3028143674;
static PyObject *__pyx_int_3029510009;
static PyObject *__pyx_int_3031746419;
static PyObject *__pyx_int_3032970164;
static PyObject *__pyx_int_3034082412;
static PyObject *__pyx_int_3034881240;
static PyObject *__pyx_int_3035535058;
static PyObject *__pyx_int_3039795866;
static PyObject *__pyx_int_3043140495;
static PyObject *__pyx_int_3046200461;
static PyObject *__pyx_int_3048588401;
static PyObject *__pyx_int_3049390895;
static PyObject *__pyx_int_3049550261;
static PyObject *__pyx_int_3050821474;
static PyObject *__pyx_int_3051593425;
static PyObject *__pyx_int_3056442267;
static PyObject *__pyx_int_3059440621;
static PyObject *__pyx_int_3060847922;
static PyObject *__pyx_int_3064510765;
static PyObject *__pyx_int_3065430391;
static PyObject *__pyx_int_3065962831;
static PyObject *__pyx_int_3066132406;
static PyObject *__pyx_int_3069049960;
static PyObject *__pyx_int_3070356634;
static PyObject *__pyx_int_3075636216;
static PyObject *__pyx_int_3076639029;
static PyObject *__pyx_int_3079546586;
static PyObject *__pyx_int_3082273397;
static PyObject *__pyx_int_3082974647;
static PyObject *__pyx_int_3084310113;
static PyObject *__pyx_int_3084545389;
static PyObject *__pyx_int_3092726480;
static PyObject *__pyx_int_3093060836;
static PyObject *__pyx_int_3099120491;
static PyObject *__pyx_int_3099667487;
static PyObject *__pyx_int_3100665960;
static PyObject *__pyx_int_3100863416;
static PyObject *__pyx_int_3102011747;
static PyObject *__pyx_int_3102249176;
static PyObject *__pyx_int_3106381470;
static PyObject *__pyx_int_3106780840;
static PyObject *__pyx_int_3110650942;
static PyObject *__pyx_int_3111247143;
static PyObject *__pyx_int_3113855344;
static PyObject *__pyx_int_3115962473;
static PyObject *__pyx_int_3117443513;
static PyObject *__pyx_int_3117535592;
static PyObject *__pyx_int_3120694122;
static PyObject *__pyx_int_3121275539;
static PyObject *__pyx_int_3122358053;
static PyObject *__pyx_int_3123027871;
static PyObject *__pyx_int_3126681063;
static PyObject *__pyx_int_3132806511;
static PyObject *__pyx_int_3134549946;
static PyObject *__pyx_int_3135740889;
static PyObject *__pyx_int_3141400786;
static PyObject *__pyx_int_3144396420;
static PyObject *__pyx_int_3145456443;
static PyObject *__pyx_int_3149649517;
static PyObject *__pyx_int_3151024235;
static PyObject *__pyx_int_3151128937;
static PyObject *__pyx_int_3151392187;
static PyObject *__pyx_int_3152976349;
static PyObject *__pyx_int_3156319645;
static PyObject *__pyx_int_3157750862;
static PyObject *__pyx_int_3160175349;
static PyObject *__pyx_int_3160301282;
static PyObject *__pyx_int_3166494563;
static PyObject *__pyx_int_3167684641;
static PyObject *__pyx_int_3168756668;
static PyObject *__pyx_int_3168937228;
static PyObject *__pyx_int_3175501286;
static PyObject *__pyx_int_3178106961;
static PyObject *__pyx_int_3182487618;
static PyObject *__pyx_int_3183336545;
static PyObject *__pyx_int_3184776046;
static PyObject *__pyx_int_3184946027;
static PyObject *__pyx_int_3185336765;
static PyObject *__pyx_int_3186202582;
static PyObject *__pyx_int_3193921505;
static PyObject *__pyx_int_3196267988;
static PyObject *__pyx_int_3198115200;
static PyObject *__pyx_int_3200178535;
static PyObject *__pyx_int_3201591914;
static PyObject *__pyx_int_3201631749;
static PyObject *__pyx_int_3201918910;
static PyObject *__pyx_int_3202437046;
static PyObject *__pyx_int_3206782108;
static PyObject *__pyx_int_3211623147;
static PyObject *__pyx_int_3212035895;
static PyObject *__pyx_int_3215212461;
static PyObject *__pyx_int_3215307299;
static PyObject *__pyx_int_3217021541;
static PyObject *__pyx_int_3218264685;
static PyObject *__pyx_int_3218761151;
static PyObject *__pyx_int_3224740454;
static PyObject *__pyx_int_3227229120;
static PyObject *__pyx_int_3227541664;
static PyObject *__pyx_int_3229630528;
static PyObject *__pyx_int_3231722213;
static PyObject *__pyx_int_3233831835;
static PyObject *__pyx_int_3234156416;
static PyObject *__pyx_int_3235995134;
static PyObject *__pyx_int_3240894392;
static PyObject *__pyx_int_3243809217;
static PyObject *__pyx_int_3245848246;
static PyObject *__pyx_int_3247465558;
static PyObject *__pyx_int_3250673817;
static PyObject *__pyx_int_3252238545;
static PyObject *__pyx_int_3252932727;
static PyObject *__pyx_int_3253595436;
static PyObject *__pyx_int_3254988725;
static PyObject *__pyx_int_3260915650;
static PyObject *__pyx_int_3261161891;
static PyObject *__pyx_int_3262494647;
static PyObject *__pyx_int_3263785589;
static PyObject *__pyx_int_3265478751;
static PyObject *__pyx_int_3267517855;
static PyObject *__pyx_int_3270937875;
static PyObject *__pyx_int_3273267108;
static PyObject *__pyx_int_3274667266;
static PyObject *__pyx_int_3277757891;
static PyObject *__pyx_int_3279033885;
static PyObject *__pyx_int_3280093505;
static PyObject *__pyx_int_3283088770;
static PyObject *__pyx_int_3284360861;
static PyObject *__pyx_int_3287084079;
static PyObject *__pyx_int_3292445032;
static PyObject *__pyx_int_3294073796;
static PyObject *__pyx_int_3294430577;
static PyObject *__pyx_int_3294782118;
static PyObject *__pyx_int_3295786421;
static PyObject *__pyx_int_3299278474;
static PyObject *__pyx_int_3299409036;
static PyObject *__pyx_int_3301201811;
static PyObject *__pyx_int_3307916247;
static PyObject *__pyx_int_3309594171;
static PyObject *__pyx_int_3310321856;
static PyObject *__pyx_int_3310653893;
static PyObject *__pyx_int_3313212038;
static PyObject *__pyx_int_3313910595;
static PyObject *__pyx_int_3318043793;
static PyObject *__pyx_int_3320835882;
static PyObject *__pyx_int_3323011204;
static PyObject *__pyx_int_3327236038;
static PyObject *__pyx_int_3328402341;
static PyObject *__pyx_int_3328955385;
static PyObject *__pyx_int_3330556482;
static PyObject *__pyx_int_3332740144;
static PyObject *__pyx_int_3334885783;
static PyObject *__pyx_int_3336358691;
static PyObject *__pyx_int_3341394285;
static PyObject *__pyx_int_3342319475;
static PyObject *__pyx_int_3344078279;
static PyObject *__pyx_int_3346248884;
static PyObject *__pyx_int_3347532110;
static PyObject *__pyx_int_3350065803;
static PyObject *__pyx_int_3351728789;
static PyObject *__pyx_int_3354324521;
static PyObject *__pyx_int_3356761769;
static PyObject *__pyx_int_3359869896;
static PyObject *__pyx_int_3359936201;
static PyObject *__pyx_int_3362022572;
static PyObject *__pyx_int_3363418545;
static PyObject *__pyx_int_3366754619;
static PyObject *__pyx_int_3368567691;
static PyObject *__pyx_int_3371096953;
static PyObject *__pyx_int_3374361702;
static PyObject *__pyx_int_3375740769;
static PyObject *__pyx_int_3376449993;
static PyObject *__pyx_int_3381544775;
static PyObject *__pyx_int_3385345166;
static PyObject *__pyx_int_3385409673;
static PyObject *__pyx_int_3387549984;
static PyObject *__pyx_int_3388507166;
static PyObject *__pyx_int_3393556426;
static PyObject *__pyx_int_3395642799;
static PyObject *__pyx_int_3398190662;
static PyObject *__pyx_int_3399679628;
static PyObject *__pyx_int_3399941250;
static PyObject *__pyx_int_3400528769;
static PyObject *__pyx_int_3402253711;
static PyObject *__pyx_int_3403100636;
static PyObject *__pyx_int_3408119516;
static PyObject *__pyx_int_3409685355;
static PyObject *__pyx_int_3410398667;
static PyObject *__pyx_int_3413881008;
static PyObject *__pyx_int_3414450555;
static PyObject *__pyx_int_3419096717;
static PyObject *__pyx_int_3419915562;
static PyObject *__pyx_int_3421038627;
static PyObject *__pyx_int_3427763148;
static PyObject *__pyx_int_3429263018;
static PyObject *__pyx_int_3430322568;
static PyObject *__pyx_int_3431482436;
static PyObject *__pyx_int_3431546947;
static PyObject *__pyx_int_3432737375;
static PyObject *__pyx_int_3433712980;
static PyObject *__pyx_int_3435941763;
static PyObject *__pyx_int_3441850377;
static PyObject *__pyx_int_3444343245;
static PyObject *__pyx_int_3444575871;
static PyObject *__pyx_int_3446004468;
static PyObject *__pyx_int_3447698098;
static PyObject *__pyx_int_3452783745;
static PyObject *__pyx_int_3454686199;
static PyObject *__pyx_int_3454790438;
static PyObject *__pyx_int_3459953789;
static PyObject *__pyx_int_3460925390;
static PyObject *__pyx_int_3460984630;
static PyObject *__pyx_int_3462883241;
static PyObject *__pyx_int_3464042516;
static PyObject *__pyx_int_3464344499;
static PyObject *__pyx_int_3467192302;
static PyObject *__pyx_int_3469625735;
static PyObject *__pyx_int_3473416636;
static PyObject *__pyx_int_3474729866;
static PyObject *__pyx_int_3475313331;
static PyObject *__pyx_int_3477767631;
static PyObject *__pyx_int_3481945413;
static PyObject *__pyx_int_3483825537;
static PyObject *__pyx_int_3486468741;
static PyObject *__pyx_int_3488279077;
static PyObject *__pyx_int_3496503480;
static PyObject *__pyx_int_3496589753;
static PyObject *__pyx_int_3496721360;
static PyObject *__pyx_int_3497509347;
static PyObject *__pyx_int_3499326569;
static PyObject *__pyx_int_3501252752;
static PyObject *__pyx_int_3501741890;
static PyObject *__pyx_int_3503319995;
static PyObject *__pyx_int_3509871135;
static PyObject *__pyx_int_3513301457;
static PyObject *__pyx_int_3516619604;
static PyObject *__pyx_int_3516813135;
static PyObject *__pyx_int_3518358430;
static PyObject *__pyx_int_3519142200;
static PyObject *__pyx_int_3520161977;
static PyObject *__pyx_int_3521504564;
static PyObject *__pyx_int_3528626907;
static PyObject *__pyx_int_3530123707;
static PyObject *__pyx_int_3530407890;
static PyObject *__pyx_int_3533459022;
static PyObject *__pyx_int_3535072918;
static PyObject *__pyx_int_3535486456;
static PyObject *__pyx_int_3537006015;
static PyObject *__pyx_int_3537852828;
static PyObject *__pyx_int_3542330227;
static PyObject *__pyx_int_3543599269;
static PyObject *__pyx_int_3545789473;
static PyObject *__pyx_int_3547052216;
static PyObject *__pyx_int_3547250131;
static PyObject *__pyx_int_3553849021;
static PyObject *__pyx_int_3554993207;
static PyObject *__pyx_int_3556361835;
static PyObject *__pyx_int_3557504664;
static PyObject *__pyx_int_3563566036;
static PyObject *__pyx_int_3563743934;
static PyObject *__pyx_int_3564045318;
static PyObject *__pyx_int_3566750796;
static PyObject *__pyx_int_3569255213;
static PyObject *__pyx_int_3570689971;
static PyObject *__pyx_int_3572145929;
static PyObject *__pyx_int_3573941694;
static PyObject *__pyx_int_3575528878;
static PyObject *__pyx_int_3576539503;
static PyObject *__pyx_int_3576870512;
static PyObject *__pyx_int_3580146133;
static PyObject *__pyx_int_3580869306;
static PyObject *__pyx_int_3587531953;
static PyObject *__pyx_int_3588745010;
static PyObject *__pyx_int_3593056380;
static PyObject *__pyx_int_3594982253;
static PyObject *__pyx_int_3596728278;
static PyObject *__pyx_int_3597364157;
static PyObject *__pyx_int_3597515707;
static PyObject *__pyx_int_3599595085;
static PyObject *__pyx_int_3602770327;
static PyObject *__pyx_int_3604373943;
static PyObject *__pyx_int_3610369226;
static PyObject *__pyx_int_3613494426;
static PyObject *__pyx_int_3613570519;
static PyObject *__pyx_int_3617213773;
static PyObject *__pyx_int_3620022987;
static PyObject *__pyx_int_3621216949;
static PyObject *__pyx_int_3622233649;
static PyObject *__pyx_int_3623636965;
static PyObject *__pyx_int_3625268135;
static PyObject *__pyx_int_3629546796;
static PyObject *__pyx_int_3630984372;
static PyObject *__pyx_int_3631459288;
static PyObject *__pyx_int_3633334344;
static PyObject *__pyx_int_3635733660;
static PyObject *__pyx_int_3635996816;
static PyObject *__pyx_int_3638064043;
static PyObject *__pyx_int_3644379585;
static PyObject *__pyx_int_3647212047;
static PyObject *__pyx_int_3647454910;
static PyObject *__pyx_int_3648039385;
static PyObject *__pyx_int_3651041127;
static PyObject *__pyx_int_3652904859;
static PyObject *__pyx_int_3654906025;
static PyObject *__pyx_int_3655459128;
static PyObject *__pyx_int_3664101311;
static PyObject *__pyx_int_3664604599;
static PyObject *__pyx_int_3665145818;
static PyObject *__pyx_int_3667219033;
static PyObject *__pyx_int_3669462566;
static PyObject *__pyx_int_3671750063;
static PyObject *__pyx_int_3673476453;
static PyObject *__pyx_int_3673637356;
static PyObject *__pyx_int_3678124923;
static PyObject *__pyx_int_3681988059;
static PyObject *__pyx_int_3682191598;
static PyObject *__pyx_int_3683022916;
static PyObject *__pyx_int_3683797321;
static PyObject *__pyx_int_3687994002;
static PyObject *__pyx_int_3688593069;
static PyObject *__pyx_int_3688947771;
static PyObject *__pyx_int_3693126241;
static PyObject *__pyx_int_3697393085;
static PyObject *__pyx_int_3698224818;
static PyObject *__pyx_int_3699352540;
static PyObject *__pyx_int_3702665459;
static PyObject *__pyx_int_3704280881;
static PyObject *__pyx_int_3704300486;
static PyObject *__pyx_int_3705438115;
static PyObject *__pyx_int_3708173718;
static PyObject *__pyx_int_3710368113;
static PyObject *__pyx_int_3711829422;
static PyObject *__pyx_int_3715932637;
static PyObject *__pyx_int_3717614411;
static PyObject *__pyx_int_3720081049;
static PyObject *__pyx_int_3722280097;
static PyObject *__pyx_int_3722699582;
static PyObject *__pyx_int_3725069491;
static PyObject *__pyx_int_3727205754;
static PyObject *__pyx_int_3731654548;
static PyObject *__pyx_int_3731845041;
static PyObject *__pyx_int_3732514782;
static PyObject *__pyx_int_3734260298;
static PyObject *__pyx_int_3736164937;
static PyObject *__pyx_int_3739122087;
static PyObject *__pyx_int_3745345300;
static PyObject *__pyx_int_3746175075;
static PyObject *__pyx_int_3747192018;
static PyObject *__pyx_int_3747855548;
static PyObject *__pyx_int_3749357023;
static PyObject *__pyx_int_3755965093;
static PyObject *__pyx_int_3756188221;
static PyObject *__pyx_int_3756299780;
static PyObject *__pyx_int_3762019296;
static PyObject *__pyx_int_3762502690;
static PyObject *__pyx_int_3762923945;
static PyObject *__pyx_int_3764988233;
static PyObject *__pyx_int_3765465232;
static PyObject *__pyx_int_3767586992;
static PyObject *__pyx_int_3769721975;
static PyObject *__pyx_int_3772791771;
static PyObject *__pyx_int_3776767469;
static PyObject *__pyx_int_3778151818;
static PyObject *__pyx_int_3778599393;
static PyObject *__pyx_int_3780097726;
static PyObject *__pyx_int_3781033664;
static PyObject *__pyx_int_3787349855;
static PyObject *__pyx_int_3789633753;
static PyObject *__pyx_int_3791519004;
static PyObject *__pyx_int_3794078908;
static PyObject *__pyx_int_3795705826;
static PyObject *__pyx_int_3799085459;
static PyObject *__pyx_int_3799141122;
static PyObject *__pyx_int_3801332234;
static PyObject *__pyx_int_3802222185;
static PyObject *__pyx_int_3803995742;
static PyObject *__pyx_int_3806477791;
static PyObject *__pyx_int_3808662347;
static PyObject *__pyx_int_3810496343;
static PyObject *__pyx_int_3812548067;
static PyObject *__pyx_int_3813386408;
static PyObject *__pyx_int_3818836405;
static PyObject *__pyx_int_3822090177;
static PyObject *__pyx_int_3823320797;
static PyObject *__pyx_int_3825007647;
static PyObject *__pyx_int_3828103837;
static PyObject *__pyx_int_3828863972;
static PyObject *__pyx_int_3832705686;
static PyObject *__pyx_int_3835036895;
static PyObject *__pyx_int_3835484340;
static PyObject *__pyx_int_3837287516;
static PyObject *__pyx_int_3840161747;
static PyObject *__pyx_int_3841024952;
static PyObject *__pyx_int_3843699074;
static PyObject *__pyx_int_3845444069;
static PyObject *__pyx_int_3847203498;
static PyObject *__pyx_int_3854606378;
static PyObject *__pyx_int_3856137295;
static PyObject *__pyx_int_3857003729;
static PyObject *__pyx_int_3857572124;
static PyObject *__pyx_int_3858759450;
static PyObject *__pyx_int_3862026214;
static PyObject *__pyx_int_3863849899;
static PyObject *__pyx_int_3866325909;
static PyObject *__pyx_int_3867060991;
static PyObject *__pyx_int_3868552805;
static PyObject *__pyx_int_3871163981;
static PyObject *__pyx_int_3873845719;
static PyObject *__pyx_int_3874428392;
static PyObject *__pyx_int_3875770207;
static PyObject *__pyx_int_3876557655;
static PyObject *__pyx_int_3877198648;
static PyObject *__pyx_int_3878868455;
static PyObject *__pyx_int_3885750714;
static PyObject *__pyx_int_3887750493;
static PyObject *__pyx_int_3890688725;
static PyObject *__pyx_int_3892248089;
static PyObject *__pyx_int_3894660072;
static PyObject *__pyx_int_3896688048;
static PyObject *__pyx_int_3899946140;
static PyObject *__pyx_int_3901806776;
static PyObject *__pyx_int_3902563182;
static PyObject *__pyx_int_3903871064;
static PyObject *__pyx_int_3907448597;
static PyObject *__pyx_int_3907527627;
static PyObject *__pyx_int_3910161971;
static PyObject *__pyx_int_3911240169;
static PyObject *__pyx_int_3913789102;
static PyObject *__pyx_int_3915653703;
static PyObject *__pyx_int_3917234703;
static PyObject *__pyx_int_3919042237;
static PyObject *__pyx_int_3924369609;
static PyObject *__pyx_int_3925473552;
static PyObject *__pyx_int_3926170974;
static PyObject *__pyx_int_3926825029;
static PyObject *__pyx_int_3928346602;
static PyObject *__pyx_int_3930435503;
static PyObject *__pyx_int_3931371469;
static PyObject *__pyx_int_3933566367;
static PyObject *__pyx_int_3936291284;
static PyObject *__pyx_int_3941213647;
static PyObject *__pyx_int_3943906441;
static PyObject *__pyx_int_3945188843;
static PyObject *__pyx_int_3945269170;
static PyObject *__pyx_int_3950355702;
static PyObject *__pyx_int_3954334041;
static PyObject *__pyx_int_3955191162;
static PyObject *__pyx_int_3958056653;
static PyObject *__pyx_int_3958962195;
static PyObject *__pyx_int_3960309330;
static PyObject *__pyx_int_3962553324;
static PyObject *__pyx_int_3963161475;
static PyObject *__pyx_int_3963727277;
static PyObject *__pyx_int_3967186586;
static PyObject *__pyx_int_3969562369;
static PyObject *__pyx_int_3973773121;
static PyObject *__pyx_int_3974901699;
static PyObject *__pyx_int_3977675356;
static PyObject *__pyx_int_3979133421;
static PyObject *__pyx_int_3980931627;
static PyObject *__pyx_int_3988151131;
static PyObject *__pyx_int_3990953189;
static PyObject *__pyx_int_3991743681;
static PyObject *__pyx_int_3992714006;
static PyObject *__pyx_int_3992742070;
static PyObject *__pyx_int_3995715566;
static PyObject *__pyx_int_4000806809;
static PyObject *__pyx_int_4002861748;
static PyObject *__pyx_int_4003061179;
static PyObject *__pyx_int_4004797018;
static PyObject *__pyx_int_4006521127;
static PyObject *__pyx_int_4007360968;
static PyObject *__pyx_int_4008585671;
static PyObject *__pyx_int_4011190502;
static PyObject *__pyx_int_4011996048;
static PyObject *__pyx_int_4012557807;
static PyObject *__pyx_int_4014189740;
static PyObject *__pyx_int_4020912224;
static PyObject *__pyx_int_4021308739;
static PyObject *__pyx_int_4025428677;
static PyObject *__pyx_int_4026202645;
static PyObject *__pyx_int_4027317232;
static PyObject *__pyx_int_4027744588;
static PyObject *__pyx_int_4030667424;
static PyObject *__pyx_int_4034427016;
static PyObject *__pyx_int_4035489047;
static PyObject *__pyx_int_4037038160;
static PyObject *__pyx_int_4042263547;
static PyObject *__pyx_int_4042459122;
static PyObject *__pyx_int_4043610186;
static PyObject *__pyx_int_4043897329;
static PyObject *__pyx_int_4044981591;
static PyObject *__pyx_int_4045380933;
static PyObject *__pyx_int_4049053350;
static PyObject *__pyx_int_4049844452;
static PyObject *__pyx_int_4059105529;
static PyObject *__pyx_int_4059428100;
static PyObject *__pyx_int_4061003762;
static PyObject *__pyx_int_4063242375;
static PyObject *__pyx_int_4065699751;
static PyObject *__pyx_int_4067639125;
static PyObject *__pyx_int_4068047243;
static PyObject *__pyx_int_4069246893;
static PyObject *__pyx_int_4075877127;
static PyObject *__pyx_int_4075949567;
static PyObject *__pyx_int_4077384432;
static PyObject *__pyx_int_4077846003;
static PyObject *__pyx_int_4082475170;
static PyObject *__pyx_int_4085369519;
static PyObject *__pyx_int_4087501137;
static PyObject *__pyx_int_4091327024;
static PyObject *__pyx_int_4092792573;
static PyObject *__pyx_int_4092916743;
static PyObject *__pyx_int_4094161908;
static PyObject *__pyx_int_4098991525;
static PyObject *__pyx_int_4100872472;
static PyObject *__pyx_int_4101667470;
static PyObject *__pyx_int_4102977912;
static PyObject *__pyx_int_4104605777;
static PyObject *__pyx_int_4107101658;
static PyObject *__pyx_int_4109633523;
static PyObject *__pyx_int_4110568485;
static PyObject *__pyx_int_4110742005;
static PyObject *__pyx_int_4118925222;
static PyObject *__pyx_int_4118987695;
static PyObject *__pyx_int_4121318227;
static PyObject *__pyx_int_4122762354;
static PyObject *__pyx_int_4126475505;
static PyObject *__pyx_int_4126668546;
static PyObject *__pyx_int_4127324150;
static PyObject *__pyx_int_4130281361;
static PyObject *__pyx_int_4135287693;
static PyObject *__pyx_int_4136440770;
static PyObject *__pyx_int_4137964114;
static PyObject *__pyx_int_4138563181;
static PyObject *__pyx_int_4142626212;
static PyObject *__pyx_int_4143317495;
static PyObject *__pyx_int_4144047775;
static PyObject *__pyx_int_4144166391;
static PyObject *__pyx_int_4148292826;
static PyObject *__pyx_int_4149453988;
static PyObject *__pyx_int_4150144569;
static PyObject *__pyx_int_4157467219;
static PyObject *__pyx_int_4160157185;
static PyObject *__pyx_int_4160160501;
static PyObject *__pyx_int_4162055160;
static PyObject *__pyx_int_4162096729;
static PyObject *__pyx_int_4166623649;
static PyObject *__pyx_int_4168907908;
static PyObject *__pyx_int_4169408201;
static PyObject *__pyx_int_4172763771;
static PyObject *__pyx_int_4174560061;
static PyObject *__pyx_int_4177007595;
static PyObject *__pyx_int_4178062228;
static PyObject *__pyx_int_4178635257;
static PyObject *__pyx_int_4180808110;
static PyObject *__pyx_int_4181598602;
static PyObject *__pyx_int_4188952407;
static PyObject *__pyx_int_4190530515;
static PyObject *__pyx_int_4193382664;
static PyObject *__pyx_int_4193849577;
static PyObject *__pyx_int_4195456072;
static PyObject *__pyx_int_4195741690;
static PyObject *__pyx_int_4199882800;
static PyObject *__pyx_int_4200115116;
static PyObject *__pyx_int_4202528135;
static PyObject *__pyx_int_4203181171;
static PyObject *__pyx_int_4205598294;
static PyObject *__pyx_int_4210693615;
static PyObject *__pyx_int_4211818798;
static PyObject *__pyx_int_4212583931;
static PyObject *__pyx_int_4213447064;
static PyObject *__pyx_int_4217086112;
static PyObject *__pyx_int_4219352155;
static PyObject *__pyx_int_4226871307;
static PyObject *__pyx_int_4227536621;
static PyObject *__pyx_int_4227665663;
static PyObject *__pyx_int_4229948412;
static PyObject *__pyx_int_4233094615;
static PyObject *__pyx_int_4234721005;
static PyObject *__pyx_int_4236148354;
static PyObject *__pyx_int_4236429990;
static PyObject *__pyx_int_4237083816;
static PyObject *__pyx_int_4238890068;
static PyObject *__pyx_int_4244381667;
static PyObject *__pyx_int_4245618683;
static PyObject *__pyx_int_4246310725;
static PyObject *__pyx_int_4246528509;
static PyObject *__pyx_int_4250903202;
static PyObject *__pyx_int_4255350624;
static PyObject *__pyx_int_4255800159;
static PyObject *__pyx_int_4260623118;
static PyObject *__pyx_int_4261223649;
static PyObject *__pyx_int_4263110654;
static PyObject *__pyx_int_4267549603;
static PyObject *__pyx_int_4269768577;
static PyObject *__pyx_int_4269907996;
static PyObject *__pyx_int_4270507174;
static PyObject *__pyx_int_4270639778;
static PyObject *__pyx_int_4274053469;
static PyObject *__pyx_int_4278065639;
static PyObject *__pyx_int_4279080257;
static PyObject *__pyx_int_4279952895;
static PyObject *__pyx_int_4284502037;
static PyObject *__pyx_int_4289353045;
static PyObject *__pyx_int_4293295786;
static PyObject *__pyx_int_4294111757;
static PyObject *__pyx_int_4294704398;
static PyObject *__pyx_int_4294908645;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_8;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__15;
static PyObject *__pyx_k__16;
static PyObject *__pyx_k__19;
static PyObject *__pyx_k__20;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__26;
static PyObject *__pyx_k__27;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__13;
static PyObject *__pyx_slice__14;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__136;
static PyObject *__pyx_codeobj__138;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__144;
static PyObject *__pyx_codeobj__146;
/* Late includes */

/* "Aeskeys.pyx":19
 * 
 * 
 * def _compact_word(word):             # <<<<<<<<<<<<<<
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_1_compact_word(PyObject *__pyx_self, PyObject *__pyx_v_word); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_1_compact_word = {"_compact_word", (PyCFunction)__pyx_pw_7Aeskeys_1_compact_word, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_1_compact_word(PyObject *__pyx_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compact_word (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys__compact_word(__pyx_self, ((PyObject *)__pyx_v_word));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys__compact_word(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compact_word", 0);

  /* "Aeskeys.pyx":20
 * 
 * def _compact_word(word):
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]             # <<<<<<<<<<<<<<
 * 
 * def _string_to_bytes(text):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_word, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_LshiftObjC(__pyx_t_1, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_word, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_LshiftObjC(__pyx_t_1, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Or(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_word, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_LshiftObjC(__pyx_t_3, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Or(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_word, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Or(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":19
 * 
 * 
 * def _compact_word(word):             # <<<<<<<<<<<<<<
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys._compact_word", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_3_string_to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_3_string_to_bytes = {"_string_to_bytes", (PyCFunction)__pyx_pw_7Aeskeys_3_string_to_bytes, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_3_string_to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_string_to_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_2_string_to_bytes(__pyx_self, ((PyObject *)__pyx_v_text));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7Aeskeys_16_string_to_bytes_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "Aeskeys.pyx":23
 * 
 * def _string_to_bytes(text):
 *     return list(ord(c) for c in text)             # <<<<<<<<<<<<<<
 * 
 * def _bytes_to_string(binary):
 */

static PyObject *__pyx_pf_7Aeskeys_16_string_to_bytes_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_1_genexpr(__pyx_ptype_7Aeskeys___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 23, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7Aeskeys_16_string_to_bytes_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_string_to_bytes_locals_genexpr, __pyx_n_s_Aeskeys); if (unlikely(!gen)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("Aeskeys._string_to_bytes.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7Aeskeys_16_string_to_bytes_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_r = PyList_New(0); if (unlikely(!__pyx_r)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_text)) { __Pyx_RaiseClosureNameError("text"); __PYX_ERR(0, 23, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_text)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_text)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_text; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 23, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 23, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 23, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_c);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_c, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_c); if (unlikely(__pyx_t_5 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 23, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_r, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */

static PyObject *__pyx_pf_7Aeskeys_2_string_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *__pyx_cur_scope;
  PyObject *__pyx_gb_7Aeskeys_16_string_to_bytes_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_string_to_bytes", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)__pyx_tp_new_7Aeskeys___pyx_scope_struct___string_to_bytes(__pyx_ptype_7Aeskeys___pyx_scope_struct___string_to_bytes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 22, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_text = __pyx_v_text;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);

  /* "Aeskeys.pyx":23
 * 
 * def _string_to_bytes(text):
 *     return list(ord(c) for c in text)             # <<<<<<<<<<<<<<
 * 
 * def _bytes_to_string(binary):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7Aeskeys_16_string_to_bytes_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys._string_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7Aeskeys_16_string_to_bytes_2generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_5_bytes_to_string(PyObject *__pyx_self, PyObject *__pyx_v_binary); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_5_bytes_to_string = {"_bytes_to_string", (PyCFunction)__pyx_pw_7Aeskeys_5_bytes_to_string, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_5_bytes_to_string(PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bytes_to_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4_bytes_to_string(__pyx_self, ((PyObject *)__pyx_v_binary));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7Aeskeys_16_bytes_to_string_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "Aeskeys.pyx":26
 * 
 * def _bytes_to_string(binary):
 *     return "".join(chr(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 * def _concat_list(a, b):
 */

static PyObject *__pyx_pf_7Aeskeys_16_bytes_to_string_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_3_genexpr(__pyx_ptype_7Aeskeys___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 26, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7Aeskeys_16_bytes_to_string_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_bytes_to_string_locals_genexpr, __pyx_n_s_Aeskeys); if (unlikely(!gen)) __PYX_ERR(0, 26, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("Aeskeys._bytes_to_string.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7Aeskeys_16_bytes_to_string_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 26, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) { __Pyx_RaiseClosureNameError("binary"); __PYX_ERR(0, 26, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 26, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 26, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 26, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_b);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_b, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 26, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */

static PyObject *__pyx_pf_7Aeskeys_4_bytes_to_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *__pyx_cur_scope;
  PyObject *__pyx_gb_7Aeskeys_16_bytes_to_string_2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bytes_to_string", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_2__bytes_to_string(__pyx_ptype_7Aeskeys___pyx_scope_struct_2__bytes_to_string, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 25, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_binary = __pyx_v_binary;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_binary);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_binary);

  /* "Aeskeys.pyx":26
 * 
 * def _bytes_to_string(binary):
 *     return "".join(chr(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 * def _concat_list(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7Aeskeys_16_bytes_to_string_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys._bytes_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7Aeskeys_16_bytes_to_string_2generator1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":28
 *     return "".join(chr(b) for b in binary)
 * 
 * def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *     return a + b
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7_concat_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7_concat_list = {"_concat_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7_concat_list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7_concat_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_concat_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_concat_list", 1, 2, 2, 1); __PYX_ERR(0, 28, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_concat_list") < 0)) __PYX_ERR(0, 28, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_concat_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._concat_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_6_concat_list(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_6_concat_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_concat_list", 0);

  /* "Aeskeys.pyx":29
 * 
 * def _concat_list(a, b):
 *     return a + b             # <<<<<<<<<<<<<<
 * 
 * try:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_a, __pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":28
 *     return "".join(chr(b) for b in binary)
 * 
 * def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *     return a + b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys._concat_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":36
 *     xrange = range
 * 
 *     def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *         if isinstance(text, bytes):
 *             return text
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_9_string_to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_text); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_9_string_to_bytes = {"_string_to_bytes", (PyCFunction)__pyx_pw_7Aeskeys_9_string_to_bytes, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_9_string_to_bytes(PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_string_to_bytes (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_8_string_to_bytes(__pyx_self, ((PyObject *)__pyx_v_text));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_8_string_to_bytes(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_string_to_bytes", 0);

  /* "Aeskeys.pyx":37
 * 
 *     def _string_to_bytes(text):
 *         if isinstance(text, bytes):             # <<<<<<<<<<<<<<
 *             return text
 *         return [ord(c) for c in text]
 */
  __pyx_t_1 = PyBytes_Check(__pyx_v_text); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "Aeskeys.pyx":38
 *     def _string_to_bytes(text):
 *         if isinstance(text, bytes):
 *             return text             # <<<<<<<<<<<<<<
 *         return [ord(c) for c in text]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_text);
    __pyx_r = __pyx_v_text;
    goto __pyx_L0;

    /* "Aeskeys.pyx":37
 * 
 *     def _string_to_bytes(text):
 *         if isinstance(text, bytes):             # <<<<<<<<<<<<<<
 *             return text
 *         return [ord(c) for c in text]
 */
  }

  /* "Aeskeys.pyx":39
 *         if isinstance(text, bytes):
 *             return text
 *         return [ord(c) for c in text]             # <<<<<<<<<<<<<<
 * 
 *     def _bytes_to_string(binary):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_v_text)) || PyTuple_CheckExact(__pyx_v_text)) {
    __pyx_t_4 = __pyx_v_text; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 39, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 39, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_8 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_8 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 39, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":36
 *     xrange = range
 * 
 *     def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *         if isinstance(text, bytes):
 *             return text
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys._string_to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":41
 *         return [ord(c) for c in text]
 * 
 *     def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *         return bytes(binary)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_11_bytes_to_string(PyObject *__pyx_self, PyObject *__pyx_v_binary); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_11_bytes_to_string = {"_bytes_to_string", (PyCFunction)__pyx_pw_7Aeskeys_11_bytes_to_string, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_11_bytes_to_string(PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bytes_to_string (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_10_bytes_to_string(__pyx_self, ((PyObject *)__pyx_v_binary));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_10_bytes_to_string(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bytes_to_string", 0);

  /* "Aeskeys.pyx":42
 * 
 *     def _bytes_to_string(binary):
 *         return bytes(binary)             # <<<<<<<<<<<<<<
 * 
 *     def _concat_list(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_binary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":41
 *         return [ord(c) for c in text]
 * 
 *     def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *         return bytes(binary)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys._bytes_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":44
 *         return bytes(binary)
 * 
 *     def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *         return a + bytes(b)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_13_concat_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_13_concat_list = {"_concat_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_13_concat_list, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_13_concat_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_concat_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_concat_list", 1, 2, 2, 1); __PYX_ERR(0, 44, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_concat_list") < 0)) __PYX_ERR(0, 44, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_concat_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 44, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._concat_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_12_concat_list(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_12_concat_list(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_concat_list", 0);

  /* "Aeskeys.pyx":45
 * 
 *     def _concat_list(a, b):
 *         return a + bytes(b)             # <<<<<<<<<<<<<<
 * 
 *     def to_bufferable(binary):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_a, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":44
 *         return bytes(binary)
 * 
 *     def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *         return a + bytes(b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys._concat_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_15to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_15to_bufferable = {"to_bufferable", (PyCFunction)__pyx_pw_7Aeskeys_15to_bufferable, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_15to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bufferable (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_14to_bufferable(__pyx_self, ((PyObject *)__pyx_v_binary));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7Aeskeys_13to_bufferable_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "Aeskeys.pyx":50
 *         if isinstance(binary, bytes):
 *             return binary
 *         return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *     def _get_byte(c):
 */

static PyObject *__pyx_pf_7Aeskeys_13to_bufferable_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_5_genexpr(__pyx_ptype_7Aeskeys___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 50, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7Aeskeys_13to_bufferable_2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_to_bufferable_locals_genexpr, __pyx_n_s_Aeskeys); if (unlikely(!gen)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("Aeskeys.to_bufferable.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7Aeskeys_13to_bufferable_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 50, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) { __Pyx_RaiseClosureNameError("binary"); __PYX_ERR(0, 50, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 50, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_b);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_b, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_b); if (unlikely(__pyx_t_5 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 50, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 50, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */

static PyObject *__pyx_pf_7Aeskeys_14to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *__pyx_cur_scope;
  PyObject *__pyx_gb_7Aeskeys_13to_bufferable_2generator2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bufferable", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_4_to_bufferable(__pyx_ptype_7Aeskeys___pyx_scope_struct_4_to_bufferable, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 47, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_binary = __pyx_v_binary;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_binary);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_binary);

  /* "Aeskeys.pyx":48
 * 
 *     def to_bufferable(binary):
 *         if isinstance(binary, bytes):             # <<<<<<<<<<<<<<
 *             return binary
 *         return bytes(ord(b) for b in binary)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_binary;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_Check(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":49
 *     def to_bufferable(binary):
 *         if isinstance(binary, bytes):
 *             return binary             # <<<<<<<<<<<<<<
 *         return bytes(ord(b) for b in binary)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_binary);
    __pyx_r = __pyx_cur_scope->__pyx_v_binary;
    goto __pyx_L0;

    /* "Aeskeys.pyx":48
 * 
 *     def to_bufferable(binary):
 *         if isinstance(binary, bytes):             # <<<<<<<<<<<<<<
 *             return binary
 *         return bytes(ord(b) for b in binary)
 */
  }

  /* "Aeskeys.pyx":50
 *         if isinstance(binary, bytes):
 *             return binary
 *         return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *     def _get_byte(c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7Aeskeys_13to_bufferable_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys.to_bufferable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7Aeskeys_13to_bufferable_2generator2);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":52
 *         return bytes(ord(b) for b in binary)
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return c
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_17_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_17_get_byte = {"_get_byte", (PyCFunction)__pyx_pw_7Aeskeys_17_get_byte, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_17_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_byte (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_16_get_byte(__pyx_self, ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_16_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_byte", 0);

  /* "Aeskeys.pyx":53
 * 
 *     def _get_byte(c):
 *         return c             # <<<<<<<<<<<<<<
 * 
 * class AES(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_c);
  __pyx_r = __pyx_v_c;
  goto __pyx_L0;

  /* "Aeskeys.pyx":52
 *         return bytes(ord(b) for b in binary)
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return c
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":85
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 * 
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         if len(key) not in (16, 24, 32):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_3AES_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_3AES_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_3AES_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_3AES_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 85, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 85, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 85, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_3AES___init__(__pyx_self, __pyx_v_self, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_3AES___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_rounds = NULL;
  PyObject *__pyx_v_round_key_count = NULL;
  PyObject *__pyx_v_KC = NULL;
  PyObject *__pyx_v_tk = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_rconpointer = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_tt = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":87
 *     def __init__(self, key):
 * 
 *         if len(key) not in (16, 24, 32):             # <<<<<<<<<<<<<<
 *             raise ValueError('Invalid key size ><')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_key); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_1 != 16) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_t_1 != 24) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_t_1 != 32) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "Aeskeys.pyx":88
 * 
 *         if len(key) not in (16, 24, 32):
 *             raise ValueError('Invalid key size ><')             # <<<<<<<<<<<<<<
 * 
 *         rounds = self.number_of_rounds[len(key)]
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)

    /* "Aeskeys.pyx":87
 *     def __init__(self, key):
 * 
 *         if len(key) not in (16, 24, 32):             # <<<<<<<<<<<<<<
 *             raise ValueError('Invalid key size ><')
 * 
 */
  }

  /* "Aeskeys.pyx":90
 *             raise ValueError('Invalid key size ><')
 * 
 *         rounds = self.number_of_rounds[len(key)]             # <<<<<<<<<<<<<<
 * 
 *         # Encryption round keys ^^
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_number_of_rounds); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_Length(__pyx_v_key); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rounds = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":93
 * 
 *         # Encryption round keys ^^
 *         self._Ke = [[0] * 4 for i in xrange(rounds + 1)]             # <<<<<<<<<<<<<<
 * 
 *         # Decryption round keys ^^
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_xrange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_rounds, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 93, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 93, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 93, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1 * 4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 4; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_4, __pyx_temp, __pyx_int_0);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Ke, __pyx_t_5) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "Aeskeys.pyx":96
 * 
 *         # Decryption round keys ^^
 *         self._Kd = [[0] * 4 for i in xrange(rounds + 1)]             # <<<<<<<<<<<<<<
 * 
 *         round_key_count = (rounds + 1) * 4
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_rounds, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_4 = __pyx_t_6; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 96, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 96, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = PyList_New(1 * 4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 4; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_6, __pyx_temp, __pyx_int_0);
      }
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Kd, __pyx_t_5) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "Aeskeys.pyx":98
 *         self._Kd = [[0] * 4 for i in xrange(rounds + 1)]
 * 
 *         round_key_count = (rounds + 1) * 4             # <<<<<<<<<<<<<<
 *         KC = len(key) // 4
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_rounds, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_int_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_round_key_count = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":99
 * 
 *         round_key_count = (rounds + 1) * 4
 *         KC = len(key) // 4             # <<<<<<<<<<<<<<
 * 
 *         # Convert the key into ints ~
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_key); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__Pyx_div_Py_ssize_t(__pyx_t_1, 4)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_KC = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":102
 * 
 *         # Convert the key into ints ~
 *         tk = [ struct.unpack('>i', key[i:i + 4])[0] for i in xrange(0, len(key), 4) ]             # <<<<<<<<<<<<<<
 * 
 *         # Copy values into round key arrays ~
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_xrange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyObject_Length(__pyx_v_key); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_int_0, __pyx_t_7, __pyx_int_4};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_int_0, __pyx_t_7, __pyx_int_4};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 3+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(3+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_7);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_int_4);
    __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 102, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 102, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_struct); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_unpack); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_v_key, 0, 0, &__pyx_v_i, &__pyx_t_11, NULL, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_kp_s_i, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_kp_s_i, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_kp_s_i);
      __Pyx_GIVEREF(__pyx_kp_s_i);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_10, __pyx_kp_s_i);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_10, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_tk = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":105
 * 
 *         # Copy values into round key arrays ~
 *         for i in xrange(0, KC):             # <<<<<<<<<<<<<<
 *             self._Ke[i // 4][i % 4] = tk[i]
 *             self._Kd[rounds - (i // 4)][i % 4] = tk[i]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_xrange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_0, __pyx_v_KC};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_0, __pyx_v_KC};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_int_0);
    __Pyx_INCREF(__pyx_v_KC);
    __Pyx_GIVEREF(__pyx_v_KC);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_v_KC);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 105, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 105, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "Aeskeys.pyx":106
 *         # Copy values into round key arrays ~
 *         for i in xrange(0, KC):
 *             self._Ke[i // 4][i % 4] = tk[i]             # <<<<<<<<<<<<<<
 *             self._Kd[rounds - (i // 4)][i % 4] = tk[i]
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_i, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(PyObject_SetItem(__pyx_t_12, __pyx_t_7, __pyx_t_4) < 0)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "Aeskeys.pyx":107
 *         for i in xrange(0, KC):
 *             self._Ke[i // 4][i % 4] = tk[i]
 *             self._Kd[rounds - (i // 4)][i % 4] = tk[i]             # <<<<<<<<<<<<<<
 * 
 *         # Key expansion (fips-197 section 5.2)
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_i, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_rounds, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_RemainderObjC(__pyx_v_i, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyObject_SetItem(__pyx_t_12, __pyx_t_5, __pyx_t_4) < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "Aeskeys.pyx":105
 * 
 *         # Copy values into round key arrays ~
 *         for i in xrange(0, KC):             # <<<<<<<<<<<<<<
 *             self._Ke[i // 4][i % 4] = tk[i]
 *             self._Kd[rounds - (i // 4)][i % 4] = tk[i]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":110
 * 
 *         # Key expansion (fips-197 section 5.2)
 *         rconpointer = 0             # <<<<<<<<<<<<<<
 *         t = KC
 *         while t < round_key_count:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_rconpointer = __pyx_int_0;

  /* "Aeskeys.pyx":111
 *         # Key expansion (fips-197 section 5.2)
 *         rconpointer = 0
 *         t = KC             # <<<<<<<<<<<<<<
 *         while t < round_key_count:
 * 
 */
  __Pyx_INCREF(__pyx_v_KC);
  __pyx_v_t = __pyx_v_KC;

  /* "Aeskeys.pyx":112
 *         rconpointer = 0
 *         t = KC
 *         while t < round_key_count:             # <<<<<<<<<<<<<<
 * 
 *             tt = tk[KC - 1]
 */
  while (1) {
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_t, __pyx_v_round_key_count, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 112, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!__pyx_t_3) break;

    /* "Aeskeys.pyx":114
 *         while t < round_key_count:
 * 
 *             tt = tk[KC - 1]             # <<<<<<<<<<<<<<
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 */
    __pyx_t_6 = __Pyx_PyInt_SubtractObjC(__pyx_v_KC, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tt, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "Aeskeys.pyx":115
 * 
 *             tt = tk[KC - 1]
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^             # <<<<<<<<<<<<<<
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 */
    __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_tk, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_LshiftObjC(__pyx_t_5, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":116
 *             tt = tk[KC - 1]
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^             # <<<<<<<<<<<<<<
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 *                        self.S[(tt >> 24) & 0xFF]        ^
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_6, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_LshiftObjC(__pyx_t_6, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":115
 * 
 *             tt = tk[KC - 1]
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^             # <<<<<<<<<<<<<<
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 */
    __pyx_t_6 = PyNumber_Xor(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "Aeskeys.pyx":117
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^             # <<<<<<<<<<<<<<
 *                        self.S[(tt >> 24) & 0xFF]        ^
 *                       (self.rcon[rconpointer] << 24))
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_v_tt, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyInt_LshiftObjC(__pyx_t_5, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":116
 *             tt = tk[KC - 1]
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^             # <<<<<<<<<<<<<<
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 *                        self.S[(tt >> 24) & 0xFF]        ^
 */
    __pyx_t_5 = PyNumber_Xor(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "Aeskeys.pyx":118
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 *                        self.S[(tt >> 24) & 0xFF]        ^             # <<<<<<<<<<<<<<
 *                       (self.rcon[rconpointer] << 24))
 *             rconpointer += 1
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_6 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_6, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "Aeskeys.pyx":117
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^             # <<<<<<<<<<<<<<
 *                        self.S[(tt >> 24) & 0xFF]        ^
 *                       (self.rcon[rconpointer] << 24))
 */
    __pyx_t_7 = PyNumber_Xor(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":119
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 *                        self.S[(tt >> 24) & 0xFF]        ^
 *                       (self.rcon[rconpointer] << 24))             # <<<<<<<<<<<<<<
 *             rconpointer += 1
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_rcon); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_rconpointer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_LshiftObjC(__pyx_t_5, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":118
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 *                        self.S[(tt >> 24) & 0xFF]        ^             # <<<<<<<<<<<<<<
 *                       (self.rcon[rconpointer] << 24))
 *             rconpointer += 1
 */
    __pyx_t_5 = PyNumber_Xor(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":115
 * 
 *             tt = tk[KC - 1]
 *             tk[0] ^= ((self.S[(tt >> 16) & 0xFF] << 24) ^             # <<<<<<<<<<<<<<
 *                       (self.S[(tt >>  8) & 0xFF] << 16) ^
 *                       (self.S[ tt        & 0xFF] <<  8) ^
 */
    __pyx_t_6 = PyNumber_InPlaceXor(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_SetItemInt(__pyx_v_tk, __pyx_t_1, __pyx_t_6, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":120
 *                        self.S[(tt >> 24) & 0xFF]        ^
 *                       (self.rcon[rconpointer] << 24))
 *             rconpointer += 1             # <<<<<<<<<<<<<<
 * 
 *             if KC != 8:
 */
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_v_rconpointer, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_rconpointer, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "Aeskeys.pyx":122
 *             rconpointer += 1
 * 
 *             if KC != 8:             # <<<<<<<<<<<<<<
 *                 for i in xrange(1, KC):
 *                     tk[i] ^= tk[i - 1]
 */
    __pyx_t_6 = __Pyx_PyInt_NeObjC(__pyx_v_KC, __pyx_int_8, 8, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_3) {

      /* "Aeskeys.pyx":123
 * 
 *             if KC != 8:
 *                 for i in xrange(1, KC):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_xrange); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_1, __pyx_v_KC};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_1, __pyx_v_KC};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_int_1);
        __Pyx_INCREF(__pyx_v_KC);
        __Pyx_GIVEREF(__pyx_v_KC);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_v_KC);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 123, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 123, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_9(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 123, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "Aeskeys.pyx":124
 *             if KC != 8:
 *                 for i in xrange(1, KC):
 *                     tk[i] ^= tk[i - 1]             # <<<<<<<<<<<<<<
 * 
 *             # Key expansion for 256-bit keys is "slightly different" (fips-197)
 */
        __Pyx_INCREF(__pyx_v_i);
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_InPlaceXor(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_tk, __pyx_t_6, __pyx_t_4) < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "Aeskeys.pyx":123
 * 
 *             if KC != 8:
 *                 for i in xrange(1, KC):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Aeskeys.pyx":122
 *             rconpointer += 1
 * 
 *             if KC != 8:             # <<<<<<<<<<<<<<
 *                 for i in xrange(1, KC):
 *                     tk[i] ^= tk[i - 1]
 */
      goto __pyx_L17;
    }

    /* "Aeskeys.pyx":128
 *             # Key expansion for 256-bit keys is "slightly different" (fips-197)
 *             else:
 *                 for i in xrange(1, KC // 2):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 *                 tt = tk[KC // 2 - 1]
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_xrange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_KC, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_int_1, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_int_1, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_int_1);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 128, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 128, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_9(__pyx_t_6);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 128, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "Aeskeys.pyx":129
 *             else:
 *                 for i in xrange(1, KC // 2):
 *                     tk[i] ^= tk[i - 1]             # <<<<<<<<<<<<<<
 *                 tt = tk[KC // 2 - 1]
 * 
 */
        __Pyx_INCREF(__pyx_v_i);
        __pyx_t_5 = __pyx_v_i;
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_InPlaceXor(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_tk, __pyx_t_5, __pyx_t_4) < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "Aeskeys.pyx":128
 *             # Key expansion for 256-bit keys is "slightly different" (fips-197)
 *             else:
 *                 for i in xrange(1, KC // 2):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 *                 tt = tk[KC // 2 - 1]
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "Aeskeys.pyx":130
 *                 for i in xrange(1, KC // 2):
 *                     tk[i] ^= tk[i - 1]
 *                 tt = tk[KC // 2 - 1]             # <<<<<<<<<<<<<<
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^
 */
      __pyx_t_6 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_KC, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_tt, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "Aeskeys.pyx":132
 *                 tt = tk[KC // 2 - 1]
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 */
      __pyx_t_6 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_KC, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_v_tt, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "Aeskeys.pyx":133
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyInt_AndObjC(__pyx_t_4, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_LshiftObjC(__pyx_t_4, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "Aeskeys.pyx":132
 *                 tt = tk[KC // 2 - 1]
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 */
      __pyx_t_4 = PyNumber_Xor(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":134
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = __Pyx_PyInt_LshiftObjC(__pyx_t_7, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":133
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "Aeskeys.pyx":135
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 *                                (self.S[(tt >> 24) & 0xFF] << 24))             # <<<<<<<<<<<<<<
 * 
 *                 for i in xrange(KC // 2 + 1, KC):
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyInt_AndObjC(__pyx_t_4, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_LshiftObjC(__pyx_t_4, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "Aeskeys.pyx":134
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 * 
 */
      __pyx_t_4 = PyNumber_Xor(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":132
 *                 tt = tk[KC // 2 - 1]
 * 
 *                 tk[KC // 2] ^= (self.S[ tt        & 0xFF]        ^             # <<<<<<<<<<<<<<
 *                                (self.S[(tt >>  8) & 0xFF] <<  8) ^
 *                                (self.S[(tt >> 16) & 0xFF] << 16) ^
 */
      __pyx_t_8 = PyNumber_InPlaceXor(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_tk, __pyx_t_6, __pyx_t_8) < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "Aeskeys.pyx":137
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 * 
 *                 for i in xrange(KC // 2 + 1, KC):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_xrange); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_KC, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_v_KC};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_5, __pyx_v_KC};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_t_5);
        __Pyx_INCREF(__pyx_v_KC);
        __Pyx_GIVEREF(__pyx_v_KC);
        PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, __pyx_v_KC);
        __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8); __pyx_t_1 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 137, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_9(__pyx_t_8);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 137, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "Aeskeys.pyx":138
 * 
 *                 for i in xrange(KC // 2 + 1, KC):
 *                     tk[i] ^= tk[i - 1]             # <<<<<<<<<<<<<<
 * 
 *             # Copy values into round key arrays
 */
        __Pyx_INCREF(__pyx_v_i);
        __pyx_t_6 = __pyx_v_i;
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_InPlaceXor(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_tk, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "Aeskeys.pyx":137
 *                                (self.S[(tt >> 24) & 0xFF] << 24))
 * 
 *                 for i in xrange(KC // 2 + 1, KC):             # <<<<<<<<<<<<<<
 *                     tk[i] ^= tk[i - 1]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L17:;

    /* "Aeskeys.pyx":141
 * 
 *             # Copy values into round key arrays
 *             j = 0             # <<<<<<<<<<<<<<
 *             while j < KC and t < round_key_count:
 *                 self._Ke[t // 4][t % 4] = tk[j]
 */
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_int_0);

    /* "Aeskeys.pyx":142
 *             # Copy values into round key arrays
 *             j = 0
 *             while j < KC and t < round_key_count:             # <<<<<<<<<<<<<<
 *                 self._Ke[t // 4][t % 4] = tk[j]
 *                 self._Kd[rounds - (t // 4)][t % 4] = tk[j]
 */
    while (1) {
      __pyx_t_8 = PyObject_RichCompare(__pyx_v_j, __pyx_v_KC, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 142, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_2) {
      } else {
        __pyx_t_3 = __pyx_t_2;
        goto __pyx_L26_bool_binop_done;
      }
      __pyx_t_8 = PyObject_RichCompare(__pyx_v_t, __pyx_v_round_key_count, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 142, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 142, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_3 = __pyx_t_2;
      __pyx_L26_bool_binop_done:;
      if (!__pyx_t_3) break;

      /* "Aeskeys.pyx":143
 *             j = 0
 *             while j < KC and t < round_key_count:
 *                 self._Ke[t // 4][t % 4] = tk[j]             # <<<<<<<<<<<<<<
 *                 self._Kd[rounds - (t // 4)][t % 4] = tk[j]
 *                 j += 1
 */
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_t, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyInt_RemainderObjC(__pyx_v_t, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_t_5, __pyx_t_8) < 0)) __PYX_ERR(0, 143, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":144
 *             while j < KC and t < round_key_count:
 *                 self._Ke[t // 4][t % 4] = tk[j]
 *                 self._Kd[rounds - (t // 4)][t % 4] = tk[j]             # <<<<<<<<<<<<<<
 *                 j += 1
 *                 t += 1
 */
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_tk, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_FloorDivideObjC(__pyx_v_t, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyNumber_Subtract(__pyx_v_rounds, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyInt_RemainderObjC(__pyx_v_t, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_t_6, __pyx_t_8) < 0)) __PYX_ERR(0, 144, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":145
 *                 self._Ke[t // 4][t % 4] = tk[j]
 *                 self._Kd[rounds - (t // 4)][t % 4] = tk[j]
 *                 j += 1             # <<<<<<<<<<<<<<
 *                 t += 1
 * 
 */
      __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_j, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_j, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "Aeskeys.pyx":146
 *                 self._Kd[rounds - (t // 4)][t % 4] = tk[j]
 *                 j += 1
 *                 t += 1             # <<<<<<<<<<<<<<
 * 
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 */
      __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_t, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_8);
      __pyx_t_8 = 0;
    }
  }

  /* "Aeskeys.pyx":149
 * 
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_xrange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_1, __pyx_v_rounds};
    __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_int_1, __pyx_v_rounds};
    __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_8);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_int_1);
    __Pyx_INCREF(__pyx_v_rounds);
    __Pyx_GIVEREF(__pyx_v_rounds);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_v_rounds);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_8); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_8); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 149, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "Aeskeys.pyx":150
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 *         for r in xrange(1, rounds):
 *             for j in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_xrange); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_8 = __pyx_t_5; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 150, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_5); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_14(__pyx_t_8);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 150, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "Aeskeys.pyx":151
 *         for r in xrange(1, rounds):
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]             # <<<<<<<<<<<<<<
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tt, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "Aeskeys.pyx":152
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_4, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":153
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 *                                   self.U2[(tt >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 *                                   self.U4[ tt        & 0xFF])
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "Aeskeys.pyx":152
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 */
      __pyx_t_12 = PyNumber_Xor(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Aeskeys.pyx":154
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U4[ tt        & 0xFF])
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_4, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":153
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 *                                   self.U2[(tt >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 *                                   self.U4[ tt        & 0xFF])
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "Aeskeys.pyx":155
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 *                                   self.U4[ tt        & 0xFF])             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_U4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyInt_AndObjC(__pyx_v_tt, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "Aeskeys.pyx":154
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U4[ tt        & 0xFF])
 * 
 */
      __pyx_t_12 = PyNumber_Xor(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "Aeskeys.pyx":152
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                                   self.U2[(tt >> 16) & 0xFF] ^
 *                                   self.U3[(tt >>  8) & 0xFF] ^
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(PyObject_SetItem(__pyx_t_7, __pyx_v_j, __pyx_t_12) < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "Aeskeys.pyx":150
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 *         for r in xrange(1, rounds):
 *             for j in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "Aeskeys.pyx":149
 * 
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for j in xrange(0, 4):
 *                 tt = self._Kd[r][j]
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":85
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 * 
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         if len(key) not in (16, 24, 32):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("Aeskeys.AES.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rounds);
  __Pyx_XDECREF(__pyx_v_round_key_count);
  __Pyx_XDECREF(__pyx_v_KC);
  __Pyx_XDECREF(__pyx_v_tk);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_rconpointer);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_tt);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":157
 *                                   self.U4[ tt        & 0xFF])
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 * 
 *         if len(plaintext) != 16:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_3AES_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_3AES_3encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_3AES_3encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_3AES_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_3AES_2encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_3AES_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  Py_ssize_t __pyx_v_rounds;
  PyObject *__pyx_v_s1 = NULL;
  PyObject *__pyx_v_s2 = NULL;
  PyObject *__pyx_v_s3 = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_tt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);

  /* "Aeskeys.pyx":159
 *     def encrypt(self, plaintext):
 * 
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('wrong block length ><')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":160
 * 
 *         if len(plaintext) != 16:
 *             raise ValueError('wrong block length ><')             # <<<<<<<<<<<<<<
 * 
 *         rounds = len(self._Ke) - 1
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 160, __pyx_L1_error)

    /* "Aeskeys.pyx":159
 *     def encrypt(self, plaintext):
 * 
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('wrong block length ><')
 * 
 */
  }

  /* "Aeskeys.pyx":162
 *             raise ValueError('wrong block length ><')
 * 
 *         rounds = len(self._Ke) - 1             # <<<<<<<<<<<<<<
 *         (s1, s2, s3) = [1, 2, 3]
 *         a = [0, 0, 0, 0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rounds = (__pyx_t_1 - 1);

  /* "Aeskeys.pyx":163
 * 
 *         rounds = len(self._Ke) - 1
 *         (s1, s2, s3) = [1, 2, 3]             # <<<<<<<<<<<<<<
 *         a = [0, 0, 0, 0]
 * 
 */
  __pyx_t_3 = __pyx_int_1;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_int_2;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __pyx_int_3;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_s1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_s2 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_s3 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":164
 *         rounds = len(self._Ke) - 1
 *         (s1, s2, s3) = [1, 2, 3]
 *         a = [0, 0, 0, 0]             # <<<<<<<<<<<<<<
 * 
 *         # Convert plaintext to (ints ^ key)
 */
  __pyx_t_5 = PyList_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 3, __pyx_int_0);
  __pyx_v_a = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":167
 * 
 *         # Convert plaintext to (ints ^ key)
 *         t = [(_compact_word(plaintext[4 * i:4 * i + 4]) ^ self._Ke[0][i]) for i in xrange(0, 4)]             # <<<<<<<<<<<<<<
 * 
 *         # Apply round transforms ^^
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 167, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_compact_word); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Multiply(__pyx_int_4, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Multiply(__pyx_int_4, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_v_plaintext, 0, 0, &__pyx_t_8, &__pyx_t_10, NULL, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Xor(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_t = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":170
 * 
 *         # Apply round transforms ^^
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_rounds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_1, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_1, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 170, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 170, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":171
 *         # Apply round transforms ^^
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_xrange); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 171, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 171, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_13(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 171, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "Aeskeys.pyx":172
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_9, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "Aeskeys.pyx":173
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_10, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":172
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      __pyx_t_3 = PyNumber_Xor(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "Aeskeys.pyx":174
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Ke[r][i])
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = PyNumber_Add(__pyx_v_i, __pyx_v_s2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyInt_RemainderObjC(__pyx_t_7, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_RshiftObjC(__pyx_t_7, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_9, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":173
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "Aeskeys.pyx":175
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self._Ke[r][i])
 *             t = copy.copy(a)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_AndObjC(__pyx_t_3, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "Aeskeys.pyx":174
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Ke[r][i])
 */
      __pyx_t_10 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":176
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Ke[r][i])             # <<<<<<<<<<<<<<
 *             t = copy.copy(a)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":175
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self._Ke[r][i])
 *             t = copy.copy(a)
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":172
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T3[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      if (unlikely(PyObject_SetItem(__pyx_v_a, __pyx_v_i, __pyx_t_7) < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":171
 *         # Apply round transforms ^^
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T2[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":177
 *                         self.T4[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Ke[r][i])
 *             t = copy.copy(a)             # <<<<<<<<<<<<<<
 * 
 *         # The last round is special ^^
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_a) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_a);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":170
 * 
 *         # Apply round transforms ^^
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T1[(t[ i          ] >> 24) & 0xFF] ^
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":180
 * 
 *         # The last round is special ^^
 *         result = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(0, 4):
 *             tt = self._Ke[rounds][i]
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":181
 *         # The last round is special ^^
 *         result = [ ]
 *         for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *             tt = self._Ke[rounds][i]
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 181, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":182
 *         result = [ ]
 *         for i in xrange(0, 4):
 *             tt = self._Ke[rounds][i]             # <<<<<<<<<<<<<<
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.S[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Ke); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_rounds, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tt, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":183
 *         for i in xrange(0, 4):
 *             tt = self._Ke[rounds][i]
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.S[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.S[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":184
 *             tt = self._Ke[rounds][i]
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.S[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.S[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 *             result.append((self.S[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_v_i, __pyx_v_s1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_5, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_5, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Xor(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_3, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":185
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.S[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.S[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.S[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":186
 *             result.append((self.S[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.S[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 *             result.append((self.S[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_S); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_v_i, __pyx_v_s3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_5, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Xor(__pyx_t_5, __pyx_v_tt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":181
 *         # The last round is special ^^
 *         result = [ ]
 *         for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *             tt = self._Ke[rounds][i]
 *             result.append((self.S[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":188
 *             result.append((self.S[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 * 
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "Aeskeys.pyx":157
 *                                   self.U4[ tt        & 0xFF])
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 * 
 *         if len(plaintext) != 16:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("Aeskeys.AES.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_XDECREF(__pyx_v_s3);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_tt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":190
 *         return result
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 * 
 *         if len(ciphertext) != 16:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_3AES_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_3AES_5decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_3AES_5decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_3AES_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_3AES_4decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_3AES_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext) {
  Py_ssize_t __pyx_v_rounds;
  PyObject *__pyx_v_s1 = NULL;
  PyObject *__pyx_v_s2 = NULL;
  PyObject *__pyx_v_s3 = NULL;
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_tt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "Aeskeys.pyx":192
 *     def decrypt(self, ciphertext):
 * 
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('wrong block length ><')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 192, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":193
 * 
 *         if len(ciphertext) != 16:
 *             raise ValueError('wrong block length ><')             # <<<<<<<<<<<<<<
 * 
 *         rounds = len(self._Kd) - 1
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 193, __pyx_L1_error)

    /* "Aeskeys.pyx":192
 *     def decrypt(self, ciphertext):
 * 
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('wrong block length ><')
 * 
 */
  }

  /* "Aeskeys.pyx":195
 *             raise ValueError('wrong block length ><')
 * 
 *         rounds = len(self._Kd) - 1             # <<<<<<<<<<<<<<
 *         (s1, s2, s3) = [3, 2, 1]
 *         a = [0, 0, 0, 0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rounds = (__pyx_t_1 - 1);

  /* "Aeskeys.pyx":196
 * 
 *         rounds = len(self._Kd) - 1
 *         (s1, s2, s3) = [3, 2, 1]             # <<<<<<<<<<<<<<
 *         a = [0, 0, 0, 0]
 * 
 */
  __pyx_t_3 = __pyx_int_3;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = __pyx_int_2;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __pyx_int_1;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_s1 = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_s2 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_s3 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":197
 *         rounds = len(self._Kd) - 1
 *         (s1, s2, s3) = [3, 2, 1]
 *         a = [0, 0, 0, 0]             # <<<<<<<<<<<<<<
 * 
 *         # Convert ciphertext to (ints ^ key)
 */
  __pyx_t_5 = PyList_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 3, __pyx_int_0);
  __pyx_v_a = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":200
 * 
 *         # Convert ciphertext to (ints ^ key)
 *         t = [(_compact_word(ciphertext[4 * i:4 * i + 4]) ^ self._Kd[0][i]) for i in xrange(0, 4)]             # <<<<<<<<<<<<<<
 * 
 *         # Apply round transforms
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 200, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 200, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_compact_word); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Multiply(__pyx_int_4, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Multiply(__pyx_int_4, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_v_ciphertext, 0, 0, &__pyx_t_8, &__pyx_t_10, NULL, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Xor(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_t = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "Aeskeys.pyx":203
 * 
 *         # Apply round transforms
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_rounds); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_1, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_int_1, __pyx_t_9};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_11, __pyx_int_1);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_11, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 203, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 203, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 203, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":204
 *         # Apply round transforms
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_xrange); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 204, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 204, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_13(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 204, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "Aeskeys.pyx":205
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_9, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "Aeskeys.pyx":206
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_10, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":205
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      __pyx_t_3 = PyNumber_Xor(__pyx_t_7, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "Aeskeys.pyx":207
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Kd[r][i])
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = PyNumber_Add(__pyx_v_i, __pyx_v_s2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyInt_RemainderObjC(__pyx_t_7, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_RshiftObjC(__pyx_t_7, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_9, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":206
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "Aeskeys.pyx":208
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self._Kd[r][i])
 *             t = copy.copy(a)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_T8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_AndObjC(__pyx_t_3, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "Aeskeys.pyx":207
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Kd[r][i])
 */
      __pyx_t_10 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":209
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Kd[r][i])             # <<<<<<<<<<<<<<
 *             t = copy.copy(a)
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_r); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":208
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self._Kd[r][i])
 *             t = copy.copy(a)
 */
      __pyx_t_7 = PyNumber_Xor(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "Aeskeys.pyx":205
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^             # <<<<<<<<<<<<<<
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 *                         self.T7[(t[(i + s2) % 4] >>  8) & 0xFF] ^
 */
      if (unlikely(PyObject_SetItem(__pyx_v_a, __pyx_v_i, __pyx_t_7) < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "Aeskeys.pyx":204
 *         # Apply round transforms
 *         for r in xrange(1, rounds):
 *             for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 *                         self.T6[(t[(i + s1) % 4] >> 16) & 0xFF] ^
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":210
 *                         self.T8[ t[(i + s3) % 4]        & 0xFF] ^
 *                         self._Kd[r][i])
 *             t = copy.copy(a)             # <<<<<<<<<<<<<<
 * 
 *         # The last round is special
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_a) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_a);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_t, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":203
 * 
 *         # Apply round transforms
 *         for r in xrange(1, rounds):             # <<<<<<<<<<<<<<
 *             for i in xrange(0, 4):
 *                 a[i] = (self.T5[(t[ i          ] >> 24) & 0xFF] ^
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":213
 * 
 *         # The last round is special
 *         result = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(0, 4):
 *             tt = self._Kd[rounds][i]
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":214
 *         # The last round is special
 *         result = [ ]
 *         for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *             tt = self._Kd[rounds][i]
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 214, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 214, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":215
 *         result = [ ]
 *         for i in xrange(0, 4):
 *             tt = self._Kd[rounds][i]             # <<<<<<<<<<<<<<
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.Si[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Kd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_rounds, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tt, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "Aeskeys.pyx":216
 *         for i in xrange(0, 4):
 *             tt = self._Kd[rounds][i]
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.Si[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.Si[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Si); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_24, 24, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":217
 *             tt = self._Kd[rounds][i]
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.Si[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.Si[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 *             result.append((self.Si[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Si); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_v_i, __pyx_v_s1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_5, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_5, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_16, 16, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Xor(__pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_3, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":218
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 *             result.append((self.Si[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.Si[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)             # <<<<<<<<<<<<<<
 *             result.append((self.Si[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Si); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Add(__pyx_v_i, __pyx_v_s2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_RshiftObjC(__pyx_t_3, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_RshiftObjC(__pyx_v_tt, __pyx_int_8, 8, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Xor(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":219
 *             result.append((self.Si[(t[(i + s1) % 4] >> 16) & 0xFF] ^ (tt >> 16)) & 0xFF)
 *             result.append((self.Si[(t[(i + s2) % 4] >>  8) & 0xFF] ^ (tt >>  8)) & 0xFF)
 *             result.append((self.Si[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Si); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_v_i, __pyx_v_s3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_RemainderObjC(__pyx_t_5, __pyx_int_4, 4, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_t, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyInt_AndObjC(__pyx_t_5, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Xor(__pyx_t_5, __pyx_v_tt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AndObjC(__pyx_t_7, __pyx_int_255, 0xFF, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_5); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "Aeskeys.pyx":214
 *         # The last round is special
 *         result = [ ]
 *         for i in xrange(0, 4):             # <<<<<<<<<<<<<<
 *             tt = self._Kd[rounds][i]
 *             result.append((self.Si[(t[ i           ] >> 24) & 0xFF] ^ (tt >> 24)) & 0xFF)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":221
 *             result.append((self.Si[ t[(i + s3) % 4]        & 0xFF] ^  tt       ) & 0xFF)
 * 
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "Aeskeys.pyx":190
 *         return result
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 * 
 *         if len(ciphertext) != 16:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("Aeskeys.AES.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_s2);
  __Pyx_XDECREF(__pyx_v_s3);
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_tt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":231
 *         self._counter = [ ((initial_value >> i) % 256) for i in xrange(128 - 8, -1, -8) ]
 * 
 *     value = property(lambda s: s._counter)             # <<<<<<<<<<<<<<
 * 
 *     def increment(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7Counter_4lambda3(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7Counter_4lambda3 = {"lambda3", (PyCFunction)__pyx_pw_7Aeskeys_7Counter_4lambda3, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_7Counter_4lambda3(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_7Aeskeys_7Counter_lambda3(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7Aeskeys_7Counter_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys.Counter.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":226
 * class Counter(object):
 * 
 *     def __init__(self, initial_value = 1):             # <<<<<<<<<<<<<<
 * 
 *         # Convert the value into an array of bytes long ~
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7Counter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7Counter_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7Counter_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7Counter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_initial_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_initial_value,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)__pyx_int_1));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_value);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 226, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_initial_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.Counter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7Counter___init__(__pyx_self, __pyx_v_self, __pyx_v_initial_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7Counter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_initial_value) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":229
 * 
 *         # Convert the value into an array of bytes long ~
 *         self._counter = [ ((initial_value >> i) % 256) for i in xrange(128 - 8, -1, -8) ]             # <<<<<<<<<<<<<<
 * 
 *     value = property(lambda s: s._counter)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_xrange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 229, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Rshift(__pyx_v_initial_value, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_RemainderObjC(__pyx_t_3, __pyx_int_256, 0x100, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_counter, __pyx_t_1) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":226
 * class Counter(object):
 * 
 *     def __init__(self, initial_value = 1):             # <<<<<<<<<<<<<<
 * 
 *         # Convert the value into an array of bytes long ~
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("Aeskeys.Counter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":233
 *     value = property(lambda s: s._counter)
 * 
 *     def increment(self):             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7Counter_3increment(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7Counter_3increment = {"increment", (PyCFunction)__pyx_pw_7Aeskeys_7Counter_3increment, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_7Counter_3increment(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("increment (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_7Counter_2increment(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7Counter_2increment(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("increment", 0);

  /* "Aeskeys.pyx":235
 *     def increment(self):
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             self._counter[i] += 1
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_xrange); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_t_4 - 1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_3, __pyx_int_neg_1, __pyx_int_neg_1};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_3, __pyx_int_neg_1, __pyx_int_neg_1};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_neg_1);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_int_neg_1);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 235, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 235, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":236
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):
 *             self._counter[i] += 1             # <<<<<<<<<<<<<<
 * 
 *             if self._counter[i] < 256: break
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_i);
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_5) < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Aeskeys.pyx":238
 *             self._counter[i] += 1
 * 
 *             if self._counter[i] < 256: break             # <<<<<<<<<<<<<<
 * 
 *             # Carry the one ^^
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_int_256, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_9) {
      goto __pyx_L4_break;
    }

    /* "Aeskeys.pyx":241
 * 
 *             # Carry the one ^^
 *             self._counter[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         # Overflow ~
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_i, __pyx_int_0) < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Aeskeys.pyx":235
 *     def increment(self):
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             self._counter[i] += 1
 * 
 */
  }
  /*else*/ {

    /* "Aeskeys.pyx":245
 *         # Overflow ~
 *         else:
 *             self._counter = [ 0 ] * len(self._counter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(1 * ((__pyx_t_10<0) ? 0:__pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_10; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_int_0);
      }
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_counter, __pyx_t_1) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "Aeskeys.pyx":235
 *     def increment(self):
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             self._counter[i] += 1
 * 
 */
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Aeskeys.pyx":233
 *     value = property(lambda s: s._counter)
 * 
 *     def increment(self):             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys.Counter.increment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":249
 * 
 * class AESBlockModeOfOperation(object):
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 *         self._aes = AES(key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_23AESBlockModeOfOperation___init__(__pyx_self, __pyx_v_self, __pyx_v_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":250
 * class AESBlockModeOfOperation(object):
 *     def __init__(self, key):
 *         self._aes = AES(key)             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_AES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_key) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_key);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_aes, __pyx_t_1) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":249
 * 
 * class AESBlockModeOfOperation(object):
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 *         self._aes = AES(key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":252
 *         self._aes = AES(key)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_3decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_3decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_3decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_3decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_23AESBlockModeOfOperation_2decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation_2decrypt(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_ciphertext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "Aeskeys.pyx":253
 * 
 *     def decrypt(self, ciphertext):
 *         raise Exception('not implemented ~')             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 253, __pyx_L1_error)

  /* "Aeskeys.pyx":252
 *         self._aes = AES(key)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":255
 *         raise Exception('not implemented ~')
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_5encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_5encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_5encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_23AESBlockModeOfOperation_5encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 255, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_23AESBlockModeOfOperation_4encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_23AESBlockModeOfOperation_4encrypt(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);

  /* "Aeskeys.pyx":256
 * 
 *     def encrypt(self, plaintext):
 *         raise Exception('not implemented ~')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 256, __pyx_L1_error)

  /* "Aeskeys.pyx":255
 *         raise Exception('not implemented ~')
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys.AESBlockModeOfOperation.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":269
 * class AES_ECB(AESBlockModeOfOperation):
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_ECB_1encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_ECB_1encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_ECB_1encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_ECB_1encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 269, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_ECB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_ECB_encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_ECB_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);
  __Pyx_INCREF(__pyx_v_plaintext);

  /* "Aeskeys.pyx":270
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":271
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))             # <<<<<<<<<<<<<<
 * 
 *         plaintext = _string_to_bytes(plaintext)
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 271, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_plaintext_block_must_be_16_bytes, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 271, __pyx_L1_error)

    /* "Aeskeys.pyx":270
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 */
  }

  /* "Aeskeys.pyx":273
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 *         plaintext = _string_to_bytes(plaintext)             # <<<<<<<<<<<<<<
 *         return _bytes_to_string(self._aes.encrypt(plaintext))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_plaintext, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":274
 * 
 *         plaintext = _string_to_bytes(plaintext)
 *         return _bytes_to_string(self._aes.encrypt(plaintext))             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":269
 * class AES_ECB(AESBlockModeOfOperation):
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys.AES_ECB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_plaintext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":276
 *         return _bytes_to_string(self._aes.encrypt(plaintext))
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_ECB_3decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_ECB_3decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_ECB_3decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_ECB_3decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 276, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 276, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_ECB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_ECB_2decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_ECB_2decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);
  __Pyx_INCREF(__pyx_v_ciphertext);

  /* "Aeskeys.pyx":277
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":278
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))             # <<<<<<<<<<<<<<
 * 
 *         ciphertext = _string_to_bytes(ciphertext)
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 278, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_ciphertext_block_must_be_16_byte, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 278, __pyx_L1_error)

    /* "Aeskeys.pyx":277
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 */
  }

  /* "Aeskeys.pyx":280
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 *         ciphertext = _string_to_bytes(ciphertext)             # <<<<<<<<<<<<<<
 *         return _bytes_to_string(self._aes.decrypt(ciphertext))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_ciphertext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ciphertext);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ciphertext, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":281
 * 
 *         ciphertext = _string_to_bytes(ciphertext)
 *         return _bytes_to_string(self._aes.decrypt(ciphertext))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_ciphertext) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_ciphertext);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":276
 *         return _bytes_to_string(self._aes.encrypt(plaintext))
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys.AES_ECB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ciphertext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":287
 * class AES_CBC(AESBlockModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CBC_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CBC_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_iv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_iv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 287, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 287, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_iv = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 287, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CBC.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CBC___init__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_iv);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CBC___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":288
 * 
 *     def __init__(self, key, iv = None):
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
  __pyx_t_1 = (__pyx_v_iv == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "Aeskeys.pyx":289
 *     def __init__(self, key, iv = None):
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16             # <<<<<<<<<<<<<<
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')
 */
    __pyx_t_3 = PyList_New(1 * 16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 16; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_int_0);
      }
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock, __pyx_t_3) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":288
 * 
 *     def __init__(self, key, iv = None):
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
    goto __pyx_L3;
  }

  /* "Aeskeys.pyx":290
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_iv); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_4 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":291
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')             # <<<<<<<<<<<<<<
 *         else:
 *             self._last_cipherblock = _string_to_bytes(iv)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 291, __pyx_L1_error)

    /* "Aeskeys.pyx":290
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  }

  /* "Aeskeys.pyx":293
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 *             self._last_cipherblock = _string_to_bytes(iv)             # <<<<<<<<<<<<<<
 * 
 *         AESBlockModeOfOperation.__init__(self, key)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_iv) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_iv);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock, __pyx_t_3) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "Aeskeys.pyx":295
 *             self._last_cipherblock = _string_to_bytes(iv)
 * 
 *         AESBlockModeOfOperation.__init__(self, key)             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_init); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_key);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Aeskeys.pyx":287
 * class AES_CBC(AESBlockModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("Aeskeys.AES_CBC.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":297
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CBC_3encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CBC_3encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 297, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 297, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 297, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CBC.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CBC_2encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CBC_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_v_precipherblock = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);
  __Pyx_INCREF(__pyx_v_plaintext);

  /* "Aeskeys.pyx":298
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":299
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))             # <<<<<<<<<<<<<<
 * 
 *         plaintext = _string_to_bytes(plaintext)
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 299, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_plaintext_block_must_be_16_bytes, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 299, __pyx_L1_error)

    /* "Aeskeys.pyx":298
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 */
  }

  /* "Aeskeys.pyx":301
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 * 
 *         plaintext = _string_to_bytes(plaintext)             # <<<<<<<<<<<<<<
 *         precipherblock = [ (p ^ l) for (p, l) in zip(plaintext, self._last_cipherblock) ]
 *         self._last_cipherblock = self._aes.encrypt(precipherblock)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_plaintext, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":302
 * 
 *         plaintext = _string_to_bytes(plaintext)
 *         precipherblock = [ (p ^ l) for (p, l) in zip(plaintext, self._last_cipherblock) ]             # <<<<<<<<<<<<<<
 *         self._last_cipherblock = self._aes.encrypt(precipherblock)
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_plaintext);
  __Pyx_GIVEREF(__pyx_v_plaintext);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_plaintext);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 302, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_6(__pyx_t_5);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 302, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 302, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 302, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_4 = PyNumber_Xor(__pyx_v_p, __pyx_v_l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_precipherblock = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":303
 *         plaintext = _string_to_bytes(plaintext)
 *         precipherblock = [ (p ^ l) for (p, l) in zip(plaintext, self._last_cipherblock) ]
 *         self._last_cipherblock = self._aes.encrypt(precipherblock)             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(self._last_cipherblock)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_precipherblock) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_precipherblock);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock, __pyx_t_3) < 0) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Aeskeys.pyx":305
 *         self._last_cipherblock = self._aes.encrypt(precipherblock)
 * 
 *         return _bytes_to_string(self._last_cipherblock)             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_8, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":297
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("Aeskeys.AES_CBC.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_precipherblock);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XDECREF(__pyx_v_plaintext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":307
 *         return _bytes_to_string(self._last_cipherblock)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CBC_5decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CBC_5decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CBC_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CBC.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CBC_4decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CBC_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext) {
  PyObject *__pyx_v_cipherblock = NULL;
  PyObject *__pyx_v_plaintext = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "Aeskeys.pyx":308
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":309
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))             # <<<<<<<<<<<<<<
 * 
 *         cipherblock = _string_to_bytes(ciphertext)
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 309, __pyx_L1_error)
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_ciphertext_block_must_be_16_byte, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 309, __pyx_L1_error)

    /* "Aeskeys.pyx":308
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 */
  }

  /* "Aeskeys.pyx":311
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 * 
 *         cipherblock = _string_to_bytes(ciphertext)             # <<<<<<<<<<<<<<
 *         plaintext = [ (p ^ l) for (p, l) in zip(self._aes.decrypt(cipherblock), self._last_cipherblock) ]
 *         self._last_cipherblock = cipherblock
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_ciphertext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ciphertext);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_cipherblock = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":312
 * 
 *         cipherblock = _string_to_bytes(ciphertext)
 *         plaintext = [ (p ^ l) for (p, l) in zip(self._aes.decrypt(cipherblock), self._last_cipherblock) ]             # <<<<<<<<<<<<<<
 *         self._last_cipherblock = cipherblock
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_cipherblock) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_cipherblock);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 312, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 312, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 312, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 312, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_4 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 312, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_l, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_6 = PyNumber_Xor(__pyx_v_p, __pyx_v_l); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_plaintext = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":313
 *         cipherblock = _string_to_bytes(ciphertext)
 *         plaintext = [ (p ^ l) for (p, l) in zip(self._aes.decrypt(cipherblock), self._last_cipherblock) ]
 *         self._last_cipherblock = cipherblock             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(plaintext)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_cipherblock, __pyx_v_cipherblock) < 0) __PYX_ERR(0, 313, __pyx_L1_error)

  /* "Aeskeys.pyx":315
 *         self._last_cipherblock = cipherblock
 * 
 *         return _bytes_to_string(plaintext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":307
 *         return _bytes_to_string(self._last_cipherblock)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("Aeskeys.AES_CBC.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cipherblock);
  __Pyx_XDECREF(__pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":335
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     segment_bytes = property(lambda s: s._segment_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_6lambda4(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CFB_6lambda4 = {"lambda4", (PyCFunction)__pyx_pw_7Aeskeys_7AES_CFB_6lambda4, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_6lambda4(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda4 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_7Aeskeys_7AES_CFB_lambda4(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7Aeskeys_7AES_CFB_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys.AES_CFB.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":321
 * class AES_CFB(AESSegmentModeOfOperation):
 * 
 *     def __init__(self, key, iv, segment_size = 1):             # <<<<<<<<<<<<<<
 *         if segment_size == 0: segment_size = 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CFB_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CFB_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_iv = 0;
  PyObject *__pyx_v_segment_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_iv,&__pyx_n_s_segment_size,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)((PyObject *)__pyx_int_1));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 321, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_segment_size);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 321, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_iv = values[2];
    __pyx_v_segment_size = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 321, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CFB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CFB___init__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_iv, __pyx_v_segment_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CFB___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv, PyObject *__pyx_v_segment_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_segment_size);

  /* "Aeskeys.pyx":322
 * 
 *     def __init__(self, key, iv, segment_size = 1):
 *         if segment_size == 0: segment_size = 1             # <<<<<<<<<<<<<<
 * 
 *         if iv is None:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_segment_size, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_DECREF_SET(__pyx_v_segment_size, __pyx_int_1);
  }

  /* "Aeskeys.pyx":324
 *         if segment_size == 0: segment_size = 1
 * 
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._shift_register = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
  __pyx_t_2 = (__pyx_v_iv == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":325
 * 
 *         if iv is None:
 *             self._shift_register = [ 0 ] * 16             # <<<<<<<<<<<<<<
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')
 */
    __pyx_t_1 = PyList_New(1 * 16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 16; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_int_0);
      }
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_shift_register, __pyx_t_1) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Aeskeys.pyx":324
 *         if segment_size == 0: segment_size = 1
 * 
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._shift_register = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
    goto __pyx_L4;
  }

  /* "Aeskeys.pyx":326
 *         if iv is None:
 *             self._shift_register = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_iv); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 326, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_4 != 16) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "Aeskeys.pyx":327
 *             self._shift_register = [ 0 ] * 16
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')             # <<<<<<<<<<<<<<
 *         else:
 *           self._shift_register = _string_to_bytes(iv)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 327, __pyx_L1_error)

    /* "Aeskeys.pyx":326
 *         if iv is None:
 *             self._shift_register = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  }

  /* "Aeskeys.pyx":329
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 *           self._shift_register = _string_to_bytes(iv)             # <<<<<<<<<<<<<<
 * 
 *         self._segment_bytes = segment_size
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_iv) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_iv);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_shift_register, __pyx_t_1) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "Aeskeys.pyx":331
 *           self._shift_register = _string_to_bytes(iv)
 * 
 *         self._segment_bytes = segment_size             # <<<<<<<<<<<<<<
 * 
 *         AESBlockModeOfOperation.__init__(self, key)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes, __pyx_v_segment_size) < 0) __PYX_ERR(0, 331, __pyx_L1_error)

  /* "Aeskeys.pyx":333
 *         self._segment_bytes = segment_size
 * 
 *         AESBlockModeOfOperation.__init__(self, key)             # <<<<<<<<<<<<<<
 * 
 *     segment_bytes = property(lambda s: s._segment_bytes)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_init); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":321
 * class AES_CFB(AESSegmentModeOfOperation):
 * 
 *     def __init__(self, key, iv, segment_size = 1):             # <<<<<<<<<<<<<<
 *         if segment_size == 0: segment_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("Aeskeys.AES_CFB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_segment_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":337
 *     segment_bytes = property(lambda s: s._segment_bytes)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CFB_3encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CFB_3encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 337, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 337, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 337, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CFB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CFB_2encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CFB_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_v_encrypted = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_plaintext_segment = NULL;
  PyObject *__pyx_v_xor_segment = NULL;
  PyObject *__pyx_v_cipher_segment = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);
  __Pyx_INCREF(__pyx_v_plaintext);

  /* "Aeskeys.pyx":338
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) % self._segment_bytes != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Remainder(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "Aeskeys.pyx":339
 *     def encrypt(self, plaintext):
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')             # <<<<<<<<<<<<<<
 * 
 *         plaintext = _string_to_bytes(plaintext)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 339, __pyx_L1_error)

    /* "Aeskeys.pyx":338
 * 
 *     def encrypt(self, plaintext):
 *         if len(plaintext) % self._segment_bytes != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 * 
 */
  }

  /* "Aeskeys.pyx":341
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 * 
 *         plaintext = _string_to_bytes(plaintext)             # <<<<<<<<<<<<<<
 * 
 *         # Break block into segments
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_plaintext, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":344
 * 
 *         # Break block into segments
 *         encrypted = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(0, len(plaintext), self._segment_bytes):
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_encrypted = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":345
 *         # Break block into segments
 *         encrypted = [ ]
 *         for i in xrange(0, len(plaintext), self._segment_bytes):             # <<<<<<<<<<<<<<
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(plaintext_segment)]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 345, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_int_0, __pyx_t_2, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_int_0, __pyx_t_2, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_10(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 345, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "Aeskeys.pyx":346
 *         encrypted = [ ]
 *         for i in xrange(0, len(plaintext), self._segment_bytes):
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]             # <<<<<<<<<<<<<<
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(plaintext_segment)]
 *             cipher_segment = [ (p ^ x) for (p, x) in zip(plaintext_segment, xor_segment) ]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_v_i, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_plaintext, 0, 0, &__pyx_v_i, &__pyx_t_9, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_plaintext_segment, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "Aeskeys.pyx":347
 *         for i in xrange(0, len(plaintext), self._segment_bytes):
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(plaintext_segment)]             # <<<<<<<<<<<<<<
 *             cipher_segment = [ (p ^ x) for (p, x) in zip(plaintext_segment, xor_segment) ]
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shift_register); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = PyObject_Length(__pyx_v_plaintext_segment); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 347, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, __pyx_t_11, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xor_segment, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "Aeskeys.pyx":348
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(plaintext_segment)]
 *             cipher_segment = [ (p ^ x) for (p, x) in zip(plaintext_segment, xor_segment) ]             # <<<<<<<<<<<<<<
 * 
 *             # Shift the top bits out and the ciphertext in
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_plaintext_segment);
    __Pyx_GIVEREF(__pyx_v_plaintext_segment);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_plaintext_segment);
    __Pyx_INCREF(__pyx_v_xor_segment);
    __Pyx_GIVEREF(__pyx_v_xor_segment);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_xor_segment);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_3 = __pyx_t_9; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 348, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_12(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 348, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 348, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_13 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 348, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_13)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_7 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 2) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 348, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_9 = PyNumber_Xor(__pyx_v_p, __pyx_v_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cipher_segment, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "Aeskeys.pyx":351
 * 
 *             # Shift the top bits out and the ciphertext in
 *             self._shift_register = _concat_list(self._shift_register[len(cipher_segment):], cipher_segment)             # <<<<<<<<<<<<<<
 * 
 *             encrypted.extend(cipher_segment)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_concat_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shift_register); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = PyList_GET_SIZE(__pyx_v_cipher_segment); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 351, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_9, __pyx_t_11, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_cipher_segment};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_cipher_segment};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_cipher_segment);
      __Pyx_GIVEREF(__pyx_v_cipher_segment);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_v_cipher_segment);
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_shift_register, __pyx_t_6) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":353
 *             self._shift_register = _concat_list(self._shift_register[len(cipher_segment):], cipher_segment)
 * 
 *             encrypted.extend(cipher_segment)             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(encrypted)
 */
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_encrypted, __pyx_v_cipher_segment); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 353, __pyx_L1_error)

    /* "Aeskeys.pyx":345
 *         # Break block into segments
 *         encrypted = [ ]
 *         for i in xrange(0, len(plaintext), self._segment_bytes):             # <<<<<<<<<<<<<<
 *             plaintext_segment = plaintext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(plaintext_segment)]
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":355
 *             encrypted.extend(cipher_segment)
 * 
 *         return _bytes_to_string(encrypted)             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_encrypted) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":337
 *     segment_bytes = property(lambda s: s._segment_bytes)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("Aeskeys.AES_CFB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_plaintext_segment);
  __Pyx_XDECREF(__pyx_v_xor_segment);
  __Pyx_XDECREF(__pyx_v_cipher_segment);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_plaintext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":357
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CFB_5decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CFB_5decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CFB_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 357, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 357, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CFB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CFB_4decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CFB_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext) {
  PyObject *__pyx_v_decrypted = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_cipher_segment = NULL;
  PyObject *__pyx_v_xor_segment = NULL;
  PyObject *__pyx_v_plaintext_segment = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);
  __Pyx_INCREF(__pyx_v_ciphertext);

  /* "Aeskeys.pyx":358
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) % self._segment_bytes != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Remainder(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "Aeskeys.pyx":359
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')             # <<<<<<<<<<<<<<
 * 
 *         ciphertext = _string_to_bytes(ciphertext)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 359, __pyx_L1_error)

    /* "Aeskeys.pyx":358
 * 
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) % self._segment_bytes != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 * 
 */
  }

  /* "Aeskeys.pyx":361
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 * 
 *         ciphertext = _string_to_bytes(ciphertext)             # <<<<<<<<<<<<<<
 * 
 *         # Break block into segments ~
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_ciphertext) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_ciphertext);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_ciphertext, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":364
 * 
 *         # Break block into segments ~
 *         decrypted = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(0, len(ciphertext), self._segment_bytes):
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_decrypted = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":365
 *         # Break block into segments ~
 *         decrypted = [ ]
 *         for i in xrange(0, len(ciphertext), self._segment_bytes):             # <<<<<<<<<<<<<<
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(cipher_segment)]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_xrange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_Length(__pyx_v_ciphertext); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 365, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_int_0, __pyx_t_2, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_int_0, __pyx_t_2, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_int_0);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;
    __pyx_t_10 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 365, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_10)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 365, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 365, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_10(__pyx_t_4);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 365, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "Aeskeys.pyx":366
 *         decrypted = [ ]
 *         for i in xrange(0, len(ciphertext), self._segment_bytes):
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]             # <<<<<<<<<<<<<<
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(cipher_segment)]
 *             plaintext_segment = [ (p ^ x) for (p, x) in zip(cipher_segment, xor_segment) ]
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyNumber_Add(__pyx_v_i, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_ciphertext, 0, 0, &__pyx_v_i, &__pyx_t_9, NULL, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cipher_segment, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "Aeskeys.pyx":367
 *         for i in xrange(0, len(ciphertext), self._segment_bytes):
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(cipher_segment)]             # <<<<<<<<<<<<<<
 *             plaintext_segment = [ (p ^ x) for (p, x) in zip(cipher_segment, xor_segment) ]
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shift_register); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = PyObject_Length(__pyx_v_cipher_segment); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 367, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_3, 0, __pyx_t_11, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_xor_segment, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "Aeskeys.pyx":368
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(cipher_segment)]
 *             plaintext_segment = [ (p ^ x) for (p, x) in zip(cipher_segment, xor_segment) ]             # <<<<<<<<<<<<<<
 * 
 *             # Shift the top bits out and the ciphertext in
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_cipher_segment);
    __Pyx_GIVEREF(__pyx_v_cipher_segment);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cipher_segment);
    __Pyx_INCREF(__pyx_v_xor_segment);
    __Pyx_GIVEREF(__pyx_v_xor_segment);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_xor_segment);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_3, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_3 = __pyx_t_9; __Pyx_INCREF(__pyx_t_3); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 368, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 368, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 368, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 368, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_12(__pyx_t_3);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 368, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 368, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_13 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = Py_TYPE(__pyx_t_13)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_7 = __pyx_t_14(__pyx_t_13); if (unlikely(!__pyx_t_7)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_14(__pyx_t_13), 2) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
        __pyx_t_14 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 368, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_9 = PyNumber_Xor(__pyx_v_p, __pyx_v_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_plaintext_segment, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "Aeskeys.pyx":371
 * 
 *             # Shift the top bits out and the ciphertext in
 *             self._shift_register = _concat_list(self._shift_register[len(cipher_segment):], cipher_segment)             # <<<<<<<<<<<<<<
 * 
 *             decrypted.extend(plaintext_segment)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_concat_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_shift_register); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = PyObject_Length(__pyx_v_cipher_segment); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 371, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_9, __pyx_t_11, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_cipher_segment};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_v_cipher_segment};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__pyx_t_9) {
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_t_7);
      __Pyx_INCREF(__pyx_v_cipher_segment);
      __Pyx_GIVEREF(__pyx_v_cipher_segment);
      PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, __pyx_v_cipher_segment);
      __pyx_t_7 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_shift_register, __pyx_t_6) < 0) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "Aeskeys.pyx":373
 *             self._shift_register = _concat_list(self._shift_register[len(cipher_segment):], cipher_segment)
 * 
 *             decrypted.extend(plaintext_segment)             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(decrypted)
 */
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_decrypted, __pyx_v_plaintext_segment); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 373, __pyx_L1_error)

    /* "Aeskeys.pyx":365
 *         # Break block into segments ~
 *         decrypted = [ ]
 *         for i in xrange(0, len(ciphertext), self._segment_bytes):             # <<<<<<<<<<<<<<
 *             cipher_segment = ciphertext[i: i + self._segment_bytes]
 *             xor_segment = self._aes.encrypt(self._shift_register)[:len(cipher_segment)]
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":375
 *             decrypted.extend(plaintext_segment)
 * 
 *         return _bytes_to_string(decrypted)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_decrypted) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_decrypted);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":357
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("Aeskeys.AES_CFB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_decrypted);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_cipher_segment);
  __Pyx_XDECREF(__pyx_v_xor_segment);
  __Pyx_XDECREF(__pyx_v_plaintext_segment);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_ciphertext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":381
 * class AES_OFB(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_OFB_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_OFB_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_iv = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_iv,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iv);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 381, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_iv = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_OFB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_OFB___init__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_iv);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_OFB___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_iv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":382
 * 
 *     def __init__(self, key, iv = None):
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._last_precipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
  __pyx_t_1 = (__pyx_v_iv == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "Aeskeys.pyx":383
 *     def __init__(self, key, iv = None):
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16             # <<<<<<<<<<<<<<
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')
 */
    __pyx_t_3 = PyList_New(1 * 16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < 16; __pyx_temp++) {
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_int_0);
      }
    }
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_precipherblock, __pyx_t_3) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "Aeskeys.pyx":382
 * 
 *     def __init__(self, key, iv = None):
 *         if iv is None:             # <<<<<<<<<<<<<<
 *             self._last_precipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 */
    goto __pyx_L3;
  }

  /* "Aeskeys.pyx":384
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_iv); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_4 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":385
 *             self._last_precipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')             # <<<<<<<<<<<<<<
 *         else:
 *           self._last_precipherblock = _string_to_bytes(iv)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 385, __pyx_L1_error)

    /* "Aeskeys.pyx":384
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:             # <<<<<<<<<<<<<<
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 */
  }

  /* "Aeskeys.pyx":387
 *             raise ValueError('initialization vector must be 16 bytes ><')
 *         else:
 *           self._last_precipherblock = _string_to_bytes(iv)             # <<<<<<<<<<<<<<
 * 
 *         self._remaining_block = [ ]
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_iv) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_iv);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_precipherblock, __pyx_t_3) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "Aeskeys.pyx":389
 *           self._last_precipherblock = _string_to_bytes(iv)
 * 
 *         self._remaining_block = [ ]             # <<<<<<<<<<<<<<
 * 
 *         AESBlockModeOfOperation.__init__(self, key)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_remaining_block, __pyx_t_3) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Aeskeys.pyx":391
 *         self._remaining_block = [ ]
 * 
 *         AESBlockModeOfOperation.__init__(self, key)             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_init); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_self, __pyx_v_key};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_key);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "Aeskeys.pyx":381
 * class AES_OFB(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("Aeskeys.AES_OFB.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":393
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_OFB_3encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_OFB_3encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 393, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 393, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 393, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_OFB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_OFB_2encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_OFB_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_v_encrypted = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_precipherbyte = NULL;
  PyObject *__pyx_v_cipherbyte = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);

  /* "Aeskeys.pyx":394
 * 
 *     def encrypt(self, plaintext):
 *         encrypted = [ ]             # <<<<<<<<<<<<<<
 *         for p in _string_to_bytes(plaintext):
 *             if len(self._remaining_block) == 0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_encrypted = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Aeskeys.pyx":395
 *     def encrypt(self, plaintext):
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):             # <<<<<<<<<<<<<<
 *             if len(self._remaining_block) == 0:
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 395, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 395, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 395, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":396
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 *             if len(self._remaining_block) == 0:             # <<<<<<<<<<<<<<
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 *                 self._last_precipherblock = [ ]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_block); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = ((__pyx_t_6 == 0) != 0);
    if (__pyx_t_7) {

      /* "Aeskeys.pyx":397
 *         for p in _string_to_bytes(plaintext):
 *             if len(self._remaining_block) == 0:
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)             # <<<<<<<<<<<<<<
 *                 self._last_precipherblock = [ ]
 *             precipherbyte = self._remaining_block.pop(0)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_last_precipherblock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_remaining_block, __pyx_t_1) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "Aeskeys.pyx":398
 *             if len(self._remaining_block) == 0:
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 *                 self._last_precipherblock = [ ]             # <<<<<<<<<<<<<<
 *             precipherbyte = self._remaining_block.pop(0)
 *             self._last_precipherblock.append(precipherbyte)
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_last_precipherblock, __pyx_t_1) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "Aeskeys.pyx":396
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 *             if len(self._remaining_block) == 0:             # <<<<<<<<<<<<<<
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 *                 self._last_precipherblock = [ ]
 */
    }

    /* "Aeskeys.pyx":399
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 *                 self._last_precipherblock = [ ]
 *             precipherbyte = self._remaining_block.pop(0)             # <<<<<<<<<<<<<<
 *             self._last_precipherblock.append(precipherbyte)
 *             cipherbyte = p ^ precipherbyte
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_block); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_PopIndex(__pyx_t_1, __pyx_int_0, 0, 1, Py_ssize_t, PyInt_FromSsize_t); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_precipherbyte, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "Aeskeys.pyx":400
 *                 self._last_precipherblock = [ ]
 *             precipherbyte = self._remaining_block.pop(0)
 *             self._last_precipherblock.append(precipherbyte)             # <<<<<<<<<<<<<<
 *             cipherbyte = p ^ precipherbyte
 *             encrypted.append(cipherbyte)
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_last_precipherblock); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_8, __pyx_v_precipherbyte); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "Aeskeys.pyx":401
 *             precipherbyte = self._remaining_block.pop(0)
 *             self._last_precipherblock.append(precipherbyte)
 *             cipherbyte = p ^ precipherbyte             # <<<<<<<<<<<<<<
 *             encrypted.append(cipherbyte)
 * 
 */
    __pyx_t_8 = PyNumber_Xor(__pyx_v_p, __pyx_v_precipherbyte); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_cipherbyte, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "Aeskeys.pyx":402
 *             self._last_precipherblock.append(precipherbyte)
 *             cipherbyte = p ^ precipherbyte
 *             encrypted.append(cipherbyte)             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(encrypted)
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_encrypted, __pyx_v_cipherbyte); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 402, __pyx_L1_error)

    /* "Aeskeys.pyx":395
 *     def encrypt(self, plaintext):
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):             # <<<<<<<<<<<<<<
 *             if len(self._remaining_block) == 0:
 *                 self._remaining_block = self._aes.encrypt(self._last_precipherblock)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Aeskeys.pyx":404
 *             encrypted.append(cipherbyte)
 * 
 *         return _bytes_to_string(encrypted)             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, ciphertext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_1, __pyx_v_encrypted) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":393
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("Aeskeys.AES_OFB.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_precipherbyte);
  __Pyx_XDECREF(__pyx_v_cipherbyte);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":406
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(ciphertext)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_OFB_5decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_OFB_5decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_OFB_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_ciphertext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_ciphertext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ciphertext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 406, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 406, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_ciphertext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 406, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_OFB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_OFB_4decrypt(__pyx_self, __pyx_v_self, __pyx_v_ciphertext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_OFB_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_ciphertext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "Aeskeys.pyx":407
 * 
 *     def decrypt(self, ciphertext):
 *         return self.encrypt(ciphertext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_ciphertext) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_ciphertext);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":406
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(ciphertext)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys.AES_OFB.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":413
 * class AES_CTR(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, counter = None):             # <<<<<<<<<<<<<<
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CTR_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CTR_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_counter = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_key,&__pyx_n_s_counter_2,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 413, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_counter_2);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 413, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_key = values[1];
    __pyx_v_counter = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 413, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CTR.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CTR___init__(__pyx_self, __pyx_v_self, __pyx_v_key, __pyx_v_counter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CTR___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_counter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_counter);

  /* "Aeskeys.pyx":414
 * 
 *     def __init__(self, key, counter = None):
 *         AESBlockModeOfOperation.__init__(self, key)             # <<<<<<<<<<<<<<
 * 
 *         if counter is None:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_self, __pyx_v_key};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":416
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *         if counter is None:             # <<<<<<<<<<<<<<
 *             counter = Counter()
 * 
 */
  __pyx_t_6 = (__pyx_v_counter == Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "Aeskeys.pyx":417
 * 
 *         if counter is None:
 *             counter = Counter()             # <<<<<<<<<<<<<<
 * 
 *         self._counter = counter
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Counter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_counter, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":416
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *         if counter is None:             # <<<<<<<<<<<<<<
 *             counter = Counter()
 * 
 */
  }

  /* "Aeskeys.pyx":419
 *             counter = Counter()
 * 
 *         self._counter = counter             # <<<<<<<<<<<<<<
 *         self._remaining_counter = [ ]
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_counter, __pyx_v_counter) < 0) __PYX_ERR(0, 419, __pyx_L1_error)

  /* "Aeskeys.pyx":420
 * 
 *         self._counter = counter
 *         self._remaining_counter = [ ]             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter, __pyx_t_1) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":413
 * class AES_CTR(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, counter = None):             # <<<<<<<<<<<<<<
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("Aeskeys.AES_CTR.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_counter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":422
 *         self._remaining_counter = [ ]
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CTR_3encrypt = {"encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CTR_3encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_3encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_plaintext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_plaintext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plaintext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, 1); __PYX_ERR(0, 422, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt") < 0)) __PYX_ERR(0, 422, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_plaintext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CTR.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CTR_2encrypt(__pyx_self, __pyx_v_self, __pyx_v_plaintext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CTR_2encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_plaintext) {
  PyObject *__pyx_v_encrypted = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt", 0);
  __Pyx_INCREF(__pyx_v_plaintext);

  /* "Aeskeys.pyx":423
 * 
 *     def encrypt(self, plaintext):
 *         while len(self._remaining_counter) < len(plaintext):             # <<<<<<<<<<<<<<
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 *             self._counter.increment()
 */
  while (1) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = PyObject_Length(__pyx_v_plaintext); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 423, __pyx_L1_error)
    __pyx_t_4 = ((__pyx_t_2 < __pyx_t_3) != 0);
    if (!__pyx_t_4) break;

    /* "Aeskeys.pyx":424
 *     def encrypt(self, plaintext):
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)             # <<<<<<<<<<<<<<
 *             self._counter.increment()
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_aes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter, __pyx_t_7) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "Aeskeys.pyx":425
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 *             self._counter.increment()             # <<<<<<<<<<<<<<
 * 
 *         plaintext = _string_to_bytes(plaintext)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_counter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_increment); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "Aeskeys.pyx":427
 *             self._counter.increment()
 * 
 *         plaintext = _string_to_bytes(plaintext)             # <<<<<<<<<<<<<<
 * 
 *         encrypted = [ (p ^ c) for (p, c) in zip(plaintext, self._remaining_counter) ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_string_to_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_7 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v_plaintext) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_plaintext);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_plaintext, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "Aeskeys.pyx":429
 *         plaintext = _string_to_bytes(plaintext)
 * 
 *         encrypted = [ (p ^ c) for (p, c) in zip(plaintext, self._remaining_counter) ]             # <<<<<<<<<<<<<<
 *         self._remaining_counter = self._remaining_counter[len(encrypted):]
 * 
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_plaintext);
  __Pyx_GIVEREF(__pyx_v_plaintext);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_plaintext);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 429, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_5);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 429, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 429, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_6 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 429, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = PyNumber_Xor(__pyx_v_p, __pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_encrypted = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "Aeskeys.pyx":430
 * 
 *         encrypted = [ (p ^ c) for (p, c) in zip(plaintext, self._remaining_counter) ]
 *         self._remaining_counter = self._remaining_counter[len(encrypted):]             # <<<<<<<<<<<<<<
 * 
 *         return _bytes_to_string(encrypted)
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyList_GET_SIZE(__pyx_v_encrypted); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 430, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_t_7, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_remaining_counter, __pyx_t_5) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "Aeskeys.pyx":432
 *         self._remaining_counter = self._remaining_counter[len(encrypted):]
 * 
 *         return _bytes_to_string(encrypted)             # <<<<<<<<<<<<<<
 * 
 *     def decrypt(self, crypttext):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_bytes_to_string); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_v_encrypted) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":422
 *         self._remaining_counter = [ ]
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("Aeskeys.AES_CTR.encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encrypted);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_plaintext);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":434
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, crypttext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(crypttext)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_7AES_CTR_5decrypt = {"decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_7AES_CTR_5decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_7AES_CTR_5decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_crypttext = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_crypttext,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_crypttext)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, 1); __PYX_ERR(0, 434, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt") < 0)) __PYX_ERR(0, 434, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_crypttext = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 434, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.AES_CTR.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_7AES_CTR_4decrypt(__pyx_self, __pyx_v_self, __pyx_v_crypttext);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_7AES_CTR_4decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_crypttext) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt", 0);

  /* "Aeskeys.pyx":435
 * 
 *     def decrypt(self, crypttext):
 *         return self.encrypt(crypttext)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_crypttext) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_crypttext);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":434
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, crypttext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(crypttext)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys.AES_CTR.decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":457
 * # ECB and CBC are block-only ciphers
 * 
 * def _block_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     if size >= 16: return 16
 *     return 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_19_block_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_19_block_can_consume = {"_block_can_consume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_19_block_can_consume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_19_block_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_block_can_consume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_block_can_consume", 1, 2, 2, 1); __PYX_ERR(0, 457, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_block_can_consume") < 0)) __PYX_ERR(0, 457, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_size = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_block_can_consume", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 457, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._block_can_consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_18_block_can_consume(__pyx_self, __pyx_v_self, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_18_block_can_consume(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_block_can_consume", 0);

  /* "Aeskeys.pyx":458
 * 
 * def _block_can_consume(self, size):
 *     if size >= 16: return 16             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_size, __pyx_int_16, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_16);
    __pyx_r = __pyx_int_16;
    goto __pyx_L0;
  }

  /* "Aeskeys.pyx":459
 * def _block_can_consume(self, size):
 *     if size >= 16: return 16
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * # After padding, we may have more than one block
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":457
 * # ECB and CBC are block-only ciphers
 * 
 * def _block_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     if size >= 16: return 16
 *     return 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("Aeskeys._block_can_consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":462
 * 
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         data = util.append_PKCS7_padding(data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_21_block_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_21_block_final_encrypt = {"_block_final_encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_21_block_final_encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_21_block_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_block_final_encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__10;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_block_final_encrypt", 0, 2, 3, 1); __PYX_ERR(0, 462, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_block_final_encrypt") < 0)) __PYX_ERR(0, 462, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_block_final_encrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 462, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._block_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_20_block_final_encrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_20_block_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_block_final_encrypt", 0);
  __Pyx_INCREF(__pyx_v_data);

  /* "Aeskeys.pyx":463
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         data = util.append_PKCS7_padding(data)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":464
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:
 *         data = util.append_PKCS7_padding(data)             # <<<<<<<<<<<<<<
 * 
 *     elif padding == PADDING_NONE:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_util); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_append_PKCS7_padding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_data, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "Aeskeys.pyx":463
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         data = util.append_PKCS7_padding(data)
 * 
 */
    goto __pyx_L3;
  }

  /* "Aeskeys.pyx":466
 *         data = util.append_PKCS7_padding(data)
 * 
 *     elif padding == PADDING_NONE:             # <<<<<<<<<<<<<<
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PADDING_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_3)) {

    /* "Aeskeys.pyx":467
 * 
 *     elif padding == PADDING_NONE:
 *         if len(data) != 16:             # <<<<<<<<<<<<<<
 *             raise Exception('invalid data length for final block ^^')
 *     else:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 467, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_5 != 16) != 0);
    if (unlikely(__pyx_t_3)) {

      /* "Aeskeys.pyx":468
 *     elif padding == PADDING_NONE:
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception('invalid padding option ^^')
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 468, __pyx_L1_error)

      /* "Aeskeys.pyx":467
 * 
 *     elif padding == PADDING_NONE:
 *         if len(data) != 16:             # <<<<<<<<<<<<<<
 *             raise Exception('invalid data length for final block ^^')
 *     else:
 */
    }

    /* "Aeskeys.pyx":466
 *         data = util.append_PKCS7_padding(data)
 * 
 *     elif padding == PADDING_NONE:             # <<<<<<<<<<<<<<
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')
 */
    goto __pyx_L3;
  }

  /* "Aeskeys.pyx":470
 *             raise Exception('invalid data length for final block ^^')
 *     else:
 *         raise Exception('invalid padding option ^^')             # <<<<<<<<<<<<<<
 * 
 *     if len(data) == 32:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 470, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "Aeskeys.pyx":472
 *         raise Exception('invalid padding option ^^')
 * 
 *     if len(data) == 32:             # <<<<<<<<<<<<<<
 *         return self.encrypt(data[:16]) + self.encrypt(data[16:])
 * 
 */
  __pyx_t_5 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_5 == 32) != 0);
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":473
 * 
 *     if len(data) == 32:
 *         return self.encrypt(data[:16]) + self.encrypt(data[16:])             # <<<<<<<<<<<<<<
 * 
 *     return self.encrypt(data)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_data, 0, 16, NULL, NULL, &__pyx_slice__13, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_data, 16, 0, NULL, NULL, &__pyx_slice__14, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "Aeskeys.pyx":472
 *         raise Exception('invalid padding option ^^')
 * 
 *     if len(data) == 32:             # <<<<<<<<<<<<<<
 *         return self.encrypt(data[:16]) + self.encrypt(data[16:])
 * 
 */
  }

  /* "Aeskeys.pyx":475
 *         return self.encrypt(data[:16]) + self.encrypt(data[16:])
 * 
 *     return self.encrypt(data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":462
 * 
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         data = util.append_PKCS7_padding(data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys._block_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":478
 * 
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_23_block_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_23_block_final_decrypt = {"_block_final_decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_23_block_final_decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_23_block_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_block_final_decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__15;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_block_final_decrypt", 0, 2, 3, 1); __PYX_ERR(0, 478, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_block_final_decrypt") < 0)) __PYX_ERR(0, 478, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_block_final_decrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 478, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._block_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_22_block_final_decrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_22_block_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_block_final_decrypt", 0);

  /* "Aeskeys.pyx":479
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":480
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:
 *         return util.strip_PKCS7_padding(self.decrypt(data))             # <<<<<<<<<<<<<<
 * 
 *     if padding == PADDING_NONE:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_util); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_strip_PKCS7_padding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "Aeskeys.pyx":479
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding == PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 * 
 */
  }

  /* "Aeskeys.pyx":482
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 * 
 *     if padding == PADDING_NONE:             # <<<<<<<<<<<<<<
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PADDING_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":483
 * 
 *     if padding == PADDING_NONE:
 *         if len(data) != 16:             # <<<<<<<<<<<<<<
 *             raise Exception('invalid data length for final block ^^')
 *         return self.decrypt(data)
 */
    __pyx_t_7 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 483, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_7 != 16) != 0);
    if (unlikely(__pyx_t_3)) {

      /* "Aeskeys.pyx":484
 *     if padding == PADDING_NONE:
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')             # <<<<<<<<<<<<<<
 *         return self.decrypt(data)
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 484, __pyx_L1_error)

      /* "Aeskeys.pyx":483
 * 
 *     if padding == PADDING_NONE:
 *         if len(data) != 16:             # <<<<<<<<<<<<<<
 *             raise Exception('invalid data length for final block ^^')
 *         return self.decrypt(data)
 */
    }

    /* "Aeskeys.pyx":485
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')
 *         return self.decrypt(data)             # <<<<<<<<<<<<<<
 * 
 *     raise Exception('invalid padding option ^^')
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "Aeskeys.pyx":482
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 * 
 *     if padding == PADDING_NONE:             # <<<<<<<<<<<<<<
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')
 */
  }

  /* "Aeskeys.pyx":487
 *         return self.decrypt(data)
 * 
 *     raise Exception('invalid padding option ^^')             # <<<<<<<<<<<<<<
 * 
 * AESBlockModeOfOperation._can_consume = _block_can_consume
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 487, __pyx_L1_error)

  /* "Aeskeys.pyx":478
 * 
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("Aeskeys._block_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":495
 * 
 * 
 * def _segment_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return self.segment_bytes * int(size // self.segment_bytes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_25_segment_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_25_segment_can_consume = {"_segment_can_consume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_25_segment_can_consume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_25_segment_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_segment_can_consume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_segment_can_consume", 1, 2, 2, 1); __PYX_ERR(0, 495, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_segment_can_consume") < 0)) __PYX_ERR(0, 495, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_size = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_segment_can_consume", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 495, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._segment_can_consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_24_segment_can_consume(__pyx_self, __pyx_v_self, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_24_segment_can_consume(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_segment_can_consume", 0);

  /* "Aeskeys.pyx":496
 * 
 * def _segment_can_consume(self, size):
 *     return self.segment_bytes * int(size // self.segment_bytes)             # <<<<<<<<<<<<<<
 * 
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_FloorDivide(__pyx_v_size, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":495
 * 
 * 
 * def _segment_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return self.segment_bytes * int(size // self.segment_bytes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys._segment_can_consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":499
 * 
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_27_segment_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_27_segment_final_encrypt = {"_segment_final_encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_27_segment_final_encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_27_segment_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_segment_final_encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__16;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_segment_final_encrypt", 0, 2, 3, 1); __PYX_ERR(0, 499, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_segment_final_encrypt") < 0)) __PYX_ERR(0, 499, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_segment_final_encrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 499, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._segment_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_26_segment_final_encrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_26_segment_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_v_faux_padding = NULL;
  PyObject *__pyx_v_padded = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_segment_final_encrypt", 0);

  /* "Aeskeys.pyx":500
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ><')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "Aeskeys.pyx":501
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')             # <<<<<<<<<<<<<<
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 501, __pyx_L1_error)

    /* "Aeskeys.pyx":500
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ><')
 * 
 */
  }

  /* "Aeskeys.pyx":503
 *         raise Exception('invalid padding option ><')
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))             # <<<<<<<<<<<<<<
 *     padded = data + to_bufferable(faux_padding)
 *     return self.encrypt(padded)[:len(data)]
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 503, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Remainder(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_faux_padding = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "Aeskeys.pyx":504
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 *     padded = data + to_bufferable(faux_padding)             # <<<<<<<<<<<<<<
 *     return self.encrypt(padded)[:len(data)]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_faux_padding) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_faux_padding);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_v_data, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_padded = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "Aeskeys.pyx":505
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 *     padded = data + to_bufferable(faux_padding)
 *     return self.encrypt(padded)[:len(data)]             # <<<<<<<<<<<<<<
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_v_padded) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_padded);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_6, 0, __pyx_t_4, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":499
 * 
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys._segment_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faux_padding);
  __Pyx_XDECREF(__pyx_v_padded);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":507
 *     return self.encrypt(padded)[:len(data)]
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_29_segment_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_29_segment_final_decrypt = {"_segment_final_decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_29_segment_final_decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_29_segment_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_segment_final_decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__19;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_segment_final_decrypt", 0, 2, 3, 1); __PYX_ERR(0, 507, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_segment_final_decrypt") < 0)) __PYX_ERR(0, 507, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_segment_final_decrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 507, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._segment_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_28_segment_final_decrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_28_segment_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_v_faux_padding = NULL;
  PyObject *__pyx_v_padded = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_segment_final_decrypt", 0);

  /* "Aeskeys.pyx":508
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ><')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_padding, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "Aeskeys.pyx":509
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')             # <<<<<<<<<<<<<<
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 509, __pyx_L1_error)

    /* "Aeskeys.pyx":508
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ><')
 * 
 */
  }

  /* "Aeskeys.pyx":511
 *         raise Exception('invalid padding option ><')
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))             # <<<<<<<<<<<<<<
 *     padded = data + to_bufferable(faux_padding)
 *     return self.decrypt(padded)[:len(data)]
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 511, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_segment_bytes_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyNumber_Remainder(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_faux_padding = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "Aeskeys.pyx":512
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 *     padded = data + to_bufferable(faux_padding)             # <<<<<<<<<<<<<<
 *     return self.decrypt(padded)[:len(data)]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_7 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_faux_padding) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_faux_padding);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Add(__pyx_v_data, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_padded = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "Aeskeys.pyx":513
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 *     padded = data + to_bufferable(faux_padding)
 *     return self.decrypt(padded)[:len(data)]             # <<<<<<<<<<<<<<
 * 
 * AESSegmentModeOfOperation._can_consume = _segment_can_consume
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_2, __pyx_v_padded) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_padded);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_GetSlice(__pyx_t_6, 0, __pyx_t_4, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":507
 *     return self.encrypt(padded)[:len(data)]
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys._segment_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faux_padding);
  __Pyx_XDECREF(__pyx_v_padded);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":523
 * # OFB and CTR are stream ciphers
 * 
 * def _stream_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_31_stream_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_31_stream_can_consume = {"_stream_can_consume", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_31_stream_can_consume, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_31_stream_can_consume(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stream_can_consume (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_stream_can_consume", 1, 2, 2, 1); __PYX_ERR(0, 523, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_stream_can_consume") < 0)) __PYX_ERR(0, 523, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_size = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_stream_can_consume", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 523, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._stream_can_consume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_30_stream_can_consume(__pyx_self, __pyx_v_self, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_30_stream_can_consume(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stream_can_consume", 0);

  /* "Aeskeys.pyx":524
 * 
 * def _stream_can_consume(self, size):
 *     return size             # <<<<<<<<<<<<<<
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_size);
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "Aeskeys.pyx":523
 * # OFB and CTR are stream ciphers
 * 
 * def _stream_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return size
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":526
 *     return size
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_33_stream_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_33_stream_final_encrypt = {"_stream_final_encrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_33_stream_final_encrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_33_stream_final_encrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stream_final_encrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__20;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_stream_final_encrypt", 0, 2, 3, 1); __PYX_ERR(0, 526, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_stream_final_encrypt") < 0)) __PYX_ERR(0, 526, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_stream_final_encrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 526, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._stream_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_32_stream_final_encrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_32_stream_final_encrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_stream_final_encrypt", 0);

  /* "Aeskeys.pyx":527
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ^^')
 * 
 */
  __Pyx_INCREF(__pyx_v_padding);
  __pyx_t_1 = __pyx_v_padding;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PADDING_NONE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "Aeskeys.pyx":528
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')             # <<<<<<<<<<<<<<
 * 
 *     return self.encrypt(data)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 528, __pyx_L1_error)

    /* "Aeskeys.pyx":527
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ^^')
 * 
 */
  }

  /* "Aeskeys.pyx":530
 *         raise Exception('invalid padding option ^^')
 * 
 *     return self.encrypt(data)             # <<<<<<<<<<<<<<
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":526
 *     return size
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys._stream_final_encrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":532
 *     return self.encrypt(data)
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_35_stream_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_35_stream_final_decrypt = {"_stream_final_decrypt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_35_stream_final_decrypt, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_35_stream_final_decrypt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stream_final_decrypt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    values[2] = __pyx_k__21;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_stream_final_decrypt", 0, 2, 3, 1); __PYX_ERR(0, 532, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_stream_final_decrypt") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_stream_final_decrypt", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._stream_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_34_stream_final_decrypt(__pyx_self, __pyx_v_self, __pyx_v_data, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_34_stream_final_decrypt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_stream_final_decrypt", 0);

  /* "Aeskeys.pyx":533
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ^^')
 * 
 */
  __Pyx_INCREF(__pyx_v_padding);
  __pyx_t_1 = __pyx_v_padding;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PADDING_NONE); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "Aeskeys.pyx":534
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')             # <<<<<<<<<<<<<<
 * 
 *     return self.decrypt(data)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 534, __pyx_L1_error)

    /* "Aeskeys.pyx":533
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:             # <<<<<<<<<<<<<<
 *         raise Exception('invalid padding option ^^')
 * 
 */
  }

  /* "Aeskeys.pyx":536
 *         raise Exception('invalid padding option ^^')
 * 
 *     return self.decrypt(data)             # <<<<<<<<<<<<<<
 * 
 * AESStreamModeOfOperation._can_consume = _stream_can_consume
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":532
 *     return self.encrypt(data)
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys._stream_final_decrypt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":546
 * class BlockFeeder(object):
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         self._mode = mode
 *         self._feed = feed
 */

static PyObject *__pyx_pf_7Aeskeys_42__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_padding);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_padding);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_padding);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_11BlockFeeder_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_11BlockFeeder_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_11BlockFeeder_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_11BlockFeeder_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_feed = 0;
  PyObject *__pyx_v_final = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_mode,&__pyx_n_s_feed,&__pyx_n_s_final,&__pyx_n_s_padding,0};
    PyObject* values[5] = {0,0,0,0,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[4] = __pyx_dynamic_args->__pyx_arg_padding;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 546, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 546, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 546, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 546, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_mode = values[1];
    __pyx_v_feed = values[2];
    __pyx_v_final = values[3];
    __pyx_v_padding = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 546, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.BlockFeeder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_11BlockFeeder___init__(__pyx_self, __pyx_v_self, __pyx_v_mode, __pyx_v_feed, __pyx_v_final, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_11BlockFeeder___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_feed, PyObject *__pyx_v_final, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":547
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):
 *         self._mode = mode             # <<<<<<<<<<<<<<
 *         self._feed = feed
 *         self._final = final
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_mode_2, __pyx_v_mode) < 0) __PYX_ERR(0, 547, __pyx_L1_error)

  /* "Aeskeys.pyx":548
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):
 *         self._mode = mode
 *         self._feed = feed             # <<<<<<<<<<<<<<
 *         self._final = final
 *         self._buffer = to_bufferable("")
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_feed_2, __pyx_v_feed) < 0) __PYX_ERR(0, 548, __pyx_L1_error)

  /* "Aeskeys.pyx":549
 *         self._mode = mode
 *         self._feed = feed
 *         self._final = final             # <<<<<<<<<<<<<<
 *         self._buffer = to_bufferable("")
 *         self._padding = padding
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_final_2, __pyx_v_final) < 0) __PYX_ERR(0, 549, __pyx_L1_error)

  /* "Aeskeys.pyx":550
 *         self._feed = feed
 *         self._final = final
 *         self._buffer = to_bufferable("")             # <<<<<<<<<<<<<<
 *         self._padding = padding
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_buffer, __pyx_t_1) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":551
 *         self._final = final
 *         self._buffer = to_bufferable("")
 *         self._padding = padding             # <<<<<<<<<<<<<<
 * 
 *     def feed(self, data = None):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_padding_2, __pyx_v_padding) < 0) __PYX_ERR(0, 551, __pyx_L1_error)

  /* "Aeskeys.pyx":546
 * class BlockFeeder(object):
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         self._mode = mode
 *         self._feed = feed
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys.BlockFeeder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":553
 *         self._padding = padding
 * 
 *     def feed(self, data = None):             # <<<<<<<<<<<<<<
 * 
 *         if self._buffer is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_11BlockFeeder_3feed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_11BlockFeeder_3feed = {"feed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_11BlockFeeder_3feed, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_11BlockFeeder_3feed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_data = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("feed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_data,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "feed") < 0)) __PYX_ERR(0, 553, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_data = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("feed", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 553, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.BlockFeeder.feed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_11BlockFeeder_2feed(__pyx_self, __pyx_v_self, __pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_11BlockFeeder_2feed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_can_consume = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("feed", 0);

  /* "Aeskeys.pyx":555
 *     def feed(self, data = None):
 * 
 *         if self._buffer is None:             # <<<<<<<<<<<<<<
 *             raise ValueError('already finished feeder ~')
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "Aeskeys.pyx":556
 * 
 *         if self._buffer is None:
 *             raise ValueError('already finished feeder ~')             # <<<<<<<<<<<<<<
 * 
 *         if data is None:
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 556, __pyx_L1_error)

    /* "Aeskeys.pyx":555
 *     def feed(self, data = None):
 * 
 *         if self._buffer is None:             # <<<<<<<<<<<<<<
 *             raise ValueError('already finished feeder ~')
 * 
 */
  }

  /* "Aeskeys.pyx":558
 *             raise ValueError('already finished feeder ~')
 * 
 *         if data is None:             # <<<<<<<<<<<<<<
 *             result = self._final(self._buffer, self._padding)
 *             self._buffer = None
 */
  __pyx_t_3 = (__pyx_v_data == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "Aeskeys.pyx":559
 * 
 *         if data is None:
 *             result = self._final(self._buffer, self._padding)             # <<<<<<<<<<<<<<
 *             self._buffer = None
 *             return result
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_final_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_padding_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_5, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":560
 *         if data is None:
 *             result = self._final(self._buffer, self._padding)
 *             self._buffer = None             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_buffer, Py_None) < 0) __PYX_ERR(0, 560, __pyx_L1_error)

    /* "Aeskeys.pyx":561
 *             result = self._final(self._buffer, self._padding)
 *             self._buffer = None
 *             return result             # <<<<<<<<<<<<<<
 * 
 *         self._buffer += to_bufferable(data)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;

    /* "Aeskeys.pyx":558
 *             raise ValueError('already finished feeder ~')
 * 
 *         if data is None:             # <<<<<<<<<<<<<<
 *             result = self._final(self._buffer, self._padding)
 *             self._buffer = None
 */
  }

  /* "Aeskeys.pyx":563
 *             return result
 * 
 *         self._buffer += to_bufferable(data)             # <<<<<<<<<<<<<<
 * 
 *         # We keep 16 bytes around so we can determine padding
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_6, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_data);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_buffer, __pyx_t_9) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":566
 * 
 *         # We keep 16 bytes around so we can determine padding
 *         result = to_bufferable('')             # <<<<<<<<<<<<<<
 *         while len(self._buffer) > 16:
 *             can_consume = self._mode._can_consume(len(self._buffer) - 16)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_kp_s_) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_result = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "Aeskeys.pyx":567
 *         # We keep 16 bytes around so we can determine padding
 *         result = to_bufferable('')
 *         while len(self._buffer) > 16:             # <<<<<<<<<<<<<<
 *             can_consume = self._mode._can_consume(len(self._buffer) - 16)
 *             if can_consume == 0: break
 */
  while (1) {
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyObject_Length(__pyx_t_9); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_2 = ((__pyx_t_10 > 16) != 0);
    if (!__pyx_t_2) break;

    /* "Aeskeys.pyx":568
 *         result = to_bufferable('')
 *         while len(self._buffer) > 16:
 *             can_consume = self._mode._can_consume(len(self._buffer) - 16)             # <<<<<<<<<<<<<<
 *             if can_consume == 0: break
 *             result += self._feed(self._buffer[:can_consume])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mode_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_can_consume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_t_10 - 16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_9 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_can_consume, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "Aeskeys.pyx":569
 *         while len(self._buffer) > 16:
 *             can_consume = self._mode._can_consume(len(self._buffer) - 16)
 *             if can_consume == 0: break             # <<<<<<<<<<<<<<
 *             result += self._feed(self._buffer[:can_consume])
 *             self._buffer = self._buffer[can_consume:]
 */
    __pyx_t_9 = __Pyx_PyInt_EqObjC(__pyx_v_can_consume, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_2) {
      goto __pyx_L6_break;
    }

    /* "Aeskeys.pyx":570
 *             can_consume = self._mode._can_consume(len(self._buffer) - 16)
 *             if can_consume == 0: break
 *             result += self._feed(self._buffer[:can_consume])             # <<<<<<<<<<<<<<
 *             self._buffer = self._buffer[can_consume:]
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_feed_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_t_4, 0, 0, NULL, &__pyx_v_can_consume, NULL, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_9 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_result, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":571
 *             if can_consume == 0: break
 *             result += self._feed(self._buffer[:can_consume])
 *             self._buffer = self._buffer[can_consume:]             # <<<<<<<<<<<<<<
 * 
 *         return result
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_buffer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, &__pyx_v_can_consume, NULL, NULL, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_buffer, __pyx_t_9) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __pyx_L6_break:;

  /* "Aeskeys.pyx":573
 *             self._buffer = self._buffer[can_consume:]
 * 
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "Aeskeys.pyx":553
 *         self._padding = padding
 * 
 *     def feed(self, data = None):             # <<<<<<<<<<<<<<
 * 
 *         if self._buffer is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("Aeskeys.BlockFeeder.feed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_can_consume);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":578
 * class Encrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.encrypt, mode._final_encrypt, padding)
 * 
 */

static PyObject *__pyx_pf_7Aeskeys_44__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_padding);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_padding);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_padding);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_9Encrypter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_9Encrypter_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_9Encrypter_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_9Encrypter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_mode,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[2] = __pyx_dynamic_args->__pyx_arg_padding;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 578, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 578, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_mode = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 578, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.Encrypter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_9Encrypter___init__(__pyx_self, __pyx_v_self, __pyx_v_mode, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_9Encrypter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":579
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 *         BlockFeeder.__init__(self, mode, mode.encrypt, mode._final_encrypt, padding)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BlockFeeder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_encrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_final_encrypt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_self, __pyx_v_mode, __pyx_t_2, __pyx_t_4, __pyx_v_padding};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_self, __pyx_v_mode, __pyx_t_2, __pyx_t_4, __pyx_v_padding};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_mode);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_padding);
    __Pyx_GIVEREF(__pyx_v_padding);
    PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_v_padding);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":578
 * class Encrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.encrypt, mode._final_encrypt, padding)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys.Encrypter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":584
 * class Decrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.decrypt, mode._final_decrypt, padding)
 * 
 */

static PyObject *__pyx_pf_7Aeskeys_46__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_padding);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_padding);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_padding);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_9Decrypter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_9Decrypter_1__init__ = {"__init__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_9Decrypter_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_9Decrypter_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_mode,&__pyx_n_s_padding,0};
    PyObject* values[3] = {0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    values[2] = __pyx_dynamic_args->__pyx_arg_padding;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); __PYX_ERR(0, 584, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 584, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_mode = values[1];
    __pyx_v_padding = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 584, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.Decrypter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_9Decrypter___init__(__pyx_self, __pyx_v_self, __pyx_v_mode, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_9Decrypter___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "Aeskeys.pyx":585
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 *         BlockFeeder.__init__(self, mode, mode.decrypt, mode._final_decrypt, padding)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BlockFeeder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_decrypt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_final_decrypt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_self, __pyx_v_mode, __pyx_t_2, __pyx_t_4, __pyx_v_padding};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_v_self, __pyx_v_mode, __pyx_t_2, __pyx_t_4, __pyx_v_padding};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 5+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(5+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_self);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_mode);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 3+__pyx_t_6, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_padding);
    __Pyx_GIVEREF(__pyx_v_padding);
    PyTuple_SET_ITEM(__pyx_t_7, 4+__pyx_t_6, __pyx_v_padding);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":584
 * class Decrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.decrypt, mode._final_decrypt, padding)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("Aeskeys.Decrypter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":590
 * BLOCK_SIZE = (1 << 13)
 * 
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_37_feed_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_37_feed_stream = {"_feed_stream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_37_feed_stream, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_37_feed_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_feeder = 0;
  PyObject *__pyx_v_in_stream = 0;
  PyObject *__pyx_v_out_stream = 0;
  PyObject *__pyx_v_block_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_feed_stream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_feeder,&__pyx_n_s_in_stream,&__pyx_n_s_out_stream,&__pyx_n_s_block_size,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = __pyx_k__23;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feeder)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_feed_stream", 0, 3, 4, 1); __PYX_ERR(0, 590, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_feed_stream", 0, 3, 4, 2); __PYX_ERR(0, 590, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_feed_stream") < 0)) __PYX_ERR(0, 590, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_feeder = values[0];
    __pyx_v_in_stream = values[1];
    __pyx_v_out_stream = values[2];
    __pyx_v_block_size = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_feed_stream", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 590, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys._feed_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_36_feed_stream(__pyx_self, __pyx_v_feeder, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_36_feed_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_feeder, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size) {
  PyObject *__pyx_v_chunk = NULL;
  PyObject *__pyx_v_converted = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_feed_stream", 0);

  /* "Aeskeys.pyx":592
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):
 * 
 *     while True:             # <<<<<<<<<<<<<<
 *         chunk = in_stream.read(block_size)
 *         if not chunk:
 */
  while (1) {

    /* "Aeskeys.pyx":593
 * 
 *     while True:
 *         chunk = in_stream.read(block_size)             # <<<<<<<<<<<<<<
 *         if not chunk:
 *             break
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_in_stream, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_block_size) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_block_size);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":594
 *     while True:
 *         chunk = in_stream.read(block_size)
 *         if not chunk:             # <<<<<<<<<<<<<<
 *             break
 *         converted = feeder.feed(chunk)
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_chunk); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 594, __pyx_L1_error)
    __pyx_t_5 = ((!__pyx_t_4) != 0);
    if (__pyx_t_5) {

      /* "Aeskeys.pyx":595
 *         chunk = in_stream.read(block_size)
 *         if not chunk:
 *             break             # <<<<<<<<<<<<<<
 *         converted = feeder.feed(chunk)
 *         out_stream.write(converted)
 */
      goto __pyx_L4_break;

      /* "Aeskeys.pyx":594
 *     while True:
 *         chunk = in_stream.read(block_size)
 *         if not chunk:             # <<<<<<<<<<<<<<
 *             break
 *         converted = feeder.feed(chunk)
 */
    }

    /* "Aeskeys.pyx":596
 *         if not chunk:
 *             break
 *         converted = feeder.feed(chunk)             # <<<<<<<<<<<<<<
 *         out_stream.write(converted)
 *     converted = feeder.feed()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_feeder, __pyx_n_s_feed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_chunk) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_chunk);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_converted, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "Aeskeys.pyx":597
 *             break
 *         converted = feeder.feed(chunk)
 *         out_stream.write(converted)             # <<<<<<<<<<<<<<
 *     converted = feeder.feed()
 *     out_stream.write(converted)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_stream, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_converted) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_converted);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4_break:;

  /* "Aeskeys.pyx":598
 *         converted = feeder.feed(chunk)
 *         out_stream.write(converted)
 *     converted = feeder.feed()             # <<<<<<<<<<<<<<
 *     out_stream.write(converted)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_feeder, __pyx_n_s_feed); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_XDECREF_SET(__pyx_v_converted, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "Aeskeys.pyx":599
 *         out_stream.write(converted)
 *     converted = feeder.feed()
 *     out_stream.write(converted)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_stream, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_converted) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_converted);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":590
 * BLOCK_SIZE = (1 << 13)
 * 
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("Aeskeys._feed_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XDECREF(__pyx_v_converted);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":602
 * 
 * 
 * def encrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     encrypter = Encrypter(mode, padding = padding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_39encrypt_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_39encrypt_stream = {"encrypt_stream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_39encrypt_stream, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_39encrypt_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_in_stream = 0;
  PyObject *__pyx_v_out_stream = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encrypt_stream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_in_stream,&__pyx_n_s_out_stream,&__pyx_n_s_block_size,&__pyx_n_s_padding,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = __pyx_k__24;
    values[4] = __pyx_k__25;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt_stream", 0, 3, 5, 1); __PYX_ERR(0, 602, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("encrypt_stream", 0, 3, 5, 2); __PYX_ERR(0, 602, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "encrypt_stream") < 0)) __PYX_ERR(0, 602, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = values[0];
    __pyx_v_in_stream = values[1];
    __pyx_v_out_stream = values[2];
    __pyx_v_block_size = values[3];
    __pyx_v_padding = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("encrypt_stream", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 602, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.encrypt_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_38encrypt_stream(__pyx_self, __pyx_v_mode, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_38encrypt_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size, PyObject *__pyx_v_padding) {
  PyObject *__pyx_v_encrypter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("encrypt_stream", 0);

  /* "Aeskeys.pyx":604
 * def encrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):
 * 
 *     encrypter = Encrypter(mode, padding = padding)             # <<<<<<<<<<<<<<
 *     _feed_stream(encrypter, in_stream, out_stream, block_size)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Encrypter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_mode);
  __Pyx_GIVEREF(__pyx_v_mode);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_mode);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_padding, __pyx_v_padding) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_encrypter = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":605
 * 
 *     encrypter = Encrypter(mode, padding = padding)
 *     _feed_stream(encrypter, in_stream, out_stream, block_size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_feed_stream); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_encrypter, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_encrypter, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_encrypter);
    __Pyx_GIVEREF(__pyx_v_encrypter);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_5, __pyx_v_encrypter);
    __Pyx_INCREF(__pyx_v_in_stream);
    __Pyx_GIVEREF(__pyx_v_in_stream);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_5, __pyx_v_in_stream);
    __Pyx_INCREF(__pyx_v_out_stream);
    __Pyx_GIVEREF(__pyx_v_out_stream);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_5, __pyx_v_out_stream);
    __Pyx_INCREF(__pyx_v_block_size);
    __Pyx_GIVEREF(__pyx_v_block_size);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_5, __pyx_v_block_size);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":602
 * 
 * 
 * def encrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     encrypter = Encrypter(mode, padding = padding)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys.encrypt_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encrypter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":608
 * 
 * 
 * def decrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     decrypter = Decrypter(mode, padding = padding)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_41decrypt_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_41decrypt_stream = {"decrypt_stream", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7Aeskeys_41decrypt_stream, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7Aeskeys_41decrypt_stream(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_in_stream = 0;
  PyObject *__pyx_v_out_stream = 0;
  PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_padding = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decrypt_stream (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_in_stream,&__pyx_n_s_out_stream,&__pyx_n_s_block_size,&__pyx_n_s_padding,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = __pyx_k__26;
    values[4] = __pyx_k__27;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_in_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt_stream", 0, 3, 5, 1); __PYX_ERR(0, 608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_out_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("decrypt_stream", 0, 3, 5, 2); __PYX_ERR(0, 608, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "decrypt_stream") < 0)) __PYX_ERR(0, 608, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = values[0];
    __pyx_v_in_stream = values[1];
    __pyx_v_out_stream = values[2];
    __pyx_v_block_size = values[3];
    __pyx_v_padding = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("decrypt_stream", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 608, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("Aeskeys.decrypt_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Aeskeys_40decrypt_stream(__pyx_self, __pyx_v_mode, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size, __pyx_v_padding);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_40decrypt_stream(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode, PyObject *__pyx_v_in_stream, PyObject *__pyx_v_out_stream, PyObject *__pyx_v_block_size, PyObject *__pyx_v_padding) {
  PyObject *__pyx_v_decrypter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("decrypt_stream", 0);

  /* "Aeskeys.pyx":610
 * def decrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):
 * 
 *     decrypter = Decrypter(mode, padding = padding)             # <<<<<<<<<<<<<<
 *     _feed_stream(decrypter, in_stream, out_stream, block_size)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decrypter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_mode);
  __Pyx_GIVEREF(__pyx_v_mode);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_mode);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_padding, __pyx_v_padding) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_decrypter = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "Aeskeys.pyx":611
 * 
 *     decrypter = Decrypter(mode, padding = padding)
 *     _feed_stream(decrypter, in_stream, out_stream, block_size)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_feed_stream); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_decrypter, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_2, __pyx_v_decrypter, __pyx_v_in_stream, __pyx_v_out_stream, __pyx_v_block_size};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 4+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(4+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_decrypter);
    __Pyx_GIVEREF(__pyx_v_decrypter);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_5, __pyx_v_decrypter);
    __Pyx_INCREF(__pyx_v_in_stream);
    __Pyx_GIVEREF(__pyx_v_in_stream);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_5, __pyx_v_in_stream);
    __Pyx_INCREF(__pyx_v_out_stream);
    __Pyx_GIVEREF(__pyx_v_out_stream);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_5, __pyx_v_out_stream);
    __Pyx_INCREF(__pyx_v_block_size);
    __Pyx_GIVEREF(__pyx_v_block_size);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_5, __pyx_v_block_size);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "Aeskeys.pyx":608
 * 
 * 
 * def decrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     decrypter = Decrypter(mode, padding = padding)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys.decrypt_stream", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_decrypter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":616
 * class util(object):
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         return binary
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_1to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_1to_bufferable = {"to_bufferable", (PyCFunction)__pyx_pw_7Aeskeys_4util_1to_bufferable, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_1to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bufferable (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_to_bufferable(__pyx_self, ((PyObject *)__pyx_v_binary));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_4util_to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bufferable", 0);

  /* "Aeskeys.pyx":617
 * 
 *     def to_bufferable(binary):
 *         return binary             # <<<<<<<<<<<<<<
 * 
 *     def _get_byte(c):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_binary);
  __pyx_r = __pyx_v_binary;
  goto __pyx_L0;

  /* "Aeskeys.pyx":616
 * class util(object):
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         return binary
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":619
 *         return binary
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return ord(c)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_3_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_3_get_byte = {"_get_byte", (PyCFunction)__pyx_pw_7Aeskeys_4util_3_get_byte, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_3_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_byte (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_2_get_byte(__pyx_self, ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_4util_2_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_byte", 0);

  /* "Aeskeys.pyx":620
 * 
 *     def _get_byte(c):
 *         return ord(c)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_Ord(__pyx_v_c); if (unlikely(__pyx_t_1 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":619
 *         return binary
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return ord(c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("Aeskeys.util._get_byte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_5to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_5to_bufferable = {"to_bufferable", (PyCFunction)__pyx_pw_7Aeskeys_4util_5to_bufferable, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_5to_bufferable(PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_bufferable (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_4to_bufferable(__pyx_self, ((PyObject *)__pyx_v_binary));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7Aeskeys_4util_13to_bufferable_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "Aeskeys.pyx":629
 *             if isinstance(binary, bytes):
 *                 return binary
 *             return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *         def _get_byte(c):
 */

static PyObject *__pyx_pf_7Aeskeys_4util_13to_bufferable_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_7_genexpr(__pyx_ptype_7Aeskeys___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 629, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7Aeskeys_4util_13to_bufferable_2generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_util_to_bufferable_locals_genexp, __pyx_n_s_Aeskeys); if (unlikely(!gen)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("Aeskeys.util.to_bufferable.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7Aeskeys_4util_13to_bufferable_2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 629, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) { __Pyx_RaiseClosureNameError("binary"); __PYX_ERR(0, 629, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_binary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 629, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 629, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_b);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_b, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_Ord(__pyx_cur_scope->__pyx_v_b); if (unlikely(__pyx_t_5 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 629, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 629, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */

static PyObject *__pyx_pf_7Aeskeys_4util_4to_bufferable(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_binary) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *__pyx_cur_scope;
  PyObject *__pyx_gb_7Aeskeys_4util_13to_bufferable_2generator3 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_bufferable", 0);
  __pyx_cur_scope = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)__pyx_tp_new_7Aeskeys___pyx_scope_struct_6_to_bufferable(__pyx_ptype_7Aeskeys___pyx_scope_struct_6_to_bufferable, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 626, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_binary = __pyx_v_binary;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_binary);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_binary);

  /* "Aeskeys.pyx":627
 * 
 *         def to_bufferable(binary):
 *             if isinstance(binary, bytes):             # <<<<<<<<<<<<<<
 *                 return binary
 *             return bytes(ord(b) for b in binary)
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_binary;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_Check(__pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "Aeskeys.pyx":628
 *         def to_bufferable(binary):
 *             if isinstance(binary, bytes):
 *                 return binary             # <<<<<<<<<<<<<<
 *             return bytes(ord(b) for b in binary)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_binary);
    __pyx_r = __pyx_cur_scope->__pyx_v_binary;
    goto __pyx_L0;

    /* "Aeskeys.pyx":627
 * 
 *         def to_bufferable(binary):
 *             if isinstance(binary, bytes):             # <<<<<<<<<<<<<<
 *                 return binary
 *             return bytes(ord(b) for b in binary)
 */
  }

  /* "Aeskeys.pyx":629
 *             if isinstance(binary, bytes):
 *                 return binary
 *             return bytes(ord(b) for b in binary)             # <<<<<<<<<<<<<<
 * 
 *         def _get_byte(c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7Aeskeys_4util_13to_bufferable_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("Aeskeys.util.to_bufferable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7Aeskeys_4util_13to_bufferable_2generator3);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":631
 *             return bytes(ord(b) for b in binary)
 * 
 *         def _get_byte(c):             # <<<<<<<<<<<<<<
 *             return c
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_7_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_7_get_byte = {"_get_byte", (PyCFunction)__pyx_pw_7Aeskeys_4util_7_get_byte, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_7_get_byte(PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_byte (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_6_get_byte(__pyx_self, ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_4util_6_get_byte(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_byte", 0);

  /* "Aeskeys.pyx":632
 * 
 *         def _get_byte(c):
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     def append_PKCS7_padding(data):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_c);
  __pyx_r = __pyx_v_c;
  goto __pyx_L0;

  /* "Aeskeys.pyx":631
 *             return bytes(ord(b) for b in binary)
 * 
 *         def _get_byte(c):             # <<<<<<<<<<<<<<
 *             return c
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":634
 *             return c
 * 
 *     def append_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         pad = 16 - (len(data) % 16)
 *         return data + to_bufferable(chr(pad) * pad)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_9append_PKCS7_padding(PyObject *__pyx_self, PyObject *__pyx_v_data); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_9append_PKCS7_padding = {"append_PKCS7_padding", (PyCFunction)__pyx_pw_7Aeskeys_4util_9append_PKCS7_padding, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_9append_PKCS7_padding(PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_PKCS7_padding (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_8append_PKCS7_padding(__pyx_self, ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_4util_8append_PKCS7_padding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_pad = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_PKCS7_padding", 0);

  /* "Aeskeys.pyx":635
 * 
 *     def append_PKCS7_padding(data):
 *         pad = 16 - (len(data) % 16)             # <<<<<<<<<<<<<<
 *         return data + to_bufferable(chr(pad) * pad)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 635, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t((16 - __Pyx_mod_Py_ssize_t(__pyx_t_1, 16))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_pad = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "Aeskeys.pyx":636
 *     def append_PKCS7_padding(data):
 *         pad = 16 - (len(data) % 16)
 *         return data + to_bufferable(chr(pad) * pad)             # <<<<<<<<<<<<<<
 * 
 *     def strip_PKCS7_padding(data):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_to_bufferable); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_v_pad); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_v_pad); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_v_data, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":634
 *             return c
 * 
 *     def append_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         pad = 16 - (len(data) % 16)
 *         return data + to_bufferable(chr(pad) * pad)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("Aeskeys.util.append_PKCS7_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pad);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Aeskeys.pyx":638
 *         return data + to_bufferable(chr(pad) * pad)
 * 
 *     def strip_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7Aeskeys_4util_11strip_PKCS7_padding(PyObject *__pyx_self, PyObject *__pyx_v_data); /*proto*/
static PyMethodDef __pyx_mdef_7Aeskeys_4util_11strip_PKCS7_padding = {"strip_PKCS7_padding", (PyCFunction)__pyx_pw_7Aeskeys_4util_11strip_PKCS7_padding, METH_O, 0};
static PyObject *__pyx_pw_7Aeskeys_4util_11strip_PKCS7_padding(PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strip_PKCS7_padding (wrapper)", 0);
  __pyx_r = __pyx_pf_7Aeskeys_4util_10strip_PKCS7_padding(__pyx_self, ((PyObject *)__pyx_v_data));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7Aeskeys_4util_10strip_PKCS7_padding(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_pad = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("strip_PKCS7_padding", 0);

  /* "Aeskeys.pyx":639
 * 
 *     def strip_PKCS7_padding(data):
 *         if len(data) % 16 != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid length ~")
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 639, __pyx_L1_error)
  __pyx_t_2 = ((__Pyx_mod_Py_ssize_t(__pyx_t_1, 16) != 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":640
 *     def strip_PKCS7_padding(data):
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")             # <<<<<<<<<<<<<<
 * 
 *         pad = _get_byte(data[-1])
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 640, __pyx_L1_error)

    /* "Aeskeys.pyx":639
 * 
 *     def strip_PKCS7_padding(data):
 *         if len(data) % 16 != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid length ~")
 * 
 */
  }

  /* "Aeskeys.pyx":642
 *             raise ValueError("invalid length ~")
 * 
 *         pad = _get_byte(data[-1])             # <<<<<<<<<<<<<<
 * 
 *         if pad > 16:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_byte); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_data, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pad = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "Aeskeys.pyx":644
 *         pad = _get_byte(data[-1])
 * 
 *         if pad > 16:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid padding byte ~")
 * 
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_pad, __pyx_int_16, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "Aeskeys.pyx":645
 * 
 *         if pad > 16:
 *             raise ValueError("invalid padding byte ~")             # <<<<<<<<<<<<<<
 * 
 *         return data[:-pad]
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 645, __pyx_L1_error)

    /* "Aeskeys.pyx":644
 *         pad = _get_byte(data[-1])
 * 
 *         if pad > 16:             # <<<<<<<<<<<<<<
 *             raise ValueError("invalid padding byte ~")
 * 
 */
  }

  /* "Aeskeys.pyx":647
 *             raise ValueError("invalid padding byte ~")
 * 
 *         return data[:-pad]             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyNumber_Negative(__pyx_v_pad); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_v_data, 0, 0, NULL, &__pyx_t_3, NULL, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "Aeskeys.pyx":638
 *         return data + to_bufferable(chr(pad) * pad)
 * 
 *     def strip_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("Aeskeys.util.strip_PKCS7_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pad);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *__pyx_freelist_7Aeskeys___pyx_scope_struct___string_to_bytes[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct___string_to_bytes = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct___string_to_bytes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct___string_to_bytes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct___string_to_bytes[--__pyx_freecount_7Aeskeys___pyx_scope_struct___string_to_bytes];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct___string_to_bytes(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_text);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct___string_to_bytes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct___string_to_bytes[__pyx_freecount_7Aeskeys___pyx_scope_struct___string_to_bytes++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct___string_to_bytes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)o;
  if (p->__pyx_v_text) {
    e = (*v)(p->__pyx_v_text, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7Aeskeys___pyx_scope_struct___string_to_bytes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes *)o;
  tmp = ((PyObject*)p->__pyx_v_text);
  p->__pyx_v_text = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct___string_to_bytes", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct___string_to_bytes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct___string_to_bytes, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct___string_to_bytes, /*tp_traverse*/
  __pyx_tp_clear_7Aeskeys___pyx_scope_struct___string_to_bytes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct___string_to_bytes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *__pyx_freelist_7Aeskeys___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_1_genexpr[--__pyx_freecount_7Aeskeys___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_c);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_1_genexpr[__pyx_freecount_7Aeskeys___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_c) {
    e = (*v)(p->__pyx_v_c, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *__pyx_freelist_7Aeskeys___pyx_scope_struct_2__bytes_to_string[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_2__bytes_to_string = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_2__bytes_to_string(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_2__bytes_to_string > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_2__bytes_to_string[--__pyx_freecount_7Aeskeys___pyx_scope_struct_2__bytes_to_string];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_2__bytes_to_string(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_binary);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_2__bytes_to_string < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_2__bytes_to_string[__pyx_freecount_7Aeskeys___pyx_scope_struct_2__bytes_to_string++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_2__bytes_to_string(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)o;
  if (p->__pyx_v_binary) {
    e = (*v)(p->__pyx_v_binary, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7Aeskeys___pyx_scope_struct_2__bytes_to_string(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string *)o;
  tmp = ((PyObject*)p->__pyx_v_binary);
  p->__pyx_v_binary = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_2__bytes_to_string", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_2__bytes_to_string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_2__bytes_to_string, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_2__bytes_to_string, /*tp_traverse*/
  __pyx_tp_clear_7Aeskeys___pyx_scope_struct_2__bytes_to_string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_2__bytes_to_string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *__pyx_freelist_7Aeskeys___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_3_genexpr[--__pyx_freecount_7Aeskeys___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_3_genexpr[__pyx_freecount_7Aeskeys___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *__pyx_freelist_7Aeskeys___pyx_scope_struct_4_to_bufferable[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_4_to_bufferable = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_4_to_bufferable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_4_to_bufferable > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_4_to_bufferable[--__pyx_freecount_7Aeskeys___pyx_scope_struct_4_to_bufferable];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_4_to_bufferable(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_binary);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_4_to_bufferable < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_4_to_bufferable[__pyx_freecount_7Aeskeys___pyx_scope_struct_4_to_bufferable++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_4_to_bufferable(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)o;
  if (p->__pyx_v_binary) {
    e = (*v)(p->__pyx_v_binary, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7Aeskeys___pyx_scope_struct_4_to_bufferable(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable *)o;
  tmp = ((PyObject*)p->__pyx_v_binary);
  p->__pyx_v_binary = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_4_to_bufferable", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_4_to_bufferable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_4_to_bufferable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_4_to_bufferable, /*tp_traverse*/
  __pyx_tp_clear_7Aeskeys___pyx_scope_struct_4_to_bufferable, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_4_to_bufferable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *__pyx_freelist_7Aeskeys___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_5_genexpr[--__pyx_freecount_7Aeskeys___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_5_genexpr[__pyx_freecount_7Aeskeys___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *__pyx_freelist_7Aeskeys___pyx_scope_struct_6_to_bufferable[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_6_to_bufferable = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_6_to_bufferable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_6_to_bufferable > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_6_to_bufferable[--__pyx_freecount_7Aeskeys___pyx_scope_struct_6_to_bufferable];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_6_to_bufferable(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_binary);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_6_to_bufferable < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_6_to_bufferable[__pyx_freecount_7Aeskeys___pyx_scope_struct_6_to_bufferable++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_6_to_bufferable(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)o;
  if (p->__pyx_v_binary) {
    e = (*v)(p->__pyx_v_binary, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7Aeskeys___pyx_scope_struct_6_to_bufferable(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable *)o;
  tmp = ((PyObject*)p->__pyx_v_binary);
  p->__pyx_v_binary = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_6_to_bufferable", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_6_to_bufferable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_6_to_bufferable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_6_to_bufferable, /*tp_traverse*/
  __pyx_tp_clear_7Aeskeys___pyx_scope_struct_6_to_bufferable, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_6_to_bufferable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *__pyx_freelist_7Aeskeys___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_7Aeskeys___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_7Aeskeys___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7Aeskeys___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7Aeskeys___pyx_scope_struct_7_genexpr[--__pyx_freecount_7Aeskeys___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_b);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7Aeskeys___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_7Aeskeys___pyx_scope_struct_7_genexpr[__pyx_freecount_7Aeskeys___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_b) {
    e = (*v)(p->__pyx_v_b, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "Aeskeys.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7Aeskeys___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7Aeskeys___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7Aeskeys___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7Aeskeys___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Aeskeys(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Aeskeys},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Aeskeys",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_AES, __pyx_k_AES, sizeof(__pyx_k_AES), 0, 0, 1, 1},
  {&__pyx_n_s_AESBlockModeOfOperation, __pyx_k_AESBlockModeOfOperation, sizeof(__pyx_k_AESBlockModeOfOperation), 0, 0, 1, 1},
  {&__pyx_n_s_AESBlockModeOfOperation___init, __pyx_k_AESBlockModeOfOperation___init, sizeof(__pyx_k_AESBlockModeOfOperation___init), 0, 0, 1, 1},
  {&__pyx_n_s_AESBlockModeOfOperation_decrypt, __pyx_k_AESBlockModeOfOperation_decrypt, sizeof(__pyx_k_AESBlockModeOfOperation_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AESBlockModeOfOperation_encrypt, __pyx_k_AESBlockModeOfOperation_encrypt, sizeof(__pyx_k_AESBlockModeOfOperation_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AESSegmentModeOfOperation, __pyx_k_AESSegmentModeOfOperation, sizeof(__pyx_k_AESSegmentModeOfOperation), 0, 0, 1, 1},
  {&__pyx_n_s_AESStreamModeOfOperation, __pyx_k_AESStreamModeOfOperation, sizeof(__pyx_k_AESStreamModeOfOperation), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CBC, __pyx_k_AES_CBC, sizeof(__pyx_k_AES_CBC), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CBC___init, __pyx_k_AES_CBC___init, sizeof(__pyx_k_AES_CBC___init), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CBC_decrypt, __pyx_k_AES_CBC_decrypt, sizeof(__pyx_k_AES_CBC_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CBC_encrypt, __pyx_k_AES_CBC_encrypt, sizeof(__pyx_k_AES_CBC_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CFB, __pyx_k_AES_CFB, sizeof(__pyx_k_AES_CFB), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CFB___init, __pyx_k_AES_CFB___init, sizeof(__pyx_k_AES_CFB___init), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CFB_decrypt, __pyx_k_AES_CFB_decrypt, sizeof(__pyx_k_AES_CFB_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CFB_encrypt, __pyx_k_AES_CFB_encrypt, sizeof(__pyx_k_AES_CFB_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CFB_lambda, __pyx_k_AES_CFB_lambda, sizeof(__pyx_k_AES_CFB_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CTR, __pyx_k_AES_CTR, sizeof(__pyx_k_AES_CTR), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CTR___init, __pyx_k_AES_CTR___init, sizeof(__pyx_k_AES_CTR___init), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CTR_decrypt, __pyx_k_AES_CTR_decrypt, sizeof(__pyx_k_AES_CTR_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_CTR_encrypt, __pyx_k_AES_CTR_encrypt, sizeof(__pyx_k_AES_CTR_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_ECB, __pyx_k_AES_ECB, sizeof(__pyx_k_AES_ECB), 0, 0, 1, 1},
  {&__pyx_n_s_AES_ECB_decrypt, __pyx_k_AES_ECB_decrypt, sizeof(__pyx_k_AES_ECB_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_ECB_encrypt, __pyx_k_AES_ECB_encrypt, sizeof(__pyx_k_AES_ECB_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_OFB, __pyx_k_AES_OFB, sizeof(__pyx_k_AES_OFB), 0, 0, 1, 1},
  {&__pyx_n_s_AES_OFB___init, __pyx_k_AES_OFB___init, sizeof(__pyx_k_AES_OFB___init), 0, 0, 1, 1},
  {&__pyx_n_s_AES_OFB_decrypt, __pyx_k_AES_OFB_decrypt, sizeof(__pyx_k_AES_OFB_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_OFB_encrypt, __pyx_k_AES_OFB_encrypt, sizeof(__pyx_k_AES_OFB_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES___init, __pyx_k_AES___init, sizeof(__pyx_k_AES___init), 0, 0, 1, 1},
  {&__pyx_n_s_AES_decrypt, __pyx_k_AES_decrypt, sizeof(__pyx_k_AES_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AES_encrypt, __pyx_k_AES_encrypt, sizeof(__pyx_k_AES_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_AESoperation, __pyx_k_AESoperation, sizeof(__pyx_k_AESoperation), 0, 0, 1, 1},
  {&__pyx_n_s_Aeskeys, __pyx_k_Aeskeys, sizeof(__pyx_k_Aeskeys), 0, 0, 1, 1},
  {&__pyx_n_s_BLOCK_SIZE, __pyx_k_BLOCK_SIZE, sizeof(__pyx_k_BLOCK_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_BlockFeeder, __pyx_k_BlockFeeder, sizeof(__pyx_k_BlockFeeder), 0, 0, 1, 1},
  {&__pyx_n_s_BlockFeeder___init, __pyx_k_BlockFeeder___init, sizeof(__pyx_k_BlockFeeder___init), 0, 0, 1, 1},
  {&__pyx_n_s_BlockFeeder_feed, __pyx_k_BlockFeeder_feed, sizeof(__pyx_k_BlockFeeder_feed), 0, 0, 1, 1},
  {&__pyx_n_s_Counter, __pyx_k_Counter, sizeof(__pyx_k_Counter), 0, 0, 1, 1},
  {&__pyx_n_s_Counter___init, __pyx_k_Counter___init, sizeof(__pyx_k_Counter___init), 0, 0, 1, 1},
  {&__pyx_n_s_Counter_increment, __pyx_k_Counter_increment, sizeof(__pyx_k_Counter_increment), 0, 0, 1, 1},
  {&__pyx_n_s_Counter_lambda, __pyx_k_Counter_lambda, sizeof(__pyx_k_Counter_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_Decrypter, __pyx_k_Decrypter, sizeof(__pyx_k_Decrypter), 0, 0, 1, 1},
  {&__pyx_n_s_Decrypter___init, __pyx_k_Decrypter___init, sizeof(__pyx_k_Decrypter___init), 0, 0, 1, 1},
  {&__pyx_n_s_Encrypter, __pyx_k_Encrypter, sizeof(__pyx_k_Encrypter), 0, 0, 1, 1},
  {&__pyx_n_s_Encrypter___init, __pyx_k_Encrypter___init, sizeof(__pyx_k_Encrypter___init), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_key_size, __pyx_k_Invalid_key_size, sizeof(__pyx_k_Invalid_key_size), 0, 0, 1, 0},
  {&__pyx_n_s_KC, __pyx_k_KC, sizeof(__pyx_k_KC), 0, 0, 1, 1},
  {&__pyx_n_s_Kd, __pyx_k_Kd, sizeof(__pyx_k_Kd), 0, 0, 1, 1},
  {&__pyx_n_s_Ke, __pyx_k_Ke, sizeof(__pyx_k_Ke), 0, 0, 1, 1},
  {&__pyx_n_s_PADDING_DEFAULT, __pyx_k_PADDING_DEFAULT, sizeof(__pyx_k_PADDING_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_PADDING_NONE, __pyx_k_PADDING_NONE, sizeof(__pyx_k_PADDING_NONE), 0, 0, 1, 1},
  {&__pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_k_PlinePMD_b28e1f46_f395_11ec_9d77, sizeof(__pyx_k_PlinePMD_b28e1f46_f395_11ec_9d77), 0, 0, 1, 0},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_Si, __pyx_k_Si, sizeof(__pyx_k_Si), 0, 0, 1, 1},
  {&__pyx_n_s_T1, __pyx_k_T1, sizeof(__pyx_k_T1), 0, 0, 1, 1},
  {&__pyx_n_s_T2, __pyx_k_T2, sizeof(__pyx_k_T2), 0, 0, 1, 1},
  {&__pyx_n_s_T3, __pyx_k_T3, sizeof(__pyx_k_T3), 0, 0, 1, 1},
  {&__pyx_n_s_T4, __pyx_k_T4, sizeof(__pyx_k_T4), 0, 0, 1, 1},
  {&__pyx_n_s_T5, __pyx_k_T5, sizeof(__pyx_k_T5), 0, 0, 1, 1},
  {&__pyx_n_s_T6, __pyx_k_T6, sizeof(__pyx_k_T6), 0, 0, 1, 1},
  {&__pyx_n_s_T7, __pyx_k_T7, sizeof(__pyx_k_T7), 0, 0, 1, 1},
  {&__pyx_n_s_T8, __pyx_k_T8, sizeof(__pyx_k_T8), 0, 0, 1, 1},
  {&__pyx_n_s_U1, __pyx_k_U1, sizeof(__pyx_k_U1), 0, 0, 1, 1},
  {&__pyx_n_s_U2, __pyx_k_U2, sizeof(__pyx_k_U2), 0, 0, 1, 1},
  {&__pyx_n_s_U3, __pyx_k_U3, sizeof(__pyx_k_U3), 0, 0, 1, 1},
  {&__pyx_n_s_U4, __pyx_k_U4, sizeof(__pyx_k_U4), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_aes, __pyx_k_aes, sizeof(__pyx_k_aes), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_kp_s_already_finished_feeder, __pyx_k_already_finished_feeder, sizeof(__pyx_k_already_finished_feeder), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_append_PKCS7_padding, __pyx_k_append_PKCS7_padding, sizeof(__pyx_k_append_PKCS7_padding), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_binary, __pyx_k_binary, sizeof(__pyx_k_binary), 0, 0, 1, 1},
  {&__pyx_n_s_block_can_consume, __pyx_k_block_can_consume, sizeof(__pyx_k_block_can_consume), 0, 0, 1, 1},
  {&__pyx_n_s_block_final_decrypt, __pyx_k_block_final_decrypt, sizeof(__pyx_k_block_final_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_block_final_encrypt, __pyx_k_block_final_encrypt, sizeof(__pyx_k_block_final_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
  {&__pyx_n_s_buffer, __pyx_k_buffer, sizeof(__pyx_k_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_bytes_to_string, __pyx_k_bytes_to_string, sizeof(__pyx_k_bytes_to_string), 0, 0, 1, 1},
  {&__pyx_n_s_bytes_to_string_locals_genexpr, __pyx_k_bytes_to_string_locals_genexpr, sizeof(__pyx_k_bytes_to_string_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_can_consume, __pyx_k_can_consume, sizeof(__pyx_k_can_consume), 0, 0, 1, 1},
  {&__pyx_n_s_can_consume_2, __pyx_k_can_consume_2, sizeof(__pyx_k_can_consume_2), 0, 0, 1, 1},
  {&__pyx_n_s_cbc, __pyx_k_cbc, sizeof(__pyx_k_cbc), 0, 0, 1, 1},
  {&__pyx_n_s_cfb, __pyx_k_cfb, sizeof(__pyx_k_cfb), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 0, 0, 1, 1},
  {&__pyx_n_s_cipher_segment, __pyx_k_cipher_segment, sizeof(__pyx_k_cipher_segment), 0, 0, 1, 1},
  {&__pyx_n_s_cipherblock, __pyx_k_cipherblock, sizeof(__pyx_k_cipherblock), 0, 0, 1, 1},
  {&__pyx_n_s_cipherbyte, __pyx_k_cipherbyte, sizeof(__pyx_k_cipherbyte), 0, 0, 1, 1},
  {&__pyx_n_s_ciphertext, __pyx_k_ciphertext, sizeof(__pyx_k_ciphertext), 0, 0, 1, 1},
  {&__pyx_kp_s_ciphertext_block_must_be_16_byte, __pyx_k_ciphertext_block_must_be_16_byte, sizeof(__pyx_k_ciphertext_block_must_be_16_byte), 0, 0, 1, 0},
  {&__pyx_kp_s_ciphertext_block_must_be_a_multi, __pyx_k_ciphertext_block_must_be_a_multi, sizeof(__pyx_k_ciphertext_block_must_be_a_multi), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_compact_word, __pyx_k_compact_word, sizeof(__pyx_k_compact_word), 0, 0, 1, 1},
  {&__pyx_n_s_concat_list, __pyx_k_concat_list, sizeof(__pyx_k_concat_list), 0, 0, 1, 1},
  {&__pyx_n_s_converted, __pyx_k_converted, sizeof(__pyx_k_converted), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_counter, __pyx_k_counter, sizeof(__pyx_k_counter), 0, 0, 1, 1},
  {&__pyx_n_s_counter_2, __pyx_k_counter_2, sizeof(__pyx_k_counter_2), 0, 0, 1, 1},
  {&__pyx_n_s_crypttext, __pyx_k_crypttext, sizeof(__pyx_k_crypttext), 0, 0, 1, 1},
  {&__pyx_n_s_ctr, __pyx_k_ctr, sizeof(__pyx_k_ctr), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decrypt, __pyx_k_decrypt, sizeof(__pyx_k_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_decrypt_stream, __pyx_k_decrypt_stream, sizeof(__pyx_k_decrypt_stream), 0, 0, 1, 1},
  {&__pyx_n_s_decrypted, __pyx_k_decrypted, sizeof(__pyx_k_decrypted), 0, 0, 1, 1},
  {&__pyx_n_s_decrypter, __pyx_k_decrypter, sizeof(__pyx_k_decrypter), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_ecb, __pyx_k_ecb, sizeof(__pyx_k_ecb), 0, 0, 1, 1},
  {&__pyx_n_s_encrypt, __pyx_k_encrypt, sizeof(__pyx_k_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_encrypt_stream, __pyx_k_encrypt_stream, sizeof(__pyx_k_encrypt_stream), 0, 0, 1, 1},
  {&__pyx_n_s_encrypted, __pyx_k_encrypted, sizeof(__pyx_k_encrypted), 0, 0, 1, 1},
  {&__pyx_n_s_encrypter, __pyx_k_encrypter, sizeof(__pyx_k_encrypter), 0, 0, 1, 1},
  {&__pyx_n_s_faux_padding, __pyx_k_faux_padding, sizeof(__pyx_k_faux_padding), 0, 0, 1, 1},
  {&__pyx_n_s_feed, __pyx_k_feed, sizeof(__pyx_k_feed), 0, 0, 1, 1},
  {&__pyx_n_s_feed_2, __pyx_k_feed_2, sizeof(__pyx_k_feed_2), 0, 0, 1, 1},
  {&__pyx_n_s_feed_stream, __pyx_k_feed_stream, sizeof(__pyx_k_feed_stream), 0, 0, 1, 1},
  {&__pyx_n_s_feeder, __pyx_k_feeder, sizeof(__pyx_k_feeder), 0, 0, 1, 1},
  {&__pyx_n_s_final, __pyx_k_final, sizeof(__pyx_k_final), 0, 0, 1, 1},
  {&__pyx_n_s_final_2, __pyx_k_final_2, sizeof(__pyx_k_final_2), 0, 0, 1, 1},
  {&__pyx_n_s_final_decrypt, __pyx_k_final_decrypt, sizeof(__pyx_k_final_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_final_encrypt, __pyx_k_final_encrypt, sizeof(__pyx_k_final_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_byte, __pyx_k_get_byte, sizeof(__pyx_k_get_byte), 0, 0, 1, 1},
  {&__pyx_kp_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 0},
  {&__pyx_n_s_i_2, __pyx_k_i_2, sizeof(__pyx_k_i_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_stream, __pyx_k_in_stream, sizeof(__pyx_k_in_stream), 0, 0, 1, 1},
  {&__pyx_n_s_increment, __pyx_k_increment, sizeof(__pyx_k_increment), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initial_value, __pyx_k_initial_value, sizeof(__pyx_k_initial_value), 0, 0, 1, 1},
  {&__pyx_kp_s_initialization_vector_must_be_16, __pyx_k_initialization_vector_must_be_16, sizeof(__pyx_k_initialization_vector_must_be_16), 0, 0, 1, 0},
  {&__pyx_kp_s_invalid_data_length_for_final_bl, __pyx_k_invalid_data_length_for_final_bl, sizeof(__pyx_k_invalid_data_length_for_final_bl), 0, 0, 1, 0},
  {&__pyx_kp_s_invalid_length, __pyx_k_invalid_length, sizeof(__pyx_k_invalid_length), 0, 0, 1, 0},
  {&__pyx_kp_s_invalid_padding_byte, __pyx_k_invalid_padding_byte, sizeof(__pyx_k_invalid_padding_byte), 0, 0, 1, 0},
  {&__pyx_kp_s_invalid_padding_option, __pyx_k_invalid_padding_option, sizeof(__pyx_k_invalid_padding_option), 0, 0, 1, 0},
  {&__pyx_kp_s_invalid_padding_option_2, __pyx_k_invalid_padding_option_2, sizeof(__pyx_k_invalid_padding_option_2), 0, 0, 1, 0},
  {&__pyx_n_s_iv, __pyx_k_iv, sizeof(__pyx_k_iv), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_last_cipherblock, __pyx_k_last_cipherblock, sizeof(__pyx_k_last_cipherblock), 0, 0, 1, 1},
  {&__pyx_n_s_last_precipherblock, __pyx_k_last_precipherblock, sizeof(__pyx_k_last_precipherblock), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mode_2, __pyx_k_mode_2, sizeof(__pyx_k_mode_2), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_kp_s_not_implemented, __pyx_k_not_implemented, sizeof(__pyx_k_not_implemented), 0, 0, 1, 0},
  {&__pyx_n_s_number_of_rounds, __pyx_k_number_of_rounds, sizeof(__pyx_k_number_of_rounds), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_ofb, __pyx_k_ofb, sizeof(__pyx_k_ofb), 0, 0, 1, 1},
  {&__pyx_n_s_out_stream, __pyx_k_out_stream, sizeof(__pyx_k_out_stream), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pad, __pyx_k_pad, sizeof(__pyx_k_pad), 0, 0, 1, 1},
  {&__pyx_n_s_padded, __pyx_k_padded, sizeof(__pyx_k_padded), 0, 0, 1, 1},
  {&__pyx_n_s_padding, __pyx_k_padding, sizeof(__pyx_k_padding), 0, 0, 1, 1},
  {&__pyx_n_s_padding_2, __pyx_k_padding_2, sizeof(__pyx_k_padding_2), 0, 0, 1, 1},
  {&__pyx_n_s_plaintext, __pyx_k_plaintext, sizeof(__pyx_k_plaintext), 0, 0, 1, 1},
  {&__pyx_kp_s_plaintext_block_must_be_16_bytes, __pyx_k_plaintext_block_must_be_16_bytes, sizeof(__pyx_k_plaintext_block_must_be_16_bytes), 0, 0, 1, 0},
  {&__pyx_kp_s_plaintext_block_must_be_a_multip, __pyx_k_plaintext_block_must_be_a_multip, sizeof(__pyx_k_plaintext_block_must_be_a_multip), 0, 0, 1, 0},
  {&__pyx_n_s_plaintext_segment, __pyx_k_plaintext_segment, sizeof(__pyx_k_plaintext_segment), 0, 0, 1, 1},
  {&__pyx_n_s_pop, __pyx_k_pop, sizeof(__pyx_k_pop), 0, 0, 1, 1},
  {&__pyx_n_s_precipherblock, __pyx_k_precipherblock, sizeof(__pyx_k_precipherblock), 0, 0, 1, 1},
  {&__pyx_n_s_precipherbyte, __pyx_k_precipherbyte, sizeof(__pyx_k_precipherbyte), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rcon, __pyx_k_rcon, sizeof(__pyx_k_rcon), 0, 0, 1, 1},
  {&__pyx_n_s_rconpointer, __pyx_k_rconpointer, sizeof(__pyx_k_rconpointer), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_remaining_block, __pyx_k_remaining_block, sizeof(__pyx_k_remaining_block), 0, 0, 1, 1},
  {&__pyx_n_s_remaining_counter, __pyx_k_remaining_counter, sizeof(__pyx_k_remaining_counter), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_round_key_count, __pyx_k_round_key_count, sizeof(__pyx_k_round_key_count), 0, 0, 1, 1},
  {&__pyx_n_s_rounds, __pyx_k_rounds, sizeof(__pyx_k_rounds), 0, 0, 1, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_n_s_s3, __pyx_k_s3, sizeof(__pyx_k_s3), 0, 0, 1, 1},
  {&__pyx_n_s_segment_bytes, __pyx_k_segment_bytes, sizeof(__pyx_k_segment_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_segment_bytes_2, __pyx_k_segment_bytes_2, sizeof(__pyx_k_segment_bytes_2), 0, 0, 1, 1},
  {&__pyx_n_s_segment_can_consume, __pyx_k_segment_can_consume, sizeof(__pyx_k_segment_can_consume), 0, 0, 1, 1},
  {&__pyx_n_s_segment_final_decrypt, __pyx_k_segment_final_decrypt, sizeof(__pyx_k_segment_final_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_segment_final_encrypt, __pyx_k_segment_final_encrypt, sizeof(__pyx_k_segment_final_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_segment_size, __pyx_k_segment_size, sizeof(__pyx_k_segment_size), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_shift_register, __pyx_k_shift_register, sizeof(__pyx_k_shift_register), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_stream_can_consume, __pyx_k_stream_can_consume, sizeof(__pyx_k_stream_can_consume), 0, 0, 1, 1},
  {&__pyx_n_s_stream_final_decrypt, __pyx_k_stream_final_decrypt, sizeof(__pyx_k_stream_final_decrypt), 0, 0, 1, 1},
  {&__pyx_n_s_stream_final_encrypt, __pyx_k_stream_final_encrypt, sizeof(__pyx_k_stream_final_encrypt), 0, 0, 1, 1},
  {&__pyx_n_s_string_to_bytes, __pyx_k_string_to_bytes, sizeof(__pyx_k_string_to_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_string_to_bytes_locals_genexpr, __pyx_k_string_to_bytes_locals_genexpr, sizeof(__pyx_k_string_to_bytes_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_strip_PKCS7_padding, __pyx_k_strip_PKCS7_padding, sizeof(__pyx_k_strip_PKCS7_padding), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tk, __pyx_k_tk, sizeof(__pyx_k_tk), 0, 0, 1, 1},
  {&__pyx_n_s_to_bufferable, __pyx_k_to_bufferable, sizeof(__pyx_k_to_bufferable), 0, 0, 1, 1},
  {&__pyx_n_s_to_bufferable_locals_genexpr, __pyx_k_to_bufferable_locals_genexpr, sizeof(__pyx_k_to_bufferable_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_tt, __pyx_k_tt, sizeof(__pyx_k_tt), 0, 0, 1, 1},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
  {&__pyx_n_s_util__get_byte, __pyx_k_util__get_byte, sizeof(__pyx_k_util__get_byte), 0, 0, 1, 1},
  {&__pyx_n_s_util_append_PKCS7_padding, __pyx_k_util_append_PKCS7_padding, sizeof(__pyx_k_util_append_PKCS7_padding), 0, 0, 1, 1},
  {&__pyx_n_s_util_strip_PKCS7_padding, __pyx_k_util_strip_PKCS7_padding, sizeof(__pyx_k_util_strip_PKCS7_padding), 0, 0, 1, 1},
  {&__pyx_n_s_util_to_bufferable, __pyx_k_util_to_bufferable, sizeof(__pyx_k_util_to_bufferable), 0, 0, 1, 1},
  {&__pyx_n_s_util_to_bufferable_locals_genexp, __pyx_k_util_to_bufferable_locals_genexp, sizeof(__pyx_k_util_to_bufferable_locals_genexp), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_kp_s_wrong_block_length, __pyx_k_wrong_block_length, sizeof(__pyx_k_wrong_block_length), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xor_segment, __pyx_k_xor_segment, sizeof(__pyx_k_xor_segment), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 302, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "Aeskeys.pyx":88
 * 
 *         if len(key) not in (16, 24, 32):
 *             raise ValueError('Invalid key size ><')             # <<<<<<<<<<<<<<
 * 
 *         rounds = self.number_of_rounds[len(key)]
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Invalid_key_size); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "Aeskeys.pyx":150
 *         # Inverse-Cipher-ify the decryption round key (fips-197 section 5.3)
 *         for r in xrange(1, rounds):
 *             for j in xrange(0, 4):             # <<<<<<<<<<<<<<
 *                 tt = self._Kd[r][j]
 *                 self._Kd[r][j] = (self.U1[(tt >> 24) & 0xFF] ^
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_4); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "Aeskeys.pyx":160
 * 
 *         if len(plaintext) != 16:
 *             raise ValueError('wrong block length ><')             # <<<<<<<<<<<<<<
 * 
 *         rounds = len(self._Ke) - 1
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_wrong_block_length); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "Aeskeys.pyx":229
 * 
 *         # Convert the value into an array of bytes long ~
 *         self._counter = [ ((initial_value >> i) % 256) for i in xrange(128 - 8, -1, -8) ]             # <<<<<<<<<<<<<<
 * 
 *     value = property(lambda s: s._counter)
 */
  __pyx_tuple__5 = PyTuple_Pack(3, __pyx_int_120, __pyx_int_neg_1, __pyx_int_neg_8); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "Aeskeys.pyx":253
 * 
 *     def decrypt(self, ciphertext):
 *         raise Exception('not implemented ~')             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_not_implemented); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "Aeskeys.pyx":291
 *             self._last_cipherblock = [ 0 ] * 16
 *         elif len(iv) != 16:
 *             raise ValueError('initialization vector must be 16 bytes ><')             # <<<<<<<<<<<<<<
 *         else:
 *             self._last_cipherblock = _string_to_bytes(iv)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_initialization_vector_must_be_16); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "Aeskeys.pyx":339
 *     def encrypt(self, plaintext):
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')             # <<<<<<<<<<<<<<
 * 
 *         plaintext = _string_to_bytes(plaintext)
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_plaintext_block_must_be_a_multip); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "Aeskeys.pyx":359
 *     def decrypt(self, ciphertext):
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')             # <<<<<<<<<<<<<<
 * 
 *         ciphertext = _string_to_bytes(ciphertext)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_ciphertext_block_must_be_a_multi); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "Aeskeys.pyx":468
 *     elif padding == PADDING_NONE:
 *         if len(data) != 16:
 *             raise Exception('invalid data length for final block ^^')             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception('invalid padding option ^^')
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_invalid_data_length_for_final_bl); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "Aeskeys.pyx":470
 *             raise Exception('invalid data length for final block ^^')
 *     else:
 *         raise Exception('invalid padding option ^^')             # <<<<<<<<<<<<<<
 * 
 *     if len(data) == 32:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_invalid_padding_option); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "Aeskeys.pyx":473
 * 
 *     if len(data) == 32:
 *         return self.encrypt(data[:16]) + self.encrypt(data[16:])             # <<<<<<<<<<<<<<
 * 
 *     return self.encrypt(data)
 */
  __pyx_slice__13 = PySlice_New(Py_None, __pyx_int_16, Py_None); if (unlikely(!__pyx_slice__13)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__13);
  __Pyx_GIVEREF(__pyx_slice__13);
  __pyx_slice__14 = PySlice_New(__pyx_int_16, Py_None, Py_None); if (unlikely(!__pyx_slice__14)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__14);
  __Pyx_GIVEREF(__pyx_slice__14);

  /* "Aeskeys.pyx":501
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')             # <<<<<<<<<<<<<<
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_invalid_padding_option_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "Aeskeys.pyx":503
 *         raise Exception('invalid padding option ><')
 * 
 *     faux_padding = (chr(0) * (self.segment_bytes - (len(data) % self.segment_bytes)))             # <<<<<<<<<<<<<<
 *     padded = data + to_bufferable(faux_padding)
 *     return self.encrypt(padded)[:len(data)]
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "Aeskeys.pyx":556
 * 
 *         if self._buffer is None:
 *             raise ValueError('already finished feeder ~')             # <<<<<<<<<<<<<<
 * 
 *         if data is None:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_already_finished_feeder); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "Aeskeys.pyx":640
 *     def strip_PKCS7_padding(data):
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")             # <<<<<<<<<<<<<<
 * 
 *         pad = _get_byte(data[-1])
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_invalid_length); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "Aeskeys.pyx":645
 * 
 *         if pad > 16:
 *             raise ValueError("invalid padding byte ~")             # <<<<<<<<<<<<<<
 * 
 *         return data[:-pad]
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_invalid_padding_byte); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "Aeskeys.pyx":19
 * 
 * 
 * def _compact_word(word):             # <<<<<<<<<<<<<<
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_word); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_compact_word, 19, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 19, __pyx_L1_error)

  /* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(3, __pyx_n_s_text, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_string_to_bytes, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(3, __pyx_n_s_binary, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_bytes_to_string, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "Aeskeys.pyx":28
 *     return "".join(chr(b) for b in binary)
 * 
 * def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *     return a + b
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_concat_list, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "Aeskeys.pyx":36
 *     xrange = range
 * 
 *     def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *         if isinstance(text, bytes):
 *             return text
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_text, __pyx_n_s_c); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_string_to_bytes, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "Aeskeys.pyx":41
 *         return [ord(c) for c in text]
 * 
 *     def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *         return bytes(binary)
 * 
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_s_binary); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_bytes_to_string, 41, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 41, __pyx_L1_error)

  /* "Aeskeys.pyx":44
 *         return bytes(binary)
 * 
 *     def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *         return a + bytes(b)
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_concat_list, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 44, __pyx_L1_error)

  /* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_n_s_binary, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_to_bufferable, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "Aeskeys.pyx":52
 *         return bytes(ord(b) for b in binary)
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_n_s_c); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_get_byte, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 52, __pyx_L1_error)

  /* "Aeskeys.pyx":55
 *         return c
 * 
 * class AES(object):             # <<<<<<<<<<<<<<
 * 
 *     # Number of rounds by keysize ~
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "Aeskeys.pyx":85
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 * 
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         if len(key) not in (16, 24, 32):
 */
  __pyx_tuple__49 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_rounds, __pyx_n_s_round_key_count, __pyx_n_s_KC, __pyx_n_s_tk, __pyx_n_s_i_2, __pyx_n_s_rconpointer, __pyx_n_s_t, __pyx_n_s_tt, __pyx_n_s_j, __pyx_n_s_r); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 85, __pyx_L1_error)

  /* "Aeskeys.pyx":157
 *                                   self.U4[ tt        & 0xFF])
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 * 
 *         if len(plaintext) != 16:
 */
  __pyx_tuple__51 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_plaintext, __pyx_n_s_rounds, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_s3, __pyx_n_s_a, __pyx_n_s_t, __pyx_n_s_r, __pyx_n_s_i_2, __pyx_n_s_result, __pyx_n_s_tt); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(2, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 157, __pyx_L1_error)

  /* "Aeskeys.pyx":190
 *         return result
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 * 
 *         if len(ciphertext) != 16:
 */
  __pyx_tuple__53 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_ciphertext, __pyx_n_s_rounds, __pyx_n_s_s1, __pyx_n_s_s2, __pyx_n_s_s3, __pyx_n_s_a, __pyx_n_s_t, __pyx_n_s_r, __pyx_n_s_i_2, __pyx_n_s_result, __pyx_n_s_tt); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 190, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 190, __pyx_L1_error)

  /* "Aeskeys.pyx":224
 * 
 * 
 * class Counter(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, initial_value = 1):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "Aeskeys.pyx":226
 * class Counter(object):
 * 
 *     def __init__(self, initial_value = 1):             # <<<<<<<<<<<<<<
 * 
 *         # Convert the value into an array of bytes long ~
 */
  __pyx_tuple__56 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_initial_value, __pyx_n_s_i_2); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_tuple__58 = PyTuple_Pack(1, ((PyObject *)__pyx_int_1)); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "Aeskeys.pyx":233
 *     value = property(lambda s: s._counter)
 * 
 *     def increment(self):             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i_2); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_increment, 233, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 233, __pyx_L1_error)

  /* "Aeskeys.pyx":248
 * 
 * 
 * class AESBlockModeOfOperation(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, key):
 *         self._aes = AES(key)
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "Aeskeys.pyx":249
 * 
 * class AESBlockModeOfOperation(object):
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 *         self._aes = AES(key)
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_key); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "Aeskeys.pyx":252
 *         self._aes = AES(key)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ciphertext); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 252, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 252, __pyx_L1_error)

  /* "Aeskeys.pyx":255
 *         raise Exception('not implemented ~')
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_plaintext); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 255, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 255, __pyx_L1_error)

  /* "Aeskeys.pyx":269
 * class AES_ECB(AESBlockModeOfOperation):
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_plaintext); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 269, __pyx_L1_error)

  /* "Aeskeys.pyx":276
 *         return _bytes_to_string(self._aes.encrypt(plaintext))
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ciphertext); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 276, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 276, __pyx_L1_error)

  /* "Aeskeys.pyx":287
 * class AES_CBC(AESBlockModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_iv); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_tuple__74 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "Aeskeys.pyx":297
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */
  __pyx_tuple__75 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_plaintext, __pyx_n_s_precipherblock, __pyx_n_s_p, __pyx_n_s_l); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 297, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 297, __pyx_L1_error)

  /* "Aeskeys.pyx":307
 *         return _bytes_to_string(self._last_cipherblock)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */
  __pyx_tuple__77 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_ciphertext, __pyx_n_s_cipherblock, __pyx_n_s_plaintext, __pyx_n_s_p, __pyx_n_s_l); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 307, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 307, __pyx_L1_error)

  /* "Aeskeys.pyx":321
 * class AES_CFB(AESSegmentModeOfOperation):
 * 
 *     def __init__(self, key, iv, segment_size = 1):             # <<<<<<<<<<<<<<
 *         if segment_size == 0: segment_size = 1
 * 
 */
  __pyx_tuple__79 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_iv, __pyx_n_s_segment_size); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 321, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 321, __pyx_L1_error)
  __pyx_tuple__81 = PyTuple_Pack(1, ((PyObject *)__pyx_int_1)); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "Aeskeys.pyx":337
 *     segment_bytes = property(lambda s: s._segment_bytes)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 */
  __pyx_tuple__82 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_plaintext, __pyx_n_s_encrypted, __pyx_n_s_i_2, __pyx_n_s_plaintext_segment, __pyx_n_s_xor_segment, __pyx_n_s_cipher_segment, __pyx_n_s_p, __pyx_n_s_x); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 337, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 337, __pyx_L1_error)

  /* "Aeskeys.pyx":357
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 */
  __pyx_tuple__84 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_ciphertext, __pyx_n_s_decrypted, __pyx_n_s_i_2, __pyx_n_s_cipher_segment, __pyx_n_s_xor_segment, __pyx_n_s_plaintext_segment, __pyx_n_s_p, __pyx_n_s_x); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 357, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 357, __pyx_L1_error)

  /* "Aeskeys.pyx":381
 * class AES_OFB(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 */
  __pyx_tuple__86 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_iv); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 381, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 381, __pyx_L1_error)
  __pyx_tuple__88 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "Aeskeys.pyx":393
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 */
  __pyx_tuple__89 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_plaintext, __pyx_n_s_encrypted, __pyx_n_s_p, __pyx_n_s_precipherbyte, __pyx_n_s_cipherbyte); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 393, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 393, __pyx_L1_error)

  /* "Aeskeys.pyx":406
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(ciphertext)
 * 
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_ciphertext); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "Aeskeys.pyx":413
 * class AES_CTR(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, counter = None):             # <<<<<<<<<<<<<<
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_counter_2); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_tuple__95 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "Aeskeys.pyx":422
 *         self._remaining_counter = [ ]
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 */
  __pyx_tuple__96 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_plaintext, __pyx_n_s_encrypted, __pyx_n_s_p, __pyx_n_s_c); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt, 422, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 422, __pyx_L1_error)

  /* "Aeskeys.pyx":434
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, crypttext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(crypttext)
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_crypttext); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt, 434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 434, __pyx_L1_error)

  /* "Aeskeys.pyx":457
 * # ECB and CBC are block-only ciphers
 * 
 * def _block_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     if size >= 16: return 16
 *     return 0
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_size); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_block_can_consume, 457, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 457, __pyx_L1_error)

  /* "Aeskeys.pyx":462
 * 
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         data = util.append_PKCS7_padding(data)
 */
  __pyx_tuple__102 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_block_final_encrypt, 462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 462, __pyx_L1_error)

  /* "Aeskeys.pyx":478
 * 
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_block_final_decrypt, 478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "Aeskeys.pyx":495
 * 
 * 
 * def _segment_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return self.segment_bytes * int(size // self.segment_bytes)
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_size); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_segment_can_consume, 495, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 495, __pyx_L1_error)

  /* "Aeskeys.pyx":499
 * 
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */
  __pyx_tuple__108 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding, __pyx_n_s_faux_padding, __pyx_n_s_padded); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_segment_final_encrypt, 499, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 499, __pyx_L1_error)

  /* "Aeskeys.pyx":507
 *     return self.encrypt(padded)[:len(data)]
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */
  __pyx_tuple__110 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding, __pyx_n_s_faux_padding, __pyx_n_s_padded); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_segment_final_decrypt, 507, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 507, __pyx_L1_error)

  /* "Aeskeys.pyx":523
 * # OFB and CTR are stream ciphers
 * 
 * def _stream_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return size
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_size); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_stream_can_consume, 523, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 523, __pyx_L1_error)

  /* "Aeskeys.pyx":526
 *     return size
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */
  __pyx_tuple__114 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_stream_final_encrypt, 526, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 526, __pyx_L1_error)

  /* "Aeskeys.pyx":532
 *     return self.encrypt(data)
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */
  __pyx_tuple__116 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_stream_final_decrypt, 532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 532, __pyx_L1_error)

  /* "Aeskeys.pyx":544
 * 
 * 
 * class BlockFeeder(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "Aeskeys.pyx":546
 * class BlockFeeder(object):
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         self._mode = mode
 *         self._feed = feed
 */
  __pyx_tuple__119 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_mode, __pyx_n_s_feed, __pyx_n_s_final, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 546, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 546, __pyx_L1_error)

  /* "Aeskeys.pyx":553
 *         self._padding = padding
 * 
 *     def feed(self, data = None):             # <<<<<<<<<<<<<<
 * 
 *         if self._buffer is None:
 */
  __pyx_tuple__121 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_result, __pyx_n_s_can_consume_2); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_feed, 553, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 553, __pyx_L1_error)
  __pyx_tuple__123 = PyTuple_Pack(1, ((PyObject *)Py_None)); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "Aeskeys.pyx":578
 * class Encrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.encrypt, mode._final_encrypt, padding)
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_mode, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 578, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 578, __pyx_L1_error)

  /* "Aeskeys.pyx":584
 * class Decrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.decrypt, mode._final_decrypt, padding)
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_mode, __pyx_n_s_padding); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_init, 584, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 584, __pyx_L1_error)

  /* "Aeskeys.pyx":590
 * BLOCK_SIZE = (1 << 13)
 * 
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __pyx_tuple__128 = PyTuple_Pack(6, __pyx_n_s_feeder, __pyx_n_s_in_stream, __pyx_n_s_out_stream, __pyx_n_s_block_size, __pyx_n_s_chunk, __pyx_n_s_converted); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_feed_stream, 590, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 590, __pyx_L1_error)

  /* "Aeskeys.pyx":602
 * 
 * 
 * def encrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     encrypter = Encrypter(mode, padding = padding)
 */
  __pyx_tuple__130 = PyTuple_Pack(6, __pyx_n_s_mode, __pyx_n_s_in_stream, __pyx_n_s_out_stream, __pyx_n_s_block_size, __pyx_n_s_padding, __pyx_n_s_encrypter); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_encrypt_stream, 602, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 602, __pyx_L1_error)

  /* "Aeskeys.pyx":608
 * 
 * 
 * def decrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     decrypter = Decrypter(mode, padding = padding)
 */
  __pyx_tuple__132 = PyTuple_Pack(6, __pyx_n_s_mode, __pyx_n_s_in_stream, __pyx_n_s_out_stream, __pyx_n_s_block_size, __pyx_n_s_padding, __pyx_n_s_decrypter); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_decrypt_stream, 608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 608, __pyx_L1_error)

  /* "Aeskeys.pyx":614
 * 
 * 
 * class util(object):             # <<<<<<<<<<<<<<
 * 
 *     def to_bufferable(binary):
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "Aeskeys.pyx":616
 * class util(object):
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         return binary
 * 
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_n_s_binary); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__135, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_to_bufferable, 616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(0, 616, __pyx_L1_error)

  /* "Aeskeys.pyx":619
 *         return binary
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return ord(c)
 * 
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_n_s_c); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_get_byte, 619, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(0, 619, __pyx_L1_error)

  /* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */
  __pyx_tuple__139 = PyTuple_Pack(3, __pyx_n_s_binary, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_to_bufferable, 626, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 626, __pyx_L1_error)

  /* "Aeskeys.pyx":631
 *             return bytes(ord(b) for b in binary)
 * 
 *         def _get_byte(c):             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_n_s_c); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_get_byte, 631, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 631, __pyx_L1_error)

  /* "Aeskeys.pyx":634
 *             return c
 * 
 *     def append_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         pad = 16 - (len(data) % 16)
 *         return data + to_bufferable(chr(pad) * pad)
 */
  __pyx_tuple__143 = PyTuple_Pack(2, __pyx_n_s_data, __pyx_n_s_pad); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_append_PKCS7_padding, 634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(0, 634, __pyx_L1_error)

  /* "Aeskeys.pyx":638
 *         return data + to_bufferable(chr(pad) * pad)
 * 
 *     def strip_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")
 */
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_n_s_data, __pyx_n_s_pad); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PlinePMD_b28e1f46_f395_11ec_9d77, __pyx_n_s_strip_PKCS7_padding, 638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_17 = PyInt_FromLong(17); if (unlikely(!__pyx_int_17)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_18 = PyInt_FromLong(18); if (unlikely(!__pyx_int_18)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_19 = PyInt_FromLong(19); if (unlikely(!__pyx_int_19)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20); if (unlikely(!__pyx_int_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_21 = PyInt_FromLong(21); if (unlikely(!__pyx_int_21)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_22 = PyInt_FromLong(22); if (unlikely(!__pyx_int_22)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_23 = PyInt_FromLong(23); if (unlikely(!__pyx_int_23)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_24 = PyInt_FromLong(24); if (unlikely(!__pyx_int_24)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_25 = PyInt_FromLong(25); if (unlikely(!__pyx_int_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_26 = PyInt_FromLong(26); if (unlikely(!__pyx_int_26)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_27 = PyInt_FromLong(27); if (unlikely(!__pyx_int_27)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_28 = PyInt_FromLong(28); if (unlikely(!__pyx_int_28)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_29 = PyInt_FromLong(29); if (unlikely(!__pyx_int_29)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_31 = PyInt_FromLong(31); if (unlikely(!__pyx_int_31)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_54 = PyInt_FromLong(54); if (unlikely(!__pyx_int_54)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_55 = PyInt_FromLong(55); if (unlikely(!__pyx_int_55)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_57 = PyInt_FromLong(57); if (unlikely(!__pyx_int_57)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_58 = PyInt_FromLong(58); if (unlikely(!__pyx_int_58)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_59 = PyInt_FromLong(59); if (unlikely(!__pyx_int_59)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_63 = PyInt_FromLong(63); if (unlikely(!__pyx_int_63)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65 = PyInt_FromLong(65); if (unlikely(!__pyx_int_65)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_72 = PyInt_FromLong(72); if (unlikely(!__pyx_int_72)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_73 = PyInt_FromLong(73); if (unlikely(!__pyx_int_73)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_74 = PyInt_FromLong(74); if (unlikely(!__pyx_int_74)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_75 = PyInt_FromLong(75); if (unlikely(!__pyx_int_75)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77 = PyInt_FromLong(77); if (unlikely(!__pyx_int_77)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_79 = PyInt_FromLong(79); if (unlikely(!__pyx_int_79)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_82 = PyInt_FromLong(82); if (unlikely(!__pyx_int_82)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_83 = PyInt_FromLong(83); if (unlikely(!__pyx_int_83)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_84 = PyInt_FromLong(84); if (unlikely(!__pyx_int_84)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_85 = PyInt_FromLong(85); if (unlikely(!__pyx_int_85)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_86 = PyInt_FromLong(86); if (unlikely(!__pyx_int_86)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_87 = PyInt_FromLong(87); if (unlikely(!__pyx_int_87)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_88 = PyInt_FromLong(88); if (unlikely(!__pyx_int_88)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_89 = PyInt_FromLong(89); if (unlikely(!__pyx_int_89)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_91 = PyInt_FromLong(91); if (unlikely(!__pyx_int_91)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_92 = PyInt_FromLong(92); if (unlikely(!__pyx_int_92)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_93 = PyInt_FromLong(93); if (unlikely(!__pyx_int_93)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_94 = PyInt_FromLong(94); if (unlikely(!__pyx_int_94)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_95 = PyInt_FromLong(95); if (unlikely(!__pyx_int_95)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_97 = PyInt_FromLong(97); if (unlikely(!__pyx_int_97)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_99 = PyInt_FromLong(99); if (unlikely(!__pyx_int_99)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101 = PyInt_FromLong(101); if (unlikely(!__pyx_int_101)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_102 = PyInt_FromLong(102); if (unlikely(!__pyx_int_102)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_103 = PyInt_FromLong(103); if (unlikely(!__pyx_int_103)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_104 = PyInt_FromLong(104); if (unlikely(!__pyx_int_104)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_105 = PyInt_FromLong(105); if (unlikely(!__pyx_int_105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_106 = PyInt_FromLong(106); if (unlikely(!__pyx_int_106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_107 = PyInt_FromLong(107); if (unlikely(!__pyx_int_107)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_108 = PyInt_FromLong(108); if (unlikely(!__pyx_int_108)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_109 = PyInt_FromLong(109); if (unlikely(!__pyx_int_109)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_110 = PyInt_FromLong(110); if (unlikely(!__pyx_int_110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_111 = PyInt_FromLong(111); if (unlikely(!__pyx_int_111)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_114 = PyInt_FromLong(114); if (unlikely(!__pyx_int_114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_115 = PyInt_FromLong(115); if (unlikely(!__pyx_int_115)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_116 = PyInt_FromLong(116); if (unlikely(!__pyx_int_116)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_117 = PyInt_FromLong(117); if (unlikely(!__pyx_int_117)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_119 = PyInt_FromLong(119); if (unlikely(!__pyx_int_119)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_120 = PyInt_FromLong(120); if (unlikely(!__pyx_int_120)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_121 = PyInt_FromLong(121); if (unlikely(!__pyx_int_121)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_122 = PyInt_FromLong(122); if (unlikely(!__pyx_int_122)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_123 = PyInt_FromLong(123); if (unlikely(!__pyx_int_123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_124 = PyInt_FromLong(124); if (unlikely(!__pyx_int_124)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_125 = PyInt_FromLong(125); if (unlikely(!__pyx_int_125)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126 = PyInt_FromLong(126); if (unlikely(!__pyx_int_126)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_127 = PyInt_FromLong(127); if (unlikely(!__pyx_int_127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_129 = PyInt_FromLong(129); if (unlikely(!__pyx_int_129)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_130 = PyInt_FromLong(130); if (unlikely(!__pyx_int_130)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_131 = PyInt_FromLong(131); if (unlikely(!__pyx_int_131)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_132 = PyInt_FromLong(132); if (unlikely(!__pyx_int_132)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_133 = PyInt_FromLong(133); if (unlikely(!__pyx_int_133)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_134 = PyInt_FromLong(134); if (unlikely(!__pyx_int_134)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_135 = PyInt_FromLong(135); if (unlikely(!__pyx_int_135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136 = PyInt_FromLong(136); if (unlikely(!__pyx_int_136)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_137 = PyInt_FromLong(137); if (unlikely(!__pyx_int_137)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_138 = PyInt_FromLong(138); if (unlikely(!__pyx_int_138)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_139 = PyInt_FromLong(139); if (unlikely(!__pyx_int_139)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_140 = PyInt_FromLong(140); if (unlikely(!__pyx_int_140)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_141 = PyInt_FromLong(141); if (unlikely(!__pyx_int_141)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_142 = PyInt_FromLong(142); if (unlikely(!__pyx_int_142)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_143 = PyInt_FromLong(143); if (unlikely(!__pyx_int_143)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_145 = PyInt_FromLong(145); if (unlikely(!__pyx_int_145)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_146 = PyInt_FromLong(146); if (unlikely(!__pyx_int_146)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_148 = PyInt_FromLong(148); if (unlikely(!__pyx_int_148)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_149 = PyInt_FromLong(149); if (unlikely(!__pyx_int_149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_150 = PyInt_FromLong(150); if (unlikely(!__pyx_int_150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_151 = PyInt_FromLong(151); if (unlikely(!__pyx_int_151)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_152 = PyInt_FromLong(152); if (unlikely(!__pyx_int_152)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_153 = PyInt_FromLong(153); if (unlikely(!__pyx_int_153)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_154 = PyInt_FromLong(154); if (unlikely(!__pyx_int_154)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_155 = PyInt_FromLong(155); if (unlikely(!__pyx_int_155)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_156 = PyInt_FromLong(156); if (unlikely(!__pyx_int_156)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_157 = PyInt_FromLong(157); if (unlikely(!__pyx_int_157)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_158 = PyInt_FromLong(158); if (unlikely(!__pyx_int_158)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159 = PyInt_FromLong(159); if (unlikely(!__pyx_int_159)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_160 = PyInt_FromLong(160); if (unlikely(!__pyx_int_160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_161 = PyInt_FromLong(161); if (unlikely(!__pyx_int_161)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_162 = PyInt_FromLong(162); if (unlikely(!__pyx_int_162)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_163 = PyInt_FromLong(163); if (unlikely(!__pyx_int_163)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_164 = PyInt_FromLong(164); if (unlikely(!__pyx_int_164)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_165 = PyInt_FromLong(165); if (unlikely(!__pyx_int_165)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_166 = PyInt_FromLong(166); if (unlikely(!__pyx_int_166)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_167 = PyInt_FromLong(167); if (unlikely(!__pyx_int_167)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_168 = PyInt_FromLong(168); if (unlikely(!__pyx_int_168)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_169 = PyInt_FromLong(169); if (unlikely(!__pyx_int_169)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_170 = PyInt_FromLong(170); if (unlikely(!__pyx_int_170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_171 = PyInt_FromLong(171); if (unlikely(!__pyx_int_171)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_172 = PyInt_FromLong(172); if (unlikely(!__pyx_int_172)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_173 = PyInt_FromLong(173); if (unlikely(!__pyx_int_173)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_174 = PyInt_FromLong(174); if (unlikely(!__pyx_int_174)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_175 = PyInt_FromLong(175); if (unlikely(!__pyx_int_175)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_176 = PyInt_FromLong(176); if (unlikely(!__pyx_int_176)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_177 = PyInt_FromLong(177); if (unlikely(!__pyx_int_177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_178 = PyInt_FromLong(178); if (unlikely(!__pyx_int_178)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_179 = PyInt_FromLong(179); if (unlikely(!__pyx_int_179)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_180 = PyInt_FromLong(180); if (unlikely(!__pyx_int_180)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_181 = PyInt_FromLong(181); if (unlikely(!__pyx_int_181)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_182 = PyInt_FromLong(182); if (unlikely(!__pyx_int_182)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_183 = PyInt_FromLong(183); if (unlikely(!__pyx_int_183)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184 = PyInt_FromLong(184); if (unlikely(!__pyx_int_184)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_185 = PyInt_FromLong(185); if (unlikely(!__pyx_int_185)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_186 = PyInt_FromLong(186); if (unlikely(!__pyx_int_186)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_187 = PyInt_FromLong(187); if (unlikely(!__pyx_int_187)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_188 = PyInt_FromLong(188); if (unlikely(!__pyx_int_188)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_189 = PyInt_FromLong(189); if (unlikely(!__pyx_int_189)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_190 = PyInt_FromLong(190); if (unlikely(!__pyx_int_190)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_191 = PyInt_FromLong(191); if (unlikely(!__pyx_int_191)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_192 = PyInt_FromLong(192); if (unlikely(!__pyx_int_192)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193 = PyInt_FromLong(193); if (unlikely(!__pyx_int_193)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_194 = PyInt_FromLong(194); if (unlikely(!__pyx_int_194)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_195 = PyInt_FromLong(195); if (unlikely(!__pyx_int_195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_196 = PyInt_FromLong(196); if (unlikely(!__pyx_int_196)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_197 = PyInt_FromLong(197); if (unlikely(!__pyx_int_197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_198 = PyInt_FromLong(198); if (unlikely(!__pyx_int_198)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_199 = PyInt_FromLong(199); if (unlikely(!__pyx_int_199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201 = PyInt_FromLong(201); if (unlikely(!__pyx_int_201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_202 = PyInt_FromLong(202); if (unlikely(!__pyx_int_202)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_203 = PyInt_FromLong(203); if (unlikely(!__pyx_int_203)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_204 = PyInt_FromLong(204); if (unlikely(!__pyx_int_204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_205 = PyInt_FromLong(205); if (unlikely(!__pyx_int_205)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_206 = PyInt_FromLong(206); if (unlikely(!__pyx_int_206)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_207 = PyInt_FromLong(207); if (unlikely(!__pyx_int_207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_208 = PyInt_FromLong(208); if (unlikely(!__pyx_int_208)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_209 = PyInt_FromLong(209); if (unlikely(!__pyx_int_209)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_210 = PyInt_FromLong(210); if (unlikely(!__pyx_int_210)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_211 = PyInt_FromLong(211); if (unlikely(!__pyx_int_211)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_212 = PyInt_FromLong(212); if (unlikely(!__pyx_int_212)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_213 = PyInt_FromLong(213); if (unlikely(!__pyx_int_213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_214 = PyInt_FromLong(214); if (unlikely(!__pyx_int_214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_215 = PyInt_FromLong(215); if (unlikely(!__pyx_int_215)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_216 = PyInt_FromLong(216); if (unlikely(!__pyx_int_216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_217 = PyInt_FromLong(217); if (unlikely(!__pyx_int_217)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218 = PyInt_FromLong(218); if (unlikely(!__pyx_int_218)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_219 = PyInt_FromLong(219); if (unlikely(!__pyx_int_219)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_220 = PyInt_FromLong(220); if (unlikely(!__pyx_int_220)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_221 = PyInt_FromLong(221); if (unlikely(!__pyx_int_221)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222 = PyInt_FromLong(222); if (unlikely(!__pyx_int_222)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_223 = PyInt_FromLong(223); if (unlikely(!__pyx_int_223)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_224 = PyInt_FromLong(224); if (unlikely(!__pyx_int_224)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_225 = PyInt_FromLong(225); if (unlikely(!__pyx_int_225)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_226 = PyInt_FromLong(226); if (unlikely(!__pyx_int_226)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_227 = PyInt_FromLong(227); if (unlikely(!__pyx_int_227)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228 = PyInt_FromLong(228); if (unlikely(!__pyx_int_228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_229 = PyInt_FromLong(229); if (unlikely(!__pyx_int_229)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_230 = PyInt_FromLong(230); if (unlikely(!__pyx_int_230)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_231 = PyInt_FromLong(231); if (unlikely(!__pyx_int_231)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_232 = PyInt_FromLong(232); if (unlikely(!__pyx_int_232)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_233 = PyInt_FromLong(233); if (unlikely(!__pyx_int_233)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_234 = PyInt_FromLong(234); if (unlikely(!__pyx_int_234)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_235 = PyInt_FromLong(235); if (unlikely(!__pyx_int_235)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_236 = PyInt_FromLong(236); if (unlikely(!__pyx_int_236)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_237 = PyInt_FromLong(237); if (unlikely(!__pyx_int_237)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238 = PyInt_FromLong(238); if (unlikely(!__pyx_int_238)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_239 = PyInt_FromLong(239); if (unlikely(!__pyx_int_239)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_240 = PyInt_FromLong(240); if (unlikely(!__pyx_int_240)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_241 = PyInt_FromLong(241); if (unlikely(!__pyx_int_241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_242 = PyInt_FromLong(242); if (unlikely(!__pyx_int_242)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_243 = PyInt_FromLong(243); if (unlikely(!__pyx_int_243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_244 = PyInt_FromLong(244); if (unlikely(!__pyx_int_244)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_245 = PyInt_FromLong(245); if (unlikely(!__pyx_int_245)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_246 = PyInt_FromLong(246); if (unlikely(!__pyx_int_246)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_247 = PyInt_FromLong(247); if (unlikely(!__pyx_int_247)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_248 = PyInt_FromLong(248); if (unlikely(!__pyx_int_248)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_249 = PyInt_FromLong(249); if (unlikely(!__pyx_int_249)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_250 = PyInt_FromLong(250); if (unlikely(!__pyx_int_250)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_251 = PyInt_FromLong(251); if (unlikely(!__pyx_int_251)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252 = PyInt_FromLong(252); if (unlikely(!__pyx_int_252)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_253 = PyInt_FromLong(253); if (unlikely(!__pyx_int_253)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_254 = PyInt_FromLong(254); if (unlikely(!__pyx_int_254)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_256 = PyInt_FromLong(256); if (unlikely(!__pyx_int_256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8192 = PyInt_FromLong(8192); if (unlikely(!__pyx_int_8192)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16843522 = PyInt_FromLong(16843522L); if (unlikely(!__pyx_int_16843522)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16974337 = PyInt_FromLong(16974337L); if (unlikely(!__pyx_int_16974337)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_19308535 = PyInt_FromLong(19308535L); if (unlikely(!__pyx_int_19308535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_24197544 = PyInt_FromLong(24197544L); if (unlikely(!__pyx_int_24197544)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_25965917 = PyInt_FromLong(25965917L); if (unlikely(!__pyx_int_25965917)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_26054028 = PyInt_FromLong(26054028L); if (unlikely(!__pyx_int_26054028)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32283319 = PyInt_FromLong(32283319L); if (unlikely(!__pyx_int_32283319)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33027830 = PyInt_FromLong(33027830L); if (unlikely(!__pyx_int_33027830)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33620227 = PyInt_FromLong(33620227L); if (unlikely(!__pyx_int_33620227)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33687044 = PyInt_FromLong(33687044L); if (unlikely(!__pyx_int_33687044)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33778362 = PyInt_FromLong(33778362L); if (unlikely(!__pyx_int_33778362)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33948674 = PyInt_FromLong(33948674L); if (unlikely(!__pyx_int_33948674)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_38544885 = PyInt_FromLong(38544885L); if (unlikely(!__pyx_int_38544885)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_46346101 = PyInt_FromLong(46346101L); if (unlikely(!__pyx_int_46346101)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_48394827 = PyInt_FromLong(48394827L); if (unlikely(!__pyx_int_48394827)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_49674231 = PyInt_FromLong(49674231L); if (unlikely(!__pyx_int_49674231)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50462977 = PyInt_FromLong(50462977L); if (unlikely(!__pyx_int_50462977)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50529542 = PyInt_FromLong(50529542L); if (unlikely(!__pyx_int_50529542)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50660867 = PyInt_FromLong(50660867L); if (unlikely(!__pyx_int_50660867)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_53458370 = PyInt_FromLong(53458370L); if (unlikely(!__pyx_int_53458370)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_57326082 = PyInt_FromLong(57326082L); if (unlikely(!__pyx_int_57326082)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_59542671 = PyInt_FromLong(59542671L); if (unlikely(!__pyx_int_59542671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_59727847 = PyInt_FromLong(59727847L); if (unlikely(!__pyx_int_59727847)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_59984867 = PyInt_FromLong(59984867L); if (unlikely(!__pyx_int_59984867)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67240454 = PyInt_FromLong(67240454L); if (unlikely(!__pyx_int_67240454)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67374088 = PyInt_FromLong(67374088L); if (unlikely(!__pyx_int_67374088)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67556463 = PyInt_FromLong(67556463L); if (unlikely(!__pyx_int_67556463)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_67897348 = PyInt_FromLong(67897348L); if (unlikely(!__pyx_int_67897348)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77089521 = PyInt_FromLong(77089521L); if (unlikely(!__pyx_int_77089521)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_77422314 = PyInt_FromLong(77422314L); if (unlikely(!__pyx_int_77422314)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_81781910 = PyInt_FromLong(81781910L); if (unlikely(!__pyx_int_81781910)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_82966005 = PyInt_FromLong(82966005L); if (unlikely(!__pyx_int_82966005)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_84217610 = PyInt_FromLong(84217610L); if (unlikely(!__pyx_int_84217610)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_84280067 = PyInt_FromLong(84280067L); if (unlikely(!__pyx_int_84280067)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_84871685 = PyInt_FromLong(84871685L); if (unlikely(!__pyx_int_84871685)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_91341917 = PyInt_FromLong(91341917L); if (unlikely(!__pyx_int_91341917)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_92987698 = PyInt_FromLong(92987698L); if (unlikely(!__pyx_int_92987698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_93294474 = PyInt_FromLong(93294474L); if (unlikely(!__pyx_int_93294474)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_95345982 = PyInt_FromLong(95345982L); if (unlikely(!__pyx_int_95345982)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96392454 = PyInt_FromLong(96392454L); if (unlikely(!__pyx_int_96392454)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100860677 = PyInt_FromLong(100860677L); if (unlikely(!__pyx_int_100860677)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100925954 = PyInt_FromLong(100925954L); if (unlikely(!__pyx_int_100925954)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101039829 = PyInt_FromLong(101039829L); if (unlikely(!__pyx_int_101039829)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101059084 = PyInt_FromLong(101059084L); if (unlikely(!__pyx_int_101059084)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_101321734 = PyInt_FromLong(101321734L); if (unlikely(!__pyx_int_101321734)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_104699613 = PyInt_FromLong(104699613L); if (unlikely(!__pyx_int_104699613)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_106852767 = PyInt_FromLong(106852767L); if (unlikely(!__pyx_int_106852767)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_114585348 = PyInt_FromLong(114585348L); if (unlikely(!__pyx_int_114585348)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_117901582 = PyInt_FromLong(117901582L); if (unlikely(!__pyx_int_117901582)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_118033927 = PyInt_FromLong(118033927L); if (unlikely(!__pyx_int_118033927)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_122466165 = PyInt_FromLong(122466165L); if (unlikely(!__pyx_int_122466165)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126454664 = PyInt_FromLong(126454664L); if (unlikely(!__pyx_int_126454664)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_126783113 = PyInt_FromLong(126783113L); if (unlikely(!__pyx_int_126783113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_129166120 = PyInt_FromLong(129166120L); if (unlikely(!__pyx_int_129166120)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_133361907 = PyInt_FromLong(133361907L); if (unlikely(!__pyx_int_133361907)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_133428468 = PyInt_FromLong(133428468L); if (unlikely(!__pyx_int_133428468)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_134480908 = PyInt_FromLong(134480908L); if (unlikely(!__pyx_int_134480908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_134748176 = PyInt_FromLong(134748176L); if (unlikely(!__pyx_int_134748176)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_135050206 = PyInt_FromLong(135050206L); if (unlikely(!__pyx_int_135050206)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_135794696 = PyInt_FromLong(135794696L); if (unlikely(!__pyx_int_135794696)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136428751 = PyInt_FromLong(136428751L); if (unlikely(!__pyx_int_136428751)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_137073913 = PyInt_FromLong(137073913L); if (unlikely(!__pyx_int_137073913)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_145085239 = PyInt_FromLong(145085239L); if (unlikely(!__pyx_int_145085239)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_150598129 = PyInt_FromLong(150598129L); if (unlikely(!__pyx_int_150598129)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_151591698 = PyInt_FromLong(151591698L); if (unlikely(!__pyx_int_151591698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_151849742 = PyInt_FromLong(151849742L); if (unlikely(!__pyx_int_151849742)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_151914247 = PyInt_FromLong(151914247L); if (unlikely(!__pyx_int_151914247)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_152769033 = PyInt_FromLong(152769033L); if (unlikely(!__pyx_int_152769033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159417987 = PyInt_FromLong(159417987L); if (unlikely(!__pyx_int_159417987)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_160008576 = PyInt_FromLong(160008576L); if (unlikely(!__pyx_int_160008576)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_164439672 = PyInt_FromLong(164439672L); if (unlikely(!__pyx_int_164439672)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_164948639 = PyInt_FromLong(164948639L); if (unlikely(!__pyx_int_164948639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_168101135 = PyInt_FromLong(168101135L); if (unlikely(!__pyx_int_168101135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_168435220 = PyInt_FromLong(168435220L); if (unlikely(!__pyx_int_168435220)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_168560134 = PyInt_FromLong(168560134L); if (unlikely(!__pyx_int_168560134)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_168810852 = PyInt_FromLong(168810852L); if (unlikely(!__pyx_int_168810852)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_169743370 = PyInt_FromLong(169743370L); if (unlikely(!__pyx_int_169743370)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_172466556 = PyInt_FromLong(172466556L); if (unlikely(!__pyx_int_172466556)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_174567692 = PyInt_FromLong(174567692L); if (unlikely(!__pyx_int_174567692)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_182621114 = PyInt_FromLong(182621114L); if (unlikely(!__pyx_int_182621114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_185277718 = PyInt_FromLong(185277718L); if (unlikely(!__pyx_int_185277718)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_185469197 = PyInt_FromLong(185469197L); if (unlikely(!__pyx_int_185469197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_186455563 = PyInt_FromLong(186455563L); if (unlikely(!__pyx_int_186455563)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_188127444 = PyInt_FromLong(188127444L); if (unlikely(!__pyx_int_188127444)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_188821243 = PyInt_FromLong(188821243L); if (unlikely(!__pyx_int_188821243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193195065 = PyInt_FromLong(193195065L); if (unlikely(!__pyx_int_193195065)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193497219 = PyInt_FromLong(193497219L); if (unlikely(!__pyx_int_193497219)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201060592 = PyInt_FromLong(201060592L); if (unlikely(!__pyx_int_201060592)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201721354 = PyInt_FromLong(201721354L); if (unlikely(!__pyx_int_201721354)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201851908 = PyInt_FromLong(201851908L); if (unlikely(!__pyx_int_201851908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_202008497 = PyInt_FromLong(202008497L); if (unlikely(!__pyx_int_202008497)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_202118168 = PyInt_FromLong(202118168L); if (unlikely(!__pyx_int_202118168)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_202643468 = PyInt_FromLong(202643468L); if (unlikely(!__pyx_int_202643468)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_209336225 = PyInt_FromLong(209336225L); if (unlikely(!__pyx_int_209336225)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_213114376 = PyInt_FromLong(213114376L); if (unlikely(!__pyx_int_213114376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_213705253 = PyInt_FromLong(213705253L); if (unlikely(!__pyx_int_213705253)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218828297 = PyInt_FromLong(218828297L); if (unlikely(!__pyx_int_218828297)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_218961690 = PyInt_FromLong(218961690L); if (unlikely(!__pyx_int_218961690)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_219617805 = PyInt_FromLong(219617805L); if (unlikely(!__pyx_int_219617805)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_223377554 = PyInt_FromLong(223377554L); if (unlikely(!__pyx_int_223377554)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_226906860 = PyInt_FromLong(226906860L); if (unlikely(!__pyx_int_226906860)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_227249030 = PyInt_FromLong(227249030L); if (unlikely(!__pyx_int_227249030)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_227885567 = PyInt_FromLong(227885567L); if (unlikely(!__pyx_int_227885567)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_234877682 = PyInt_FromLong(234877682L); if (unlikely(!__pyx_int_234877682)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_235341577 = PyInt_FromLong(235341577L); if (unlikely(!__pyx_int_235341577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_235474187 = PyInt_FromLong(235474187L); if (unlikely(!__pyx_int_235474187)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_235803164 = PyInt_FromLong(235803164L); if (unlikely(!__pyx_int_235803164)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_236067854 = PyInt_FromLong(236067854L); if (unlikely(!__pyx_int_236067854)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_243256656 = PyInt_FromLong(243256656L); if (unlikely(!__pyx_int_243256656)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_244860394 = PyInt_FromLong(244860394L); if (unlikely(!__pyx_int_244860394)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_251524083 = PyInt_FromLong(251524083L); if (unlikely(!__pyx_int_251524083)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_251657213 = PyInt_FromLong(251657213L); if (unlikely(!__pyx_int_251657213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252314885 = PyInt_FromLong(252314885L); if (unlikely(!__pyx_int_252314885)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252645662 = PyInt_FromLong(252645662L); if (unlikely(!__pyx_int_252645662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252780047 = PyInt_FromLong(252780047L); if (unlikely(!__pyx_int_252780047)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_260388950 = PyInt_FromLong(260388950L); if (unlikely(!__pyx_int_260388950)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_260737669 = PyInt_FromLong(260737669L); if (unlikely(!__pyx_int_260737669)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_261314535 = PyInt_FromLong(261314535L); if (unlikely(!__pyx_int_261314535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_265905162 = PyInt_FromLong(265905162L); if (unlikely(!__pyx_int_265905162)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_266959938 = PyInt_FromLong(266959938L); if (unlikely(!__pyx_int_266959938)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_268961816 = PyInt_FromLong(268961816L); if (unlikely(!__pyx_int_268961816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_269496352 = PyInt_FromLong(269496352L); if (unlikely(!__pyx_int_269496352)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_270040487 = PyInt_FromLong(270040487L); if (unlikely(!__pyx_int_270040487)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_271589392 = PyInt_FromLong(271589392L); if (unlikely(!__pyx_int_271589392)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_272786309 = PyInt_FromLong(272786309L); if (unlikely(!__pyx_int_272786309)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_273792366 = PyInt_FromLong(273792366L); if (unlikely(!__pyx_int_273792366)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_274084841 = PyInt_FromLong(274084841L); if (unlikely(!__pyx_int_274084841)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_283769337 = PyInt_FromLong(283769337L); if (unlikely(!__pyx_int_283769337)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_286339874 = PyInt_FromLong(286339874L); if (unlikely(!__pyx_int_286339874)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_287182607 = PyInt_FromLong(287182607L); if (unlikely(!__pyx_int_287182607)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_287343814 = PyInt_FromLong(287343814L); if (unlikely(!__pyx_int_287343814)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_288563729 = PyInt_FromLong(288563729L); if (unlikely(!__pyx_int_288563729)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_292596766 = PyInt_FromLong(292596766L); if (unlikely(!__pyx_int_292596766)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_293963156 = PyInt_FromLong(293963156L); if (unlikely(!__pyx_int_293963156)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_294930682 = PyInt_FromLong(294930682L); if (unlikely(!__pyx_int_294930682)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_296679730 = PyInt_FromLong(296679730L); if (unlikely(!__pyx_int_296679730)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_302582043 = PyInt_FromLong(302582043L); if (unlikely(!__pyx_int_302582043)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_303183396 = PyInt_FromLong(303183396L); if (unlikely(!__pyx_int_303183396)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_303699484 = PyInt_FromLong(303699484L); if (unlikely(!__pyx_int_303699484)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_303765277 = PyInt_FromLong(303765277L); if (unlikely(!__pyx_int_303765277)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_303828494 = PyInt_FromLong(303828494L); if (unlikely(!__pyx_int_303828494)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_305538066 = PyInt_FromLong(305538066L); if (unlikely(!__pyx_int_305538066)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_310463728 = PyInt_FromLong(310463728L); if (unlikely(!__pyx_int_310463728)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_313773861 = PyInt_FromLong(313773861L); if (unlikely(!__pyx_int_313773861)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_320025894 = PyInt_FromLong(320025894L); if (unlikely(!__pyx_int_320025894)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_322250259 = PyInt_FromLong(322250259L); if (unlikely(!__pyx_int_322250259)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_322734571 = PyInt_FromLong(322734571L); if (unlikely(!__pyx_int_322734571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_325965383 = PyInt_FromLong(325965383L); if (unlikely(!__pyx_int_325965383)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_327451799 = PyInt_FromLong(327451799L); if (unlikely(!__pyx_int_327451799)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_328671808 = PyInt_FromLong(328671808L); if (unlikely(!__pyx_int_328671808)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_331544205 = PyInt_FromLong(331544205L); if (unlikely(!__pyx_int_331544205)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_334231800 = PyInt_FromLong(334231800L); if (unlikely(!__pyx_int_334231800)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_336202270 = PyInt_FromLong(336202270L); if (unlikely(!__pyx_int_336202270)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_336870440 = PyInt_FromLong(336870440L); if (unlikely(!__pyx_int_336870440)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_337120268 = PyInt_FromLong(337120268L); if (unlikely(!__pyx_int_337120268)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_337553864 = PyInt_FromLong(337553864L); if (unlikely(!__pyx_int_337553864)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_339486740 = PyInt_FromLong(339486740L); if (unlikely(!__pyx_int_339486740)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_344873464 = PyInt_FromLong(344873464L); if (unlikely(!__pyx_int_344873464)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_349075736 = PyInt_FromLong(349075736L); if (unlikely(!__pyx_int_349075736)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_350174575 = PyInt_FromLong(350174575L); if (unlikely(!__pyx_int_350174575)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_353713962 = PyInt_FromLong(353713962L); if (unlikely(!__pyx_int_353713962)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_355706840 = PyInt_FromLong(355706840L); if (unlikely(!__pyx_int_355706840)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_356461077 = PyInt_FromLong(356461077L); if (unlikely(!__pyx_int_356461077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_361203602 = PyInt_FromLong(361203602L); if (unlikely(!__pyx_int_361203602)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_361929877 = PyInt_FromLong(361929877L); if (unlikely(!__pyx_int_361929877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_367585007 = PyInt_FromLong(367585007L); if (unlikely(!__pyx_int_367585007)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_368048890 = PyInt_FromLong(368048890L); if (unlikely(!__pyx_int_368048890)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_369057872 = PyInt_FromLong(369057872L); if (unlikely(!__pyx_int_369057872)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_369822493 = PyInt_FromLong(369822493L); if (unlikely(!__pyx_int_369822493)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_370555436 = PyInt_FromLong(370555436L); if (unlikely(!__pyx_int_370555436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_370938394 = PyInt_FromLong(370938394L); if (unlikely(!__pyx_int_370938394)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_371049330 = PyInt_FromLong(371049330L); if (unlikely(!__pyx_int_371049330)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_372911126 = PyInt_FromLong(372911126L); if (unlikely(!__pyx_int_372911126)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_376187827 = PyInt_FromLong(376187827L); if (unlikely(!__pyx_int_376187827)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_377642221 = PyInt_FromLong(377642221L); if (unlikely(!__pyx_int_377642221)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_384695291 = PyInt_FromLong(384695291L); if (unlikely(!__pyx_int_384695291)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_387397934 = PyInt_FromLong(387397934L); if (unlikely(!__pyx_int_387397934)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_387583245 = PyInt_FromLong(387583245L); if (unlikely(!__pyx_int_387583245)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_387781147 = PyInt_FromLong(387781147L); if (unlikely(!__pyx_int_387781147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_389623319 = PyInt_FromLong(389623319L); if (unlikely(!__pyx_int_389623319)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_394692241 = PyInt_FromLong(394692241L); if (unlikely(!__pyx_int_394692241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_395441711 = PyInt_FromLong(395441711L); if (unlikely(!__pyx_int_395441711)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_396673818 = PyInt_FromLong(396673818L); if (unlikely(!__pyx_int_396673818)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_401639597 = PyInt_FromLong(401639597L); if (unlikely(!__pyx_int_401639597)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_403442708 = PyInt_FromLong(403442708L); if (unlikely(!__pyx_int_403442708)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_403703816 = PyInt_FromLong(403703816L); if (unlikely(!__pyx_int_403703816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_404016761 = PyInt_FromLong(404016761L); if (unlikely(!__pyx_int_404016761)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_404236336 = PyInt_FromLong(404236336L); if (unlikely(!__pyx_int_404236336)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_405286936 = PyInt_FromLong(405286936L); if (unlikely(!__pyx_int_405286936)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_409198410 = PyInt_FromLong(409198410L); if (unlikely(!__pyx_int_409198410)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_410887952 = PyInt_FromLong(410887952L); if (unlikely(!__pyx_int_410887952)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_418672217 = PyInt_FromLong(418672217L); if (unlikely(!__pyx_int_418672217)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_421079858 = PyInt_FromLong(421079858L); if (unlikely(!__pyx_int_421079858)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_422261273 = PyInt_FromLong(422261273L); if (unlikely(!__pyx_int_422261273)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_425408743 = PyInt_FromLong(425408743L); if (unlikely(!__pyx_int_425408743)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_427917720 = PyInt_FromLong(427917720L); if (unlikely(!__pyx_int_427917720)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_428169201 = PyInt_FromLong(428169201L); if (unlikely(!__pyx_int_428169201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_428819965 = PyInt_FromLong(428819965L); if (unlikely(!__pyx_int_428819965)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_429456164 = PyInt_FromLong(429456164L); if (unlikely(!__pyx_int_429456164)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_434634494 = PyInt_FromLong(434634494L); if (unlikely(!__pyx_int_434634494)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_437062935 = PyInt_FromLong(437062935L); if (unlikely(!__pyx_int_437062935)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_437656594 = PyInt_FromLong(437656594L); if (unlikely(!__pyx_int_437656594)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_437757123 = PyInt_FromLong(437757123L); if (unlikely(!__pyx_int_437757123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_437923380 = PyInt_FromLong(437923380L); if (unlikely(!__pyx_int_437923380)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_439235610 = PyInt_FromLong(439235610L); if (unlikely(!__pyx_int_439235610)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_439452389 = PyInt_FromLong(439452389L); if (unlikely(!__pyx_int_439452389)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_446754879 = PyInt_FromLong(446754879L); if (unlikely(!__pyx_int_446754879)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_451280895 = PyInt_FromLong(451280895L); if (unlikely(!__pyx_int_451280895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_454166793 = PyInt_FromLong(454166793L); if (unlikely(!__pyx_int_454166793)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_454499602 = PyInt_FromLong(454499602L); if (unlikely(!__pyx_int_454499602)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_454765878 = PyInt_FromLong(454765878L); if (unlikely(!__pyx_int_454765878)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_455947803 = PyInt_FromLong(455947803L); if (unlikely(!__pyx_int_455947803)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_457992840 = PyInt_FromLong(457992840L); if (unlikely(!__pyx_int_457992840)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_459744698 = PyInt_FromLong(459744698L); if (unlikely(!__pyx_int_459744698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_461406363 = PyInt_FromLong(461406363L); if (unlikely(!__pyx_int_461406363)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_463180190 = PyInt_FromLong(463180190L); if (unlikely(!__pyx_int_463180190)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_470683154 = PyInt_FromLong(470683154L); if (unlikely(!__pyx_int_470683154)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_470948374 = PyInt_FromLong(470948374L); if (unlikely(!__pyx_int_470948374)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_471606328 = PyInt_FromLong(471606328L); if (unlikely(!__pyx_int_471606328)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_472135708 = PyInt_FromLong(472135708L); if (unlikely(!__pyx_int_472135708)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_472615631 = PyInt_FromLong(472615631L); if (unlikely(!__pyx_int_472615631)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_484572669 = PyInt_FromLong(484572669L); if (unlikely(!__pyx_int_484572669)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_484830689 = PyInt_FromLong(484830689L); if (unlikely(!__pyx_int_484830689)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_486441376 = PyInt_FromLong(486441376L); if (unlikely(!__pyx_int_486441376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_487725847 = PyInt_FromLong(487725847L); if (unlikely(!__pyx_int_487725847)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_487983883 = PyInt_FromLong(487983883L); if (unlikely(!__pyx_int_487983883)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_488449850 = PyInt_FromLong(488449850L); if (unlikely(!__pyx_int_488449850)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_489110045 = PyInt_FromLong(489110045L); if (unlikely(!__pyx_int_489110045)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_492483431 = PyInt_FromLong(492483431L); if (unlikely(!__pyx_int_492483431)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_495158174 = PyInt_FromLong(495158174L); if (unlikely(!__pyx_int_495158174)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_496906059 = PyInt_FromLong(496906059L); if (unlikely(!__pyx_int_496906059)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_499347990 = PyInt_FromLong(499347990L); if (unlikely(!__pyx_int_499347990)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_504303377 = PyInt_FromLong(504303377L); if (unlikely(!__pyx_int_504303377)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_504459436 = PyInt_FromLong(504459436L); if (unlikely(!__pyx_int_504459436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_504629770 = PyInt_FromLong(504629770L); if (unlikely(!__pyx_int_504629770)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_505291324 = PyInt_FromLong(505291324L); if (unlikely(!__pyx_int_505291324)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_505560094 = PyInt_FromLong(505560094L); if (unlikely(!__pyx_int_505560094)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_507358933 = PyInt_FromLong(507358933L); if (unlikely(!__pyx_int_507358933)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_514443284 = PyInt_FromLong(514443284L); if (unlikely(!__pyx_int_514443284)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_516552836 = PyInt_FromLong(516552836L); if (unlikely(!__pyx_int_516552836)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_522133822 = PyInt_FromLong(522133822L); if (unlikely(!__pyx_int_522133822)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_522272287 = PyInt_FromLong(522272287L); if (unlikely(!__pyx_int_522272287)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_528646813 = PyInt_FromLong(528646813L); if (unlikely(!__pyx_int_528646813)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_529487843 = PyInt_FromLong(529487843L); if (unlikely(!__pyx_int_529487843)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_530400753 = PyInt_FromLong(530400753L); if (unlikely(!__pyx_int_530400753)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_532201772 = PyInt_FromLong(532201772L); if (unlikely(!__pyx_int_532201772)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_533804130 = PyInt_FromLong(533804130L); if (unlikely(!__pyx_int_533804130)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_535035132 = PyInt_FromLong(535035132L); if (unlikely(!__pyx_int_535035132)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_537923632 = PyInt_FromLong(537923632L); if (unlikely(!__pyx_int_537923632)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_538992704 = PyInt_FromLong(538992704L); if (unlikely(!__pyx_int_538992704)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_540080725 = PyInt_FromLong(540080725L); if (unlikely(!__pyx_int_540080725)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_543178784 = PyInt_FromLong(543178784L); if (unlikely(!__pyx_int_543178784)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_545572369 = PyInt_FromLong(545572369L); if (unlikely(!__pyx_int_545572369)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_547512796 = PyInt_FromLong(547512796L); if (unlikely(!__pyx_int_547512796)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_548169417 = PyInt_FromLong(548169417L); if (unlikely(!__pyx_int_548169417)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_550103529 = PyInt_FromLong(550103529L); if (unlikely(!__pyx_int_550103529)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_555836226 = PyInt_FromLong(555836226L); if (unlikely(!__pyx_int_555836226)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_557719327 = PyInt_FromLong(557719327L); if (unlikely(!__pyx_int_557719327)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_560153121 = PyInt_FromLong(560153121L); if (unlikely(!__pyx_int_560153121)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_560487590 = PyInt_FromLong(560487590L); if (unlikely(!__pyx_int_560487590)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_562755902 = PyInt_FromLong(562755902L); if (unlikely(!__pyx_int_562755902)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_563977660 = PyInt_FromLong(563977660L); if (unlikely(!__pyx_int_563977660)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_566021896 = PyInt_FromLong(566021896L); if (unlikely(!__pyx_int_566021896)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_567498868 = PyInt_FromLong(567498868L); if (unlikely(!__pyx_int_567498868)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_571543859 = PyInt_FromLong(571543859L); if (unlikely(!__pyx_int_571543859)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_572679748 = PyInt_FromLong(572679748L); if (unlikely(!__pyx_int_572679748)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_573804783 = PyInt_FromLong(573804783L); if (unlikely(!__pyx_int_573804783)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_574365214 = PyInt_FromLong(574365214L); if (unlikely(!__pyx_int_574365214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_574624663 = PyInt_FromLong(574624663L); if (unlikely(!__pyx_int_574624663)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_575138148 = PyInt_FromLong(575138148L); if (unlikely(!__pyx_int_575138148)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_577127458 = PyInt_FromLong(577127458L); if (unlikely(!__pyx_int_577127458)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_585122620 = PyInt_FromLong(585122620L); if (unlikely(!__pyx_int_585122620)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_589522246 = PyInt_FromLong(589522246L); if (unlikely(!__pyx_int_589522246)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_590424639 = PyInt_FromLong(590424639L); if (unlikely(!__pyx_int_590424639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_593839651 = PyInt_FromLong(593839651L); if (unlikely(!__pyx_int_593839651)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_597466303 = PyInt_FromLong(597466303L); if (unlikely(!__pyx_int_597466303)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_598438867 = PyInt_FromLong(598438867L); if (unlikely(!__pyx_int_598438867)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_599762354 = PyInt_FromLong(599762354L); if (unlikely(!__pyx_int_599762354)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_600235211 = PyInt_FromLong(600235211L); if (unlikely(!__pyx_int_600235211)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_600565992 = PyInt_FromLong(600565992L); if (unlikely(!__pyx_int_600565992)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_605164086 = PyInt_FromLong(605164086L); if (unlikely(!__pyx_int_605164086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_605657339 = PyInt_FromLong(605657339L); if (unlikely(!__pyx_int_605657339)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_606366792 = PyInt_FromLong(606366792L); if (unlikely(!__pyx_int_606366792)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_607398968 = PyInt_FromLong(607398968L); if (unlikely(!__pyx_int_607398968)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_607530554 = PyInt_FromLong(607530554L); if (unlikely(!__pyx_int_607530554)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_607656988 = PyInt_FromLong(607656988L); if (unlikely(!__pyx_int_607656988)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_611076132 = PyInt_FromLong(611076132L); if (unlikely(!__pyx_int_611076132)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_612205898 = PyInt_FromLong(612205898L); if (unlikely(!__pyx_int_612205898)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_621591778 = PyInt_FromLong(621591778L); if (unlikely(!__pyx_int_621591778)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_621982671 = PyInt_FromLong(621982671L); if (unlikely(!__pyx_int_621982671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_623210314 = PyInt_FromLong(623210314L); if (unlikely(!__pyx_int_623210314)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_628050469 = PyInt_FromLong(628050469L); if (unlikely(!__pyx_int_628050469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_631218106 = PyInt_FromLong(631218106L); if (unlikely(!__pyx_int_631218106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_632953703 = PyInt_FromLong(632953703L); if (unlikely(!__pyx_int_632953703)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_634383082 = PyInt_FromLong(634383082L); if (unlikely(!__pyx_int_634383082)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_636813900 = PyInt_FromLong(636813900L); if (unlikely(!__pyx_int_636813900)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_638784309 = PyInt_FromLong(638784309L); if (unlikely(!__pyx_int_638784309)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_640051788 = PyInt_FromLong(640051788L); if (unlikely(!__pyx_int_640051788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_641025152 = PyInt_FromLong(641025152L); if (unlikely(!__pyx_int_641025152)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_644500518 = PyInt_FromLong(644500518L); if (unlikely(!__pyx_int_644500518)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_645401037 = PyInt_FromLong(645401037L); if (unlikely(!__pyx_int_645401037)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_648017665 = PyInt_FromLong(648017665L); if (unlikely(!__pyx_int_648017665)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_651029483 = PyInt_FromLong(651029483L); if (unlikely(!__pyx_int_651029483)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_651868046 = PyInt_FromLong(651868046L); if (unlikely(!__pyx_int_651868046)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_656894286 = PyInt_FromLong(656894286L); if (unlikely(!__pyx_int_656894286)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_657861945 = PyInt_FromLong(657861945L); if (unlikely(!__pyx_int_657861945)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_658119965 = PyInt_FromLong(658119965L); if (unlikely(!__pyx_int_658119965)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_660510266 = PyInt_FromLong(660510266L); if (unlikely(!__pyx_int_660510266)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_661212711 = PyInt_FromLong(661212711L); if (unlikely(!__pyx_int_661212711)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_664706745 = PyInt_FromLong(664706745L); if (unlikely(!__pyx_int_664706745)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_666464733 = PyInt_FromLong(666464733L); if (unlikely(!__pyx_int_666464733)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_669961897 = PyInt_FromLong(669961897L); if (unlikely(!__pyx_int_669961897)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_671593195 = PyInt_FromLong(671593195L); if (unlikely(!__pyx_int_671593195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_672404540 = PyInt_FromLong(672404540L); if (unlikely(!__pyx_int_672404540)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_673740880 = PyInt_FromLong(673740880L); if (unlikely(!__pyx_int_673740880)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_674240536 = PyInt_FromLong(674240536L); if (unlikely(!__pyx_int_674240536)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_675039627 = PyInt_FromLong(675039627L); if (unlikely(!__pyx_int_675039627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_678973480 = PyInt_FromLong(678973480L); if (unlikely(!__pyx_int_678973480)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_679998000 = PyInt_FromLong(679998000L); if (unlikely(!__pyx_int_679998000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_681933534 = PyInt_FromLong(681933534L); if (unlikely(!__pyx_int_681933534)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_690584402 = PyInt_FromLong(690584402L); if (unlikely(!__pyx_int_690584402)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_692707433 = PyInt_FromLong(692707433L); if (unlikely(!__pyx_int_692707433)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_695634755 = PyInt_FromLong(695634755L); if (unlikely(!__pyx_int_695634755)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_695947817 = PyInt_FromLong(695947817L); if (unlikely(!__pyx_int_695947817)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_697932208 = PyInt_FromLong(697932208L); if (unlikely(!__pyx_int_697932208)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_698445255 = PyInt_FromLong(698445255L); if (unlikely(!__pyx_int_698445255)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_699432150 = PyInt_FromLong(699432150L); if (unlikely(!__pyx_int_699432150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_700968686 = PyInt_FromLong(700968686L); if (unlikely(!__pyx_int_700968686)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_706024767 = PyInt_FromLong(706024767L); if (unlikely(!__pyx_int_706024767)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_707427924 = PyInt_FromLong(707427924L); if (unlikely(!__pyx_int_707427924)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_708780849 = PyInt_FromLong(708780849L); if (unlikely(!__pyx_int_708780849)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_711349675 = PyInt_FromLong(711349675L); if (unlikely(!__pyx_int_711349675)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_712922154 = PyInt_FromLong(712922154L); if (unlikely(!__pyx_int_712922154)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_717615087 = PyInt_FromLong(717615087L); if (unlikely(!__pyx_int_717615087)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_718002117 = PyInt_FromLong(718002117L); if (unlikely(!__pyx_int_718002117)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_719700128 = PyInt_FromLong(719700128L); if (unlikely(!__pyx_int_719700128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_724270422 = PyInt_FromLong(724270422L); if (unlikely(!__pyx_int_724270422)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_724703513 = PyInt_FromLong(724703513L); if (unlikely(!__pyx_int_724703513)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_729634347 = PyInt_FromLong(729634347L); if (unlikely(!__pyx_int_729634347)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_730517276 = PyInt_FromLong(730517276L); if (unlikely(!__pyx_int_730517276)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_731183368 = PyInt_FromLong(731183368L); if (unlikely(!__pyx_int_731183368)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_731420851 = PyInt_FromLong(731420851L); if (unlikely(!__pyx_int_731420851)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_733156972 = PyInt_FromLong(733156972L); if (unlikely(!__pyx_int_733156972)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_736970802 = PyInt_FromLong(736970802L); if (unlikely(!__pyx_int_736970802)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_739644986 = PyInt_FromLong(739644986L); if (unlikely(!__pyx_int_739644986)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_740276417 = PyInt_FromLong(740276417L); if (unlikely(!__pyx_int_740276417)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_741110872 = PyInt_FromLong(741110872L); if (unlikely(!__pyx_int_741110872)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_741876788 = PyInt_FromLong(741876788L); if (unlikely(!__pyx_int_741876788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_742039012 = PyInt_FromLong(742039012L); if (unlikely(!__pyx_int_742039012)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_745822252 = PyInt_FromLong(745822252L); if (unlikely(!__pyx_int_745822252)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_750906861 = PyInt_FromLong(750906861L); if (unlikely(!__pyx_int_750906861)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_752375421 = PyInt_FromLong(752375421L); if (unlikely(!__pyx_int_752375421)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_757954394 = PyInt_FromLong(757954394L); if (unlikely(!__pyx_int_757954394)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_758520603 = PyInt_FromLong(758520603L); if (unlikely(!__pyx_int_758520603)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_758720310 = PyInt_FromLong(758720310L); if (unlikely(!__pyx_int_758720310)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_762796589 = PyInt_FromLong(762796589L); if (unlikely(!__pyx_int_762796589)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_765172662 = PyInt_FromLong(765172662L); if (unlikely(!__pyx_int_765172662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_766078933 = PyInt_FromLong(766078933L); if (unlikely(!__pyx_int_766078933)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_766945465 = PyInt_FromLong(766945465L); if (unlikely(!__pyx_int_766945465)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_768917123 = PyInt_FromLong(768917123L); if (unlikely(!__pyx_int_768917123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_773265209 = PyInt_FromLong(773265209L); if (unlikely(!__pyx_int_773265209)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_774795868 = PyInt_FromLong(774795868L); if (unlikely(!__pyx_int_774795868)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_775166490 = PyInt_FromLong(775166490L); if (unlikely(!__pyx_int_775166490)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_775550814 = PyInt_FromLong(775550814L); if (unlikely(!__pyx_int_775550814)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_775562294 = PyInt_FromLong(775562294L); if (unlikely(!__pyx_int_775562294)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_777231668 = PyInt_FromLong(777231668L); if (unlikely(!__pyx_int_777231668)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_779246638 = PyInt_FromLong(779246638L); if (unlikely(!__pyx_int_779246638)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_788204353 = PyInt_FromLong(788204353L); if (unlikely(!__pyx_int_788204353)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_790073846 = PyInt_FromLong(790073846L); if (unlikely(!__pyx_int_790073846)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_791638366 = PyInt_FromLong(791638366L); if (unlikely(!__pyx_int_791638366)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_793451934 = PyInt_FromLong(793451934L); if (unlikely(!__pyx_int_793451934)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_795958831 = PyInt_FromLong(795958831L); if (unlikely(!__pyx_int_795958831)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_796197571 = PyInt_FromLong(796197571L); if (unlikely(!__pyx_int_796197571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_798661301 = PyInt_FromLong(798661301L); if (unlikely(!__pyx_int_798661301)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_800440835 = PyInt_FromLong(800440835L); if (unlikely(!__pyx_int_800440835)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_801369324 = PyInt_FromLong(801369324L); if (unlikely(!__pyx_int_801369324)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_806885416 = PyInt_FromLong(806885416L); if (unlikely(!__pyx_int_806885416)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_807407632 = PyInt_FromLong(807407632L); if (unlikely(!__pyx_int_807407632)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_807962610 = PyInt_FromLong(807962610L); if (unlikely(!__pyx_int_807962610)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_808472672 = PyInt_FromLong(808472672L); if (unlikely(!__pyx_int_808472672)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_810573872 = PyInt_FromLong(810573872L); if (unlikely(!__pyx_int_810573872)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_818324884 = PyInt_FromLong(818324884L); if (unlikely(!__pyx_int_818324884)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_821288114 = PyInt_FromLong(821288114L); if (unlikely(!__pyx_int_821288114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_821712160 = PyInt_FromLong(821712160L); if (unlikely(!__pyx_int_821712160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_824852259 = PyInt_FromLong(824852259L); if (unlikely(!__pyx_int_824852259)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_825316194 = PyInt_FromLong(825316194L); if (unlikely(!__pyx_int_825316194)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_827548209 = PyInt_FromLong(827548209L); if (unlikely(!__pyx_int_827548209)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_830661914 = PyInt_FromLong(830661914L); if (unlikely(!__pyx_int_830661914)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_831886756 = PyInt_FromLong(831886756L); if (unlikely(!__pyx_int_831886756)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_832877231 = PyInt_FromLong(832877231L); if (unlikely(!__pyx_int_832877231)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_836232934 = PyInt_FromLong(836232934L); if (unlikely(!__pyx_int_836232934)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_836553431 = PyInt_FromLong(836553431L); if (unlikely(!__pyx_int_836553431)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_839224033 = PyInt_FromLong(839224033L); if (unlikely(!__pyx_int_839224033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_840019705 = PyInt_FromLong(840019705L); if (unlikely(!__pyx_int_840019705)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_840505643 = PyInt_FromLong(840505643L); if (unlikely(!__pyx_int_840505643)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_841739592 = PyInt_FromLong(841739592L); if (unlikely(!__pyx_int_841739592)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_842159716 = PyInt_FromLong(842159716L); if (unlikely(!__pyx_int_842159716)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_844522546 = PyInt_FromLong(844522546L); if (unlikely(!__pyx_int_844522546)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_850817237 = PyInt_FromLong(850817237L); if (unlikely(!__pyx_int_850817237)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_852879335 = PyInt_FromLong(852879335L); if (unlikely(!__pyx_int_852879335)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_857870609 = PyInt_FromLong(857870609L); if (unlikely(!__pyx_int_857870609)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_859002214 = PyInt_FromLong(859002214L); if (unlikely(!__pyx_int_859002214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_861234739 = PyInt_FromLong(861234739L); if (unlikely(!__pyx_int_861234739)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_861968209 = PyInt_FromLong(861968209L); if (unlikely(!__pyx_int_861968209)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_865136418 = PyInt_FromLong(865136418L); if (unlikely(!__pyx_int_865136418)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_865375399 = PyInt_FromLong(865375399L); if (unlikely(!__pyx_int_865375399)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_866637845 = PyInt_FromLong(866637845L); if (unlikely(!__pyx_int_866637845)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_870912086 = PyInt_FromLong(870912086L); if (unlikely(!__pyx_int_870912086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_874125870 = PyInt_FromLong(874125870L); if (unlikely(!__pyx_int_874125870)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_875313188 = PyInt_FromLong(875313188L); if (unlikely(!__pyx_int_875313188)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_875451293 = PyInt_FromLong(875451293L); if (unlikely(!__pyx_int_875451293)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_875846760 = PyInt_FromLong(875846760L); if (unlikely(!__pyx_int_875846760)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_878443390 = PyInt_FromLong(878443390L); if (unlikely(!__pyx_int_878443390)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_878471220 = PyInt_FromLong(878471220L); if (unlikely(!__pyx_int_878471220)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_878845905 = PyInt_FromLong(878845905L); if (unlikely(!__pyx_int_878845905)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_886171109 = PyInt_FromLong(886171109L); if (unlikely(!__pyx_int_886171109)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_891687699 = PyInt_FromLong(891687699L); if (unlikely(!__pyx_int_891687699)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_892690282 = PyInt_FromLong(892690282L); if (unlikely(!__pyx_int_892690282)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_893681702 = PyInt_FromLong(893681702L); if (unlikely(!__pyx_int_893681702)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_895287692 = PyInt_FromLong(895287692L); if (unlikely(!__pyx_int_895287692)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_895445557 = PyInt_FromLong(895445557L); if (unlikely(!__pyx_int_895445557)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_899127202 = PyInt_FromLong(899127202L); if (unlikely(!__pyx_int_899127202)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_899835584 = PyInt_FromLong(899835584L); if (unlikely(!__pyx_int_899835584)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_901210569 = PyInt_FromLong(901210569L); if (unlikely(!__pyx_int_901210569)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_907746093 = PyInt_FromLong(907746093L); if (unlikely(!__pyx_int_907746093)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_908333586 = PyInt_FromLong(908333586L); if (unlikely(!__pyx_int_908333586)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_908933415 = PyInt_FromLong(908933415L); if (unlikely(!__pyx_int_908933415)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_908999204 = PyInt_FromLong(908999204L); if (unlikely(!__pyx_int_908999204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_909531756 = PyInt_FromLong(909531756L); if (unlikely(!__pyx_int_909531756)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_911895606 = PyInt_FromLong(911895606L); if (unlikely(!__pyx_int_911895606)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_915985419 = PyInt_FromLong(915985419L); if (unlikely(!__pyx_int_915985419)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_919489135 = PyInt_FromLong(919489135L); if (unlikely(!__pyx_int_919489135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_923313619 = PyInt_FromLong(923313619L); if (unlikely(!__pyx_int_923313619)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_926374254 = PyInt_FromLong(926374254L); if (unlikely(!__pyx_int_926374254)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_928607799 = PyInt_FromLong(928607799L); if (unlikely(!__pyx_int_928607799)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_930369212 = PyInt_FromLong(930369212L); if (unlikely(!__pyx_int_930369212)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_932615841 = PyInt_FromLong(932615841L); if (unlikely(!__pyx_int_932615841)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_933301370 = PyInt_FromLong(933301370L); if (unlikely(!__pyx_int_933301370)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_935293895 = PyInt_FromLong(935293895L); if (unlikely(!__pyx_int_935293895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_936633572 = PyInt_FromLong(936633572L); if (unlikely(!__pyx_int_936633572)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_941366308 = PyInt_FromLong(941366308L); if (unlikely(!__pyx_int_941366308)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_941896748 = PyInt_FromLong(941896748L); if (unlikely(!__pyx_int_941896748)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_943212656 = PyInt_FromLong(943212656L); if (unlikely(!__pyx_int_943212656)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_944271416 = PyInt_FromLong(944271416L); if (unlikely(!__pyx_int_944271416)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_945164165 = PyInt_FromLong(945164165L); if (unlikely(!__pyx_int_945164165)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_953270745 = PyInt_FromLong(953270745L); if (unlikely(!__pyx_int_953270745)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_953803233 = PyInt_FromLong(953803233L); if (unlikely(!__pyx_int_953803233)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_954669403 = PyInt_FromLong(954669403L); if (unlikely(!__pyx_int_954669403)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_957055980 = PyInt_FromLong(957055980L); if (unlikely(!__pyx_int_957055980)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_958871085 = PyInt_FromLong(958871085L); if (unlikely(!__pyx_int_958871085)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_959321879 = PyInt_FromLong(959321879L); if (unlikely(!__pyx_int_959321879)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_960056178 = PyInt_FromLong(960056178L); if (unlikely(!__pyx_int_960056178)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_961245753 = PyInt_FromLong(961245753L); if (unlikely(!__pyx_int_961245753)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_965841320 = PyInt_FromLong(965841320L); if (unlikely(!__pyx_int_965841320)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_967311729 = PyInt_FromLong(967311729L); if (unlikely(!__pyx_int_967311729)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_972512814 = PyInt_FromLong(972512814L); if (unlikely(!__pyx_int_972512814)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_974986535 = PyInt_FromLong(974986535L); if (unlikely(!__pyx_int_974986535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_975451694 = PyInt_FromLong(975451694L); if (unlikely(!__pyx_int_975451694)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_975658646 = PyInt_FromLong(975658646L); if (unlikely(!__pyx_int_975658646)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_975967766 = PyInt_FromLong(975967766L); if (unlikely(!__pyx_int_975967766)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_976899700 = PyInt_FromLong(976899700L); if (unlikely(!__pyx_int_976899700)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_978220090 = PyInt_FromLong(978220090L); if (unlikely(!__pyx_int_978220090)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_983426092 = PyInt_FromLong(983426092L); if (unlikely(!__pyx_int_983426092)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_984907214 = PyInt_FromLong(984907214L); if (unlikely(!__pyx_int_984907214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_993742198 = PyInt_FromLong(993742198L); if (unlikely(!__pyx_int_993742198)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_994932283 = PyInt_FromLong(994932283L); if (unlikely(!__pyx_int_994932283)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_999329963 = PyInt_FromLong(999329963L); if (unlikely(!__pyx_int_999329963)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1001089995 = PyInt_FromLong(1001089995L); if (unlikely(!__pyx_int_1001089995)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1002142683 = PyInt_FromLong(1002142683L); if (unlikely(!__pyx_int_1002142683)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1002783846 = PyInt_FromLong(1002783846L); if (unlikely(!__pyx_int_1002783846)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1003007129 = PyInt_FromLong(1003007129L); if (unlikely(!__pyx_int_1003007129)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1004265696 = PyInt_FromLong(1004265696L); if (unlikely(!__pyx_int_1004265696)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1008606754 = PyInt_FromLong(1008606754L); if (unlikely(!__pyx_int_1008606754)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1008918595 = PyInt_FromLong(1008918595L); if (unlikely(!__pyx_int_1008918595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1009259540 = PyInt_FromLong(1009259540L); if (unlikely(!__pyx_int_1009259540)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1010582648 = PyInt_FromLong(1010582648L); if (unlikely(!__pyx_int_1010582648)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1011120188 = PyInt_FromLong(1011120188L); if (unlikely(!__pyx_int_1011120188)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1011452712 = PyInt_FromLong(1011452712L); if (unlikely(!__pyx_int_1011452712)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1014646705 = PyInt_FromLong(1014646705L); if (unlikely(!__pyx_int_1014646705)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1015671571 = PyInt_FromLong(1015671571L); if (unlikely(!__pyx_int_1015671571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1027426170 = PyInt_FromLong(1027426170L); if (unlikely(!__pyx_int_1027426170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1028094525 = PyInt_FromLong(1028094525L); if (unlikely(!__pyx_int_1028094525)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1030690015 = PyInt_FromLong(1030690015L); if (unlikely(!__pyx_int_1030690015)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1033081774 = PyInt_FromLong(1033081774L); if (unlikely(!__pyx_int_1033081774)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1033297158 = PyInt_FromLong(1033297158L); if (unlikely(!__pyx_int_1033297158)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1034867998 = PyInt_FromLong(1034867998L); if (unlikely(!__pyx_int_1034867998)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1038082786 = PyInt_FromLong(1038082786L); if (unlikely(!__pyx_int_1038082786)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1039717051 = PyInt_FromLong(1039717051L); if (unlikely(!__pyx_int_1039717051)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1040559837 = PyInt_FromLong(1040559837L); if (unlikely(!__pyx_int_1040559837)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1042226977 = PyInt_FromLong(1042226977L); if (unlikely(!__pyx_int_1042226977)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1042385657 = PyInt_FromLong(1042385657L); if (unlikely(!__pyx_int_1042385657)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1044267644 = PyInt_FromLong(1044267644L); if (unlikely(!__pyx_int_1044267644)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1044544574 = PyInt_FromLong(1044544574L); if (unlikely(!__pyx_int_1044544574)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1047239000 = PyInt_FromLong(1047239000L); if (unlikely(!__pyx_int_1047239000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1052338372 = PyInt_FromLong(1052338372L); if (unlikely(!__pyx_int_1052338372)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1054729187 = PyInt_FromLong(1054729187L); if (unlikely(!__pyx_int_1054729187)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1058709744 = PyInt_FromLong(1058709744L); if (unlikely(!__pyx_int_1058709744)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1059270954 = PyInt_FromLong(1059270954L); if (unlikely(!__pyx_int_1059270954)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1059722517 = PyInt_FromLong(1059722517L); if (unlikely(!__pyx_int_1059722517)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1061110142 = PyInt_FromLong(1061110142L); if (unlikely(!__pyx_int_1061110142)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1061256767 = PyInt_FromLong(1061256767L); if (unlikely(!__pyx_int_1061256767)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1062597235 = PyInt_FromLong(1062597235L); if (unlikely(!__pyx_int_1062597235)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1066570413 = PyInt_FromLong(1066570413L); if (unlikely(!__pyx_int_1066570413)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1068351396 = PyInt_FromLong(1068351396L); if (unlikely(!__pyx_int_1068351396)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1075025698 = PyInt_FromLong(1075025698L); if (unlikely(!__pyx_int_1075025698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1075847264 = PyInt_FromLong(1075847264L); if (unlikely(!__pyx_int_1075847264)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1077985408 = PyInt_FromLong(1077985408L); if (unlikely(!__pyx_int_1077985408)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1078185097 = PyInt_FromLong(1078185097L); if (unlikely(!__pyx_int_1078185097)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1080017571 = PyInt_FromLong(1080017571L); if (unlikely(!__pyx_int_1080017571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1080094634 = PyInt_FromLong(1080094634L); if (unlikely(!__pyx_int_1080094634)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1082771913 = PyInt_FromLong(1082771913L); if (unlikely(!__pyx_int_1082771913)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1086357568 = PyInt_FromLong(1086357568L); if (unlikely(!__pyx_int_1086357568)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1093597963 = PyInt_FromLong(1093597963L); if (unlikely(!__pyx_int_1093597963)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1094828930 = PyInt_FromLong(1094828930L); if (unlikely(!__pyx_int_1094828930)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1097159550 = PyInt_FromLong(1097159550L); if (unlikely(!__pyx_int_1097159550)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1098792767 = PyInt_FromLong(1098792767L); if (unlikely(!__pyx_int_1098792767)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1101901292 = PyInt_FromLong(1101901292L); if (unlikely(!__pyx_int_1101901292)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1103331905 = PyInt_FromLong(1103331905L); if (unlikely(!__pyx_int_1103331905)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1106041591 = PyInt_FromLong(1106041591L); if (unlikely(!__pyx_int_1106041591)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1107234197 = PyInt_FromLong(1107234197L); if (unlikely(!__pyx_int_1107234197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1108339068 = PyInt_FromLong(1108339068L); if (unlikely(!__pyx_int_1108339068)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1109467491 = PyInt_FromLong(1109467491L); if (unlikely(!__pyx_int_1109467491)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1111672452 = PyInt_FromLong(1111672452L); if (unlikely(!__pyx_int_1111672452)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1113818384 = PyInt_FromLong(1113818384L); if (unlikely(!__pyx_int_1113818384)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1115438654 = PyInt_FromLong(1115438654L); if (unlikely(!__pyx_int_1115438654)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1119727848 = PyInt_FromLong(1119727848L); if (unlikely(!__pyx_int_1119727848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1120306242 = PyInt_FromLong(1120306242L); if (unlikely(!__pyx_int_1120306242)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1120974935 = PyInt_FromLong(1120974935L); if (unlikely(!__pyx_int_1120974935)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1126790795 = PyInt_FromLong(1126790795L); if (unlikely(!__pyx_int_1126790795)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1128014560 = PyInt_FromLong(1128014560L); if (unlikely(!__pyx_int_1128014560)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1128514950 = PyInt_FromLong(1128514950L); if (unlikely(!__pyx_int_1128514950)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1133234376 = PyInt_FromLong(1133234376L); if (unlikely(!__pyx_int_1133234376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1135389935 = PyInt_FromLong(1135389935L); if (unlikely(!__pyx_int_1135389935)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1137018435 = PyInt_FromLong(1137018435L); if (unlikely(!__pyx_int_1137018435)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1137477952 = PyInt_FromLong(1137477952L); if (unlikely(!__pyx_int_1137477952)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1139781709 = PyInt_FromLong(1139781709L); if (unlikely(!__pyx_int_1139781709)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1143087718 = PyInt_FromLong(1143087718L); if (unlikely(!__pyx_int_1143087718)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1145359496 = PyInt_FromLong(1145359496L); if (unlikely(!__pyx_int_1145359496)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1147550661 = PyInt_FromLong(1147550661L); if (unlikely(!__pyx_int_1147550661)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1148730428 = PyInt_FromLong(1148730428L); if (unlikely(!__pyx_int_1148730428)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1149249077 = PyInt_FromLong(1149249077L); if (unlikely(!__pyx_int_1149249077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1150208456 = PyInt_FromLong(1150208456L); if (unlikely(!__pyx_int_1150208456)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1154254916 = PyInt_FromLong(1154254916L); if (unlikely(!__pyx_int_1154254916)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1155237496 = PyInt_FromLong(1155237496L); if (unlikely(!__pyx_int_1155237496)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1162203018 = PyInt_FromLong(1162203018L); if (unlikely(!__pyx_int_1162203018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1164071807 = PyInt_FromLong(1164071807L); if (unlikely(!__pyx_int_1164071807)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1167051466 = PyInt_FromLong(1167051466L); if (unlikely(!__pyx_int_1167051466)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1169141738 = PyInt_FromLong(1169141738L); if (unlikely(!__pyx_int_1169141738)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1171229253 = PyInt_FromLong(1171229253L); if (unlikely(!__pyx_int_1171229253)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1172967064 = PyInt_FromLong(1172967064L); if (unlikely(!__pyx_int_1172967064)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1173430173 = PyInt_FromLong(1173430173L); if (unlikely(!__pyx_int_1173430173)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1174215055 = PyInt_FromLong(1174215055L); if (unlikely(!__pyx_int_1174215055)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1176707941 = PyInt_FromLong(1176707941L); if (unlikely(!__pyx_int_1176707941)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1179044492 = PyInt_FromLong(1179044492L); if (unlikely(!__pyx_int_1179044492)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1179510461 = PyInt_FromLong(1179510461L); if (unlikely(!__pyx_int_1179510461)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1180849278 = PyInt_FromLong(1180849278L); if (unlikely(!__pyx_int_1180849278)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1181045119 = PyInt_FromLong(1181045119L); if (unlikely(!__pyx_int_1181045119)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1183697867 = PyInt_FromLong(1183697867L); if (unlikely(!__pyx_int_1183697867)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1184342925 = PyInt_FromLong(1184342925L); if (unlikely(!__pyx_int_1184342925)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1187679302 = PyInt_FromLong(1187679302L); if (unlikely(!__pyx_int_1187679302)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1192455638 = PyInt_FromLong(1192455638L); if (unlikely(!__pyx_int_1192455638)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1195886990 = PyInt_FromLong(1195886990L); if (unlikely(!__pyx_int_1195886990)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1199193405 = PyInt_FromLong(1199193405L); if (unlikely(!__pyx_int_1199193405)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1201765386 = PyInt_FromLong(1201765386L); if (unlikely(!__pyx_int_1201765386)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1202630377 = PyInt_FromLong(1202630377L); if (unlikely(!__pyx_int_1202630377)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1202797690 = PyInt_FromLong(1202797690L); if (unlikely(!__pyx_int_1202797690)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1204391495 = PyInt_FromLong(1204391495L); if (unlikely(!__pyx_int_1204391495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1206477858 = PyInt_FromLong(1206477858L); if (unlikely(!__pyx_int_1206477858)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1210328172 = PyInt_FromLong(1210328172L); if (unlikely(!__pyx_int_1210328172)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1211247597 = PyInt_FromLong(1211247597L); if (unlikely(!__pyx_int_1211247597)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1212733584 = PyInt_FromLong(1212733584L); if (unlikely(!__pyx_int_1212733584)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1214797936 = PyInt_FromLong(1214797936L); if (unlikely(!__pyx_int_1214797936)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1215061108 = PyInt_FromLong(1215061108L); if (unlikely(!__pyx_int_1215061108)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1215313976 = PyInt_FromLong(1215313976L); if (unlikely(!__pyx_int_1215313976)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1222152264 = PyInt_FromLong(1222152264L); if (unlikely(!__pyx_int_1222152264)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1224348052 = PyInt_FromLong(1224348052L); if (unlikely(!__pyx_int_1224348052)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1229577106 = PyInt_FromLong(1229577106L); if (unlikely(!__pyx_int_1229577106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1229899655 = PyInt_FromLong(1229899655L); if (unlikely(!__pyx_int_1229899655)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1233637070 = PyInt_FromLong(1233637070L); if (unlikely(!__pyx_int_1233637070)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1233856572 = PyInt_FromLong(1233856572L); if (unlikely(!__pyx_int_1233856572)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1235855840 = PyInt_FromLong(1235855840L); if (unlikely(!__pyx_int_1235855840)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1239126601 = PyInt_FromLong(1239126601L); if (unlikely(!__pyx_int_1239126601)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1239331162 = PyInt_FromLong(1239331162L); if (unlikely(!__pyx_int_1239331162)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1239443753 = PyInt_FromLong(1239443753L); if (unlikely(!__pyx_int_1239443753)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1243112415 = PyInt_FromLong(1243112415L); if (unlikely(!__pyx_int_1243112415)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1243905413 = PyInt_FromLong(1243905413L); if (unlikely(!__pyx_int_1243905413)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1243948399 = PyInt_FromLong(1243948399L); if (unlikely(!__pyx_int_1243948399)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1246420628 = PyInt_FromLong(1246420628L); if (unlikely(!__pyx_int_1246420628)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1248802510 = PyInt_FromLong(1248802510L); if (unlikely(!__pyx_int_1248802510)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1250283471 = PyInt_FromLong(1250283471L); if (unlikely(!__pyx_int_1250283471)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1256100938 = PyInt_FromLong(1256100938L); if (unlikely(!__pyx_int_1256100938)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1257309336 = PyInt_FromLong(1257309336L); if (unlikely(!__pyx_int_1257309336)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1258480242 = PyInt_FromLong(1258480242L); if (unlikely(!__pyx_int_1258480242)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1260232239 = PyInt_FromLong(1260232239L); if (unlikely(!__pyx_int_1260232239)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1263263126 = PyInt_FromLong(1263263126L); if (unlikely(!__pyx_int_1263263126)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1265195639 = PyInt_FromLong(1265195639L); if (unlikely(!__pyx_int_1265195639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1265776953 = PyInt_FromLong(1265776953L); if (unlikely(!__pyx_int_1265776953)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1269344483 = PyInt_FromLong(1269344483L); if (unlikely(!__pyx_int_1269344483)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1272813131 = PyInt_FromLong(1272813131L); if (unlikely(!__pyx_int_1272813131)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1273168787 = PyInt_FromLong(1273168787L); if (unlikely(!__pyx_int_1273168787)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1277555970 = PyInt_FromLong(1277555970L); if (unlikely(!__pyx_int_1277555970)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1277568618 = PyInt_FromLong(1277568618L); if (unlikely(!__pyx_int_1277568618)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1280103576 = PyInt_FromLong(1280103576L); if (unlikely(!__pyx_int_1280103576)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1282050075 = PyInt_FromLong(1282050075L); if (unlikely(!__pyx_int_1282050075)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1283575245 = PyInt_FromLong(1283575245L); if (unlikely(!__pyx_int_1283575245)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1286567175 = PyInt_FromLong(1286567175L); if (unlikely(!__pyx_int_1286567175)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1289001036 = PyInt_FromLong(1289001036L); if (unlikely(!__pyx_int_1289001036)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1290801793 = PyInt_FromLong(1290801793L); if (unlikely(!__pyx_int_1290801793)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1296297904 = PyInt_FromLong(1296297904L); if (unlikely(!__pyx_int_1296297904)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1296947098 = PyInt_FromLong(1296947098L); if (unlikely(!__pyx_int_1296947098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1297403050 = PyInt_FromLong(1297403050L); if (unlikely(!__pyx_int_1297403050)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1299594043 = PyInt_FromLong(1299594043L); if (unlikely(!__pyx_int_1299594043)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1303096294 = PyInt_FromLong(1303096294L); if (unlikely(!__pyx_int_1303096294)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1305906550 = PyInt_FromLong(1305906550L); if (unlikely(!__pyx_int_1305906550)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1305975373 = PyInt_FromLong(1305975373L); if (unlikely(!__pyx_int_1305975373)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1306967366 = PyInt_FromLong(1306967366L); if (unlikely(!__pyx_int_1306967366)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1311188841 = PyInt_FromLong(1311188841L); if (unlikely(!__pyx_int_1311188841)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1313788572 = PyInt_FromLong(1313788572L); if (unlikely(!__pyx_int_1313788572)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1315562145 = PyInt_FromLong(1315562145L); if (unlikely(!__pyx_int_1315562145)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1315723890 = PyInt_FromLong(1315723890L); if (unlikely(!__pyx_int_1315723890)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1316239930 = PyInt_FromLong(1316239930L); if (unlikely(!__pyx_int_1316239930)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1320957812 = PyInt_FromLong(1320957812L); if (unlikely(!__pyx_int_1320957812)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1321699145 = PyInt_FromLong(1321699145L); if (unlikely(!__pyx_int_1321699145)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1322425422 = PyInt_FromLong(1322425422L); if (unlikely(!__pyx_int_1322425422)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1330631070 = PyInt_FromLong(1330631070L); if (unlikely(!__pyx_int_1330631070)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1333838021 = PyInt_FromLong(1333838021L); if (unlikely(!__pyx_int_1333838021)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1334037708 = PyInt_FromLong(1334037708L); if (unlikely(!__pyx_int_1334037708)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1335535747 = PyInt_FromLong(1335535747L); if (unlikely(!__pyx_int_1335535747)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1336584933 = PyInt_FromLong(1336584933L); if (unlikely(!__pyx_int_1336584933)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1337376481 = PyInt_FromLong(1337376481L); if (unlikely(!__pyx_int_1337376481)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1339137615 = PyInt_FromLong(1339137615L); if (unlikely(!__pyx_int_1339137615)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1340463100 = PyInt_FromLong(1340463100L); if (unlikely(!__pyx_int_1340463100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1343127501 = PyInt_FromLong(1343127501L); if (unlikely(!__pyx_int_1343127501)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1343618912 = PyInt_FromLong(1343618912L); if (unlikely(!__pyx_int_1343618912)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1344809080 = PyInt_FromLong(1344809080L); if (unlikely(!__pyx_int_1344809080)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1347481760 = PyInt_FromLong(1347481760L); if (unlikely(!__pyx_int_1347481760)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1347548327 = PyInt_FromLong(1347548327L); if (unlikely(!__pyx_int_1347548327)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1348481072 = PyInt_FromLong(1348481072L); if (unlikely(!__pyx_int_1348481072)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1350078989 = PyInt_FromLong(1350078989L); if (unlikely(!__pyx_int_1350078989)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1357946960 = PyInt_FromLong(1357946960L); if (unlikely(!__pyx_int_1357946960)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1362321559 = PyInt_FromLong(1362321559L); if (unlikely(!__pyx_int_1362321559)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1364325282 = PyInt_FromLong(1364325282L); if (unlikely(!__pyx_int_1364325282)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1367295589 = PyInt_FromLong(1367295589L); if (unlikely(!__pyx_int_1367295589)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1368901318 = PyInt_FromLong(1368901318L); if (unlikely(!__pyx_int_1368901318)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1369810420 = PyInt_FromLong(1369810420L); if (unlikely(!__pyx_int_1369810420)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1371368976 = PyInt_FromLong(1371368976L); if (unlikely(!__pyx_int_1371368976)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1374921297 = PyInt_FromLong(1374921297L); if (unlikely(!__pyx_int_1374921297)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1374988112 = PyInt_FromLong(1374988112L); if (unlikely(!__pyx_int_1374988112)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1378429307 = PyInt_FromLong(1378429307L); if (unlikely(!__pyx_int_1378429307)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1381168804 = PyInt_FromLong(1381168804L); if (unlikely(!__pyx_int_1381168804)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1381620373 = PyInt_FromLong(1381620373L); if (unlikely(!__pyx_int_1381620373)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1383856311 = PyInt_FromLong(1383856311L); if (unlikely(!__pyx_int_1383856311)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1385356242 = PyInt_FromLong(1385356242L); if (unlikely(!__pyx_int_1385356242)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1385547719 = PyInt_FromLong(1385547719L); if (unlikely(!__pyx_int_1385547719)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1391201670 = PyInt_FromLong(1391201670L); if (unlikely(!__pyx_int_1391201670)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1391895634 = PyInt_FromLong(1391895634L); if (unlikely(!__pyx_int_1391895634)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1398011302 = PyInt_FromLong(1398011302L); if (unlikely(!__pyx_int_1398011302)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1398944049 = PyInt_FromLong(1398944049L); if (unlikely(!__pyx_int_1398944049)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1400783205 = PyInt_FromLong(1400783205L); if (unlikely(!__pyx_int_1400783205)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1400849762 = PyInt_FromLong(1400849762L); if (unlikely(!__pyx_int_1400849762)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1402811438 = PyInt_FromLong(1402811438L); if (unlikely(!__pyx_int_1402811438)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1403299063 = PyInt_FromLong(1403299063L); if (unlikely(!__pyx_int_1403299063)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1408607827 = PyInt_FromLong(1408607827L); if (unlikely(!__pyx_int_1408607827)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1408749034 = PyInt_FromLong(1408749034L); if (unlikely(!__pyx_int_1408749034)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1412049534 = PyInt_FromLong(1412049534L); if (unlikely(!__pyx_int_1412049534)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1414855848 = PyInt_FromLong(1414855848L); if (unlikely(!__pyx_int_1414855848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1417561698 = PyInt_FromLong(1417561698L); if (unlikely(!__pyx_int_1417561698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1418573201 = PyInt_FromLong(1418573201L); if (unlikely(!__pyx_int_1418573201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1418839493 = PyInt_FromLong(1418839493L); if (unlikely(!__pyx_int_1418839493)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1422699085 = PyInt_FromLong(1422699085L); if (unlikely(!__pyx_int_1422699085)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1423022939 = PyInt_FromLong(1423022939L); if (unlikely(!__pyx_int_1423022939)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1425844308 = PyInt_FromLong(1425844308L); if (unlikely(!__pyx_int_1425844308)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1428173050 = PyInt_FromLong(1428173050L); if (unlikely(!__pyx_int_1428173050)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1431699370 = PyInt_FromLong(1431699370L); if (unlikely(!__pyx_int_1431699370)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1432761139 = PyInt_FromLong(1432761139L); if (unlikely(!__pyx_int_1432761139)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1436590835 = PyInt_FromLong(1436590835L); if (unlikely(!__pyx_int_1436590835)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1437050866 = PyInt_FromLong(1437050866L); if (unlikely(!__pyx_int_1437050866)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1437280870 = PyInt_FromLong(1437280870L); if (unlikely(!__pyx_int_1437280870)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1441952575 = PyInt_FromLong(1441952575L); if (unlikely(!__pyx_int_1441952575)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1442818645 = PyInt_FromLong(1442818645L); if (unlikely(!__pyx_int_1442818645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1443857720 = PyInt_FromLong(1443857720L); if (unlikely(!__pyx_int_1443857720)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1445669757 = PyInt_FromLong(1445669757L); if (unlikely(!__pyx_int_1445669757)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1446242576 = PyInt_FromLong(1446242576L); if (unlikely(!__pyx_int_1446242576)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1448540844 = PyInt_FromLong(1448540844L); if (unlikely(!__pyx_int_1448540844)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1449407026 = PyInt_FromLong(1449407026L); if (unlikely(!__pyx_int_1449407026)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1451044056 = PyInt_FromLong(1451044056L); if (unlikely(!__pyx_int_1451044056)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1455525988 = PyInt_FromLong(1455525988L); if (unlikely(!__pyx_int_1455525988)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1459268694 = PyInt_FromLong(1459268694L); if (unlikely(!__pyx_int_1459268694)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1463996600 = PyInt_FromLong(1463996600L); if (unlikely(!__pyx_int_1463996600)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1465383342 = PyInt_FromLong(1465383342L); if (unlikely(!__pyx_int_1465383342)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1469301956 = PyInt_FromLong(1469301956L); if (unlikely(!__pyx_int_1469301956)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1470539505 = PyInt_FromLong(1470539505L); if (unlikely(!__pyx_int_1470539505)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1474502543 = PyInt_FromLong(1474502543L); if (unlikely(!__pyx_int_1474502543)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1474760595 = PyInt_FromLong(1474760595L); if (unlikely(!__pyx_int_1474760595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1475418501 = PyInt_FromLong(1475418501L); if (unlikely(!__pyx_int_1475418501)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1475980887 = PyInt_FromLong(1475980887L); if (unlikely(!__pyx_int_1475980887)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1479289972 = PyInt_FromLong(1479289972L); if (unlikely(!__pyx_int_1479289972)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1480485785 = PyInt_FromLong(1480485785L); if (unlikely(!__pyx_int_1480485785)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1482221744 = PyInt_FromLong(1482221744L); if (unlikely(!__pyx_int_1482221744)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1483753576 = PyInt_FromLong(1483753576L); if (unlikely(!__pyx_int_1483753576)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1484005843 = PyInt_FromLong(1484005843L); if (unlikely(!__pyx_int_1484005843)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1486471617 = PyInt_FromLong(1486471617L); if (unlikely(!__pyx_int_1486471617)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1487645946 = PyInt_FromLong(1487645946L); if (unlikely(!__pyx_int_1487645946)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1491644504 = PyInt_FromLong(1491644504L); if (unlikely(!__pyx_int_1491644504)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1494807662 = PyInt_FromLong(1494807662L); if (unlikely(!__pyx_int_1494807662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1499065266 = PyInt_FromLong(1499065266L); if (unlikely(!__pyx_int_1499065266)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1500395319 = PyInt_FromLong(1500395319L); if (unlikely(!__pyx_int_1500395319)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1503449823 = PyInt_FromLong(1503449823L); if (unlikely(!__pyx_int_1503449823)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1503764984 = PyInt_FromLong(1503764984L); if (unlikely(!__pyx_int_1503764984)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1507497298 = PyInt_FromLong(1507497298L); if (unlikely(!__pyx_int_1507497298)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1508618841 = PyInt_FromLong(1508618841L); if (unlikely(!__pyx_int_1508618841)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1509430414 = PyInt_FromLong(1509430414L); if (unlikely(!__pyx_int_1509430414)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1512910199 = PyInt_FromLong(1512910199L); if (unlikely(!__pyx_int_1512910199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1514790577 = PyInt_FromLong(1514790577L); if (unlikely(!__pyx_int_1514790577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1515908788 = PyInt_FromLong(1515908788L); if (unlikely(!__pyx_int_1515908788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1517041206 = PyInt_FromLong(1517041206L); if (unlikely(!__pyx_int_1517041206)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1517440620 = PyInt_FromLong(1517440620L); if (unlikely(!__pyx_int_1517440620)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1517767529 = PyInt_FromLong(1517767529L); if (unlikely(!__pyx_int_1517767529)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1521706781 = PyInt_FromLong(1521706781L); if (unlikely(!__pyx_int_1521706781)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1525593178 = PyInt_FromLong(1525593178L); if (unlikely(!__pyx_int_1525593178)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1530455833 = PyInt_FromLong(1530455833L); if (unlikely(!__pyx_int_1530455833)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1532285339 = PyInt_FromLong(1532285339L); if (unlikely(!__pyx_int_1532285339)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1532751286 = PyInt_FromLong(1532751286L); if (unlikely(!__pyx_int_1532751286)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1533017514 = PyInt_FromLong(1533017514L); if (unlikely(!__pyx_int_1533017514)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1536934080 = PyInt_FromLong(1536934080L); if (unlikely(!__pyx_int_1536934080)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1537253627 = PyInt_FromLong(1537253627L); if (unlikely(!__pyx_int_1537253627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1542305371 = PyInt_FromLong(1542305371L); if (unlikely(!__pyx_int_1542305371)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1543208500 = PyInt_FromLong(1543208500L); if (unlikely(!__pyx_int_1543208500)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1546530418 = PyInt_FromLong(1546530418L); if (unlikely(!__pyx_int_1546530418)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1549591736 = PyInt_FromLong(1549591736L); if (unlikely(!__pyx_int_1549591736)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1550332980 = PyInt_FromLong(1550332980L); if (unlikely(!__pyx_int_1550332980)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1551037884 = PyInt_FromLong(1551037884L); if (unlikely(!__pyx_int_1551037884)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1551124588 = PyInt_FromLong(1551124588L); if (unlikely(!__pyx_int_1551124588)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1554391400 = PyInt_FromLong(1554391400L); if (unlikely(!__pyx_int_1554391400)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1558493276 = PyInt_FromLong(1558493276L); if (unlikely(!__pyx_int_1558493276)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1559041666 = PyInt_FromLong(1559041666L); if (unlikely(!__pyx_int_1559041666)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1560382517 = PyInt_FromLong(1560382517L); if (unlikely(!__pyx_int_1560382517)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1560637892 = PyInt_FromLong(1560637892L); if (unlikely(!__pyx_int_1560637892)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1566435258 = PyInt_FromLong(1566435258L); if (unlikely(!__pyx_int_1566435258)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1568718495 = PyInt_FromLong(1568718495L); if (unlikely(!__pyx_int_1568718495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1570751170 = PyInt_FromLong(1570751170L); if (unlikely(!__pyx_int_1570751170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1571005438 = PyInt_FromLong(1571005438L); if (unlikely(!__pyx_int_1571005438)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1575467613 = PyInt_FromLong(1575467613L); if (unlikely(!__pyx_int_1575467613)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1576976609 = PyInt_FromLong(1576976609L); if (unlikely(!__pyx_int_1576976609)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1580087799 = PyInt_FromLong(1580087799L); if (unlikely(!__pyx_int_1580087799)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1580150641 = PyInt_FromLong(1580150641L); if (unlikely(!__pyx_int_1580150641)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1583276732 = PyInt_FromLong(1583276732L); if (unlikely(!__pyx_int_1583276732)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1584504582 = PyInt_FromLong(1584504582L); if (unlikely(!__pyx_int_1584504582)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1586903591 = PyInt_FromLong(1586903591L); if (unlikely(!__pyx_int_1586903591)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1587397571 = PyInt_FromLong(1587397571L); if (unlikely(!__pyx_int_1587397571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1591917662 = PyInt_FromLong(1591917662L); if (unlikely(!__pyx_int_1591917662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1592394909 = PyInt_FromLong(1592394909L); if (unlikely(!__pyx_int_1592394909)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1600119230 = PyInt_FromLong(1600119230L); if (unlikely(!__pyx_int_1600119230)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1600795957 = PyInt_FromLong(1600795957L); if (unlikely(!__pyx_int_1600795957)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1604494077 = PyInt_FromLong(1604494077L); if (unlikely(!__pyx_int_1604494077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1606591296 = PyInt_FromLong(1606591296L); if (unlikely(!__pyx_int_1606591296)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1607244650 = PyInt_FromLong(1607244650L); if (unlikely(!__pyx_int_1607244650)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1608629855 = PyInt_FromLong(1608629855L); if (unlikely(!__pyx_int_1608629855)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1608975247 = PyInt_FromLong(1608975247L); if (unlikely(!__pyx_int_1608975247)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1610459739 = PyInt_FromLong(1610459739L); if (unlikely(!__pyx_int_1610459739)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1613770832 = PyInt_FromLong(1613770832L); if (unlikely(!__pyx_int_1613770832)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1614815264 = PyInt_FromLong(1614815264L); if (unlikely(!__pyx_int_1614815264)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1615861247 = PyInt_FromLong(1615861247L); if (unlikely(!__pyx_int_1615861247)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1616945344 = PyInt_FromLong(1616945344L); if (unlikely(!__pyx_int_1616945344)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1620529459 = PyInt_FromLong(1620529459L); if (unlikely(!__pyx_int_1620529459)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1621147744 = PyInt_FromLong(1621147744L); if (unlikely(!__pyx_int_1621147744)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1626319424 = PyInt_FromLong(1626319424L); if (unlikely(!__pyx_int_1626319424)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1627235199 = PyInt_FromLong(1627235199L); if (unlikely(!__pyx_int_1627235199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1633788866 = PyInt_FromLong(1633788866L); if (unlikely(!__pyx_int_1633788866)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1635502980 = PyInt_FromLong(1635502980L); if (unlikely(!__pyx_int_1635502980)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1636604631 = PyInt_FromLong(1636604631L); if (unlikely(!__pyx_int_1636604631)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1638122081 = PyInt_FromLong(1638122081L); if (unlikely(!__pyx_int_1638122081)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1639438038 = PyInt_FromLong(1639438038L); if (unlikely(!__pyx_int_1639438038)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1639824860 = PyInt_FromLong(1639824860L); if (unlikely(!__pyx_int_1639824860)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1640576439 = PyInt_FromLong(1640576439L); if (unlikely(!__pyx_int_1640576439)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1641816226 = PyInt_FromLong(1641816226L); if (unlikely(!__pyx_int_1641816226)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1646252340 = PyInt_FromLong(1646252340L); if (unlikely(!__pyx_int_1646252340)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1647391059 = PyInt_FromLong(1647391059L); if (unlikely(!__pyx_int_1647391059)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1649639237 = PyInt_FromLong(1649639237L); if (unlikely(!__pyx_int_1649639237)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1649704518 = PyInt_FromLong(1649704518L); if (unlikely(!__pyx_int_1649704518)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1650632388 = PyInt_FromLong(1650632388L); if (unlikely(!__pyx_int_1650632388)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1654886325 = PyInt_FromLong(1654886325L); if (unlikely(!__pyx_int_1654886325)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1655096418 = PyInt_FromLong(1655096418L); if (unlikely(!__pyx_int_1655096418)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1656084439 = PyInt_FromLong(1656084439L); if (unlikely(!__pyx_int_1656084439)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1665278241 = PyInt_FromLong(1665278241L); if (unlikely(!__pyx_int_1665278241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1667474886 = PyInt_FromLong(1667474886L); if (unlikely(!__pyx_int_1667474886)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1668212892 = PyInt_FromLong(1668212892L); if (unlikely(!__pyx_int_1668212892)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1669664834 = PyInt_FromLong(1669664834L); if (unlikely(!__pyx_int_1669664834)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1671808611 = PyInt_FromLong(1671808611L); if (unlikely(!__pyx_int_1671808611)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1673061617 = PyInt_FromLong(1673061617L); if (unlikely(!__pyx_int_1673061617)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1673313503 = PyInt_FromLong(1673313503L); if (unlikely(!__pyx_int_1673313503)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1675577880 = PyInt_FromLong(1675577880L); if (unlikely(!__pyx_int_1675577880)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1678381017 = PyInt_FromLong(1678381017L); if (unlikely(!__pyx_int_1678381017)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1679968233 = PyInt_FromLong(1679968233L); if (unlikely(!__pyx_int_1679968233)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1681011286 = PyInt_FromLong(1681011286L); if (unlikely(!__pyx_int_1681011286)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1683407248 = PyInt_FromLong(1683407248L); if (unlikely(!__pyx_int_1683407248)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1684319432 = PyInt_FromLong(1684319432L); if (unlikely(!__pyx_int_1684319432)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1685577905 = PyInt_FromLong(1685577905L); if (unlikely(!__pyx_int_1685577905)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1689045092 = PyInt_FromLong(1689045092L); if (unlikely(!__pyx_int_1689045092)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1689376213 = PyInt_FromLong(1689376213L); if (unlikely(!__pyx_int_1689376213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1699095331 = PyInt_FromLong(1699095331L); if (unlikely(!__pyx_int_1699095331)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1699839814 = PyInt_FromLong(1699839814L); if (unlikely(!__pyx_int_1699839814)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1699970625 = PyInt_FromLong(1699970625L); if (unlikely(!__pyx_int_1699970625)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1701162954 = PyInt_FromLong(1701162954L); if (unlikely(!__pyx_int_1701162954)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1706019429 = PyInt_FromLong(1706019429L); if (unlikely(!__pyx_int_1706019429)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1707065306 = PyInt_FromLong(1707065306L); if (unlikely(!__pyx_int_1707065306)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1708848333 = PyInt_FromLong(1708848333L); if (unlikely(!__pyx_int_1708848333)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1709610350 = PyInt_FromLong(1709610350L); if (unlikely(!__pyx_int_1709610350)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1714631509 = PyInt_FromLong(1714631509L); if (unlikely(!__pyx_int_1714631509)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1715193156 = PyInt_FromLong(1715193156L); if (unlikely(!__pyx_int_1715193156)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1715741218 = PyInt_FromLong(1715741218L); if (unlikely(!__pyx_int_1715741218)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1716890410 = PyInt_FromLong(1716890410L); if (unlikely(!__pyx_int_1716890410)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1718004428 = PyInt_FromLong(1718004428L); if (unlikely(!__pyx_int_1718004428)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1722469478 = PyInt_FromLong(1722469478L); if (unlikely(!__pyx_int_1722469478)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1723872674 = PyInt_FromLong(1723872674L); if (unlikely(!__pyx_int_1723872674)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1724457132 = PyInt_FromLong(1724457132L); if (unlikely(!__pyx_int_1724457132)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1729977011 = PyInt_FromLong(1729977011L); if (unlikely(!__pyx_int_1729977011)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1730525723 = PyInt_FromLong(1730525723L); if (unlikely(!__pyx_int_1730525723)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1734846926 = PyInt_FromLong(1734846926L); if (unlikely(!__pyx_int_1734846926)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1739181671 = PyInt_FromLong(1739181671L); if (unlikely(!__pyx_int_1739181671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1739656202 = PyInt_FromLong(1739656202L); if (unlikely(!__pyx_int_1739656202)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1739838676 = PyInt_FromLong(1739838676L); if (unlikely(!__pyx_int_1739838676)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1740553945 = PyInt_FromLong(1740553945L); if (unlikely(!__pyx_int_1740553945)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1742315127 = PyInt_FromLong(1742315127L); if (unlikely(!__pyx_int_1742315127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1748251740 = PyInt_FromLong(1748251740L); if (unlikely(!__pyx_int_1748251740)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1750626376 = PyInt_FromLong(1750626376L); if (unlikely(!__pyx_int_1750626376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1750902305 = PyInt_FromLong(1750902305L); if (unlikely(!__pyx_int_1750902305)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1751693520 = PyInt_FromLong(1751693520L); if (unlikely(!__pyx_int_1751693520)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1756818940 = PyInt_FromLong(1756818940L); if (unlikely(!__pyx_int_1756818940)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1756942440 = PyInt_FromLong(1756942440L); if (unlikely(!__pyx_int_1756942440)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1757008337 = PyInt_FromLong(1757008337L); if (unlikely(!__pyx_int_1757008337)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1757691577 = PyInt_FromLong(1757691577L); if (unlikely(!__pyx_int_1757691577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1764313568 = PyInt_FromLong(1764313568L); if (unlikely(!__pyx_int_1764313568)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1766729511 = PyInt_FromLong(1766729511L); if (unlikely(!__pyx_int_1766729511)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1767536459 = PyInt_FromLong(1767536459L); if (unlikely(!__pyx_int_1767536459)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1768537042 = PyInt_FromLong(1768537042L); if (unlikely(!__pyx_int_1768537042)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1773779408 = PyInt_FromLong(1773779408L); if (unlikely(!__pyx_int_1773779408)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1773916777 = PyInt_FromLong(1773916777L); if (unlikely(!__pyx_int_1773916777)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1775276924 = PyInt_FromLong(1775276924L); if (unlikely(!__pyx_int_1775276924)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1776460110 = PyInt_FromLong(1776460110L); if (unlikely(!__pyx_int_1776460110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1781871967 = PyInt_FromLong(1781871967L); if (unlikely(!__pyx_int_1781871967)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1783375398 = PyInt_FromLong(1783375398L); if (unlikely(!__pyx_int_1783375398)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1784663195 = PyInt_FromLong(1784663195L); if (unlikely(!__pyx_int_1784663195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1785380564 = PyInt_FromLong(1785380564L); if (unlikely(!__pyx_int_1785380564)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1786102409 = PyInt_FromLong(1786102409L); if (unlikely(!__pyx_int_1786102409)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1787304780 = PyInt_FromLong(1787304780L); if (unlikely(!__pyx_int_1787304780)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1790575107 = PyInt_FromLong(1790575107L); if (unlikely(!__pyx_int_1790575107)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1790891114 = PyInt_FromLong(1790891114L); if (unlikely(!__pyx_int_1790891114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1802223062 = PyInt_FromLong(1802223062L); if (unlikely(!__pyx_int_1802223062)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1805211710 = PyInt_FromLong(1805211710L); if (unlikely(!__pyx_int_1805211710)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1806599355 = PyInt_FromLong(1806599355L); if (unlikely(!__pyx_int_1806599355)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1807268051 = PyInt_FromLong(1807268051L); if (unlikely(!__pyx_int_1807268051)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1807470800 = PyInt_FromLong(1807470800L); if (unlikely(!__pyx_int_1807470800)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1807603307 = PyInt_FromLong(1807603307L); if (unlikely(!__pyx_int_1807603307)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1808481195 = PyInt_FromLong(1808481195L); if (unlikely(!__pyx_int_1808481195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1809054150 = PyInt_FromLong(1809054150L); if (unlikely(!__pyx_int_1809054150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1814803222 = PyInt_FromLong(1814803222L); if (unlikely(!__pyx_int_1814803222)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1815492186 = PyInt_FromLong(1815492186L); if (unlikely(!__pyx_int_1815492186)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1816667172 = PyInt_FromLong(1816667172L); if (unlikely(!__pyx_int_1816667172)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1817866830 = PyInt_FromLong(1817866830L); if (unlikely(!__pyx_int_1817866830)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1817998408 = PyInt_FromLong(1817998408L); if (unlikely(!__pyx_int_1817998408)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1819063512 = PyInt_FromLong(1819063512L); if (unlikely(!__pyx_int_1819063512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1820824798 = PyInt_FromLong(1820824798L); if (unlikely(!__pyx_int_1820824798)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1823791212 = PyInt_FromLong(1823791212L); if (unlikely(!__pyx_int_1823791212)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1835907034 = PyInt_FromLong(1835907034L); if (unlikely(!__pyx_int_1835907034)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1836772287 = PyInt_FromLong(1836772287L); if (unlikely(!__pyx_int_1836772287)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1840765549 = PyInt_FromLong(1840765549L); if (unlikely(!__pyx_int_1840765549)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1841019862 = PyInt_FromLong(1841019862L); if (unlikely(!__pyx_int_1841019862)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1841287890 = PyInt_FromLong(1841287890L); if (unlikely(!__pyx_int_1841287890)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1841768865 = PyInt_FromLong(1841768865L); if (unlikely(!__pyx_int_1841768865)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1842759443 = PyInt_FromLong(1842759443L); if (unlikely(!__pyx_int_1842759443)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1844882806 = PyInt_FromLong(1844882806L); if (unlikely(!__pyx_int_1844882806)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1846563261 = PyInt_FromLong(1846563261L); if (unlikely(!__pyx_int_1846563261)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1849112409 = PyInt_FromLong(1849112409L); if (unlikely(!__pyx_int_1849112409)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1851332852 = PyInt_FromLong(1851332852L); if (unlikely(!__pyx_int_1851332852)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1852171925 = PyInt_FromLong(1852171925L); if (unlikely(!__pyx_int_1852171925)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1852748508 = PyInt_FromLong(1852748508L); if (unlikely(!__pyx_int_1852748508)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1857215598 = PyInt_FromLong(1857215598L); if (unlikely(!__pyx_int_1857215598)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1857934291 = PyInt_FromLong(1857934291L); if (unlikely(!__pyx_int_1857934291)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1860738147 = PyInt_FromLong(1860738147L); if (unlikely(!__pyx_int_1860738147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1862534868 = PyInt_FromLong(1862534868L); if (unlikely(!__pyx_int_1862534868)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1863638845 = PyInt_FromLong(1863638845L); if (unlikely(!__pyx_int_1863638845)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1865862730 = PyInt_FromLong(1865862730L); if (unlikely(!__pyx_int_1865862730)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1867130149 = PyInt_FromLong(1867130149L); if (unlikely(!__pyx_int_1867130149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1869591006 = PyInt_FromLong(1869591006L); if (unlikely(!__pyx_int_1869591006)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1873927791 = PyInt_FromLong(1873927791L); if (unlikely(!__pyx_int_1873927791)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1874508501 = PyInt_FromLong(1874508501L); if (unlikely(!__pyx_int_1874508501)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1876241833 = PyInt_FromLong(1876241833L); if (unlikely(!__pyx_int_1876241833)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1882732616 = PyInt_FromLong(1882732616L); if (unlikely(!__pyx_int_1882732616)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1883793496 = PyInt_FromLong(1883793496L); if (unlikely(!__pyx_int_1883793496)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1886425312 = PyInt_FromLong(1886425312L); if (unlikely(!__pyx_int_1886425312)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1888542832 = PyInt_FromLong(1888542832L); if (unlikely(!__pyx_int_1888542832)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1890179545 = PyInt_FromLong(1890179545L); if (unlikely(!__pyx_int_1890179545)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1890328081 = PyInt_FromLong(1890328081L); if (unlikely(!__pyx_int_1890328081)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1891211689 = PyInt_FromLong(1891211689L); if (unlikely(!__pyx_int_1891211689)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1893020342 = PyInt_FromLong(1893020342L); if (unlikely(!__pyx_int_1893020342)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1899603969 = PyInt_FromLong(1899603969L); if (unlikely(!__pyx_int_1899603969)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1901997871 = PyInt_FromLong(1901997871L); if (unlikely(!__pyx_int_1901997871)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1903268834 = PyInt_FromLong(1903268834L); if (unlikely(!__pyx_int_1903268834)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1905517169 = PyInt_FromLong(1905517169L); if (unlikely(!__pyx_int_1905517169)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1906247262 = PyInt_FromLong(1906247262L); if (unlikely(!__pyx_int_1906247262)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1907733956 = PyInt_FromLong(1907733956L); if (unlikely(!__pyx_int_1907733956)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1908694277 = PyInt_FromLong(1908694277L); if (unlikely(!__pyx_int_1908694277)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1910319033 = PyInt_FromLong(1910319033L); if (unlikely(!__pyx_int_1910319033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1914052035 = PyInt_FromLong(1914052035L); if (unlikely(!__pyx_int_1914052035)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1916352843 = PyInt_FromLong(1916352843L); if (unlikely(!__pyx_int_1916352843)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1917518562 = PyInt_FromLong(1917518562L); if (unlikely(!__pyx_int_1917518562)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1917742170 = PyInt_FromLong(1917742170L); if (unlikely(!__pyx_int_1917742170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1918643758 = PyInt_FromLong(1918643758L); if (unlikely(!__pyx_int_1918643758)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1920112356 = PyInt_FromLong(1920112356L); if (unlikely(!__pyx_int_1920112356)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1922491506 = PyInt_FromLong(1922491506L); if (unlikely(!__pyx_int_1922491506)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1928707164 = PyInt_FromLong(1928707164L); if (unlikely(!__pyx_int_1928707164)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1933530610 = PyInt_FromLong(1933530610L); if (unlikely(!__pyx_int_1933530610)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1936954854 = PyInt_FromLong(1936954854L); if (unlikely(!__pyx_int_1936954854)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1939203699 = PyInt_FromLong(1939203699L); if (unlikely(!__pyx_int_1939203699)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1940642008 = PyInt_FromLong(1940642008L); if (unlikely(!__pyx_int_1940642008)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1941222599 = PyInt_FromLong(1941222599L); if (unlikely(!__pyx_int_1941222599)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1942435775 = PyInt_FromLong(1942435775L); if (unlikely(!__pyx_int_1942435775)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1943217067 = PyInt_FromLong(1943217067L); if (unlikely(!__pyx_int_1943217067)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1945798516 = PyInt_FromLong(1945798516L); if (unlikely(!__pyx_int_1945798516)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1948373848 = PyInt_FromLong(1948373848L); if (unlikely(!__pyx_int_1948373848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1949973070 = PyInt_FromLong(1949973070L); if (unlikely(!__pyx_int_1949973070)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1950903388 = PyInt_FromLong(1950903388L); if (unlikely(!__pyx_int_1950903388)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1951317047 = PyInt_FromLong(1951317047L); if (unlikely(!__pyx_int_1951317047)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1951935532 = PyInt_FromLong(1951935532L); if (unlikely(!__pyx_int_1951935532)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1953757831 = PyInt_FromLong(1953757831L); if (unlikely(!__pyx_int_1953757831)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1953799400 = PyInt_FromLong(1953799400L); if (unlikely(!__pyx_int_1953799400)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1956440180 = PyInt_FromLong(1956440180L); if (unlikely(!__pyx_int_1956440180)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1963115311 = PyInt_FromLong(1963115311L); if (unlikely(!__pyx_int_1963115311)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1963412655 = PyInt_FromLong(1963412655L); if (unlikely(!__pyx_int_1963412655)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1970642922 = PyInt_FromLong(1970642922L); if (unlikely(!__pyx_int_1970642922)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1973414517 = PyInt_FromLong(1973414517L); if (unlikely(!__pyx_int_1973414517)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1973745387 = PyInt_FromLong(1973745387L); if (unlikely(!__pyx_int_1973745387)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1974459098 = PyInt_FromLong(1974459098L); if (unlikely(!__pyx_int_1974459098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1974974402 = PyInt_FromLong(1974974402L); if (unlikely(!__pyx_int_1974974402)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1975683434 = PyInt_FromLong(1975683434L); if (unlikely(!__pyx_int_1975683434)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1983593293 = PyInt_FromLong(1983593293L); if (unlikely(!__pyx_int_1983593293)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1984812685 = PyInt_FromLong(1984812685L); if (unlikely(!__pyx_int_1984812685)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1986918061 = PyInt_FromLong(1986918061L); if (unlikely(!__pyx_int_1986918061)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1987484396 = PyInt_FromLong(1987484396L); if (unlikely(!__pyx_int_1987484396)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1988838185 = PyInt_FromLong(1988838185L); if (unlikely(!__pyx_int_1988838185)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1989249228 = PyInt_FromLong(1989249228L); if (unlikely(!__pyx_int_1989249228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1989864566 = PyInt_FromLong(1989864566L); if (unlikely(!__pyx_int_1989864566)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1991105499 = PyInt_FromLong(1991105499L); if (unlikely(!__pyx_int_1991105499)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2001430874 = PyInt_FromLong(2001430874L); if (unlikely(!__pyx_int_2001430874)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2002398509 = PyInt_FromLong(2002398509L); if (unlikely(!__pyx_int_2002398509)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2003294622 = PyInt_FromLong(2003294622L); if (unlikely(!__pyx_int_2003294622)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2004326894 = PyInt_FromLong(2004326894L); if (unlikely(!__pyx_int_2004326894)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2006576759 = PyInt_FromLong(2006576759L); if (unlikely(!__pyx_int_2006576759)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2008463041 = PyInt_FromLong(2008463041L); if (unlikely(!__pyx_int_2008463041)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2009195472 = PyInt_FromLong(2009195472L); if (unlikely(!__pyx_int_2009195472)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2011214180 = PyInt_FromLong(2011214180L); if (unlikely(!__pyx_int_2011214180)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2013908262 = PyInt_FromLong(2013908262L); if (unlikely(!__pyx_int_2013908262)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2017213508 = PyInt_FromLong(2017213508L); if (unlikely(!__pyx_int_2017213508)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2017778566 = PyInt_FromLong(2017778566L); if (unlikely(!__pyx_int_2017778566)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2018519080 = PyInt_FromLong(2018519080L); if (unlikely(!__pyx_int_2018519080)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2021165296 = PyInt_FromLong(2021165296L); if (unlikely(!__pyx_int_2021165296)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2022240376 = PyInt_FromLong(2022240376L); if (unlikely(!__pyx_int_2022240376)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2022837584 = PyInt_FromLong(2022837584L); if (unlikely(!__pyx_int_2022837584)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2029293177 = PyInt_FromLong(2029293177L); if (unlikely(!__pyx_int_2029293177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2031621326 = PyInt_FromLong(2031621326L); if (unlikely(!__pyx_int_2031621326)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2037970062 = PyInt_FromLong(2037970062L); if (unlikely(!__pyx_int_2037970062)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2038008818 = PyInt_FromLong(2038008818L); if (unlikely(!__pyx_int_2038008818)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2039214713 = PyInt_FromLong(2039214713L); if (unlikely(!__pyx_int_2039214713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2041044702 = PyInt_FromLong(2041044702L); if (unlikely(!__pyx_int_2041044702)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2041688520 = PyInt_FromLong(2041688520L); if (unlikely(!__pyx_int_2041688520)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2041877159 = PyInt_FromLong(2041877159L); if (unlikely(!__pyx_int_2041877159)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2043211483 = PyInt_FromLong(2043211483L); if (unlikely(!__pyx_int_2043211483)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2050466060 = PyInt_FromLong(2050466060L); if (unlikely(!__pyx_int_2050466060)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2050833735 = PyInt_FromLong(2050833735L); if (unlikely(!__pyx_int_2050833735)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2051518780 = PyInt_FromLong(2051518780L); if (unlikely(!__pyx_int_2051518780)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2054852340 = PyInt_FromLong(2054852340L); if (unlikely(!__pyx_int_2054852340)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2056189050 = PyInt_FromLong(2056189050L); if (unlikely(!__pyx_int_2056189050)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2057691103 = PyInt_FromLong(2057691103L); if (unlikely(!__pyx_int_2057691103)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2061379749 = PyInt_FromLong(2061379749L); if (unlikely(!__pyx_int_2061379749)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2062270317 = PyInt_FromLong(2062270317L); if (unlikely(!__pyx_int_2062270317)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2068982057 = PyInt_FromLong(2068982057L); if (unlikely(!__pyx_int_2068982057)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2071694838 = PyInt_FromLong(2071694838L); if (unlikely(!__pyx_int_2071694838)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2072901243 = PyInt_FromLong(2072901243L); if (unlikely(!__pyx_int_2072901243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2073724613 = PyInt_FromLong(2073724613L); if (unlikely(!__pyx_int_2073724613)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2075177163 = PyInt_FromLong(2075177163L); if (unlikely(!__pyx_int_2075177163)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2076935265 = PyInt_FromLong(2076935265L); if (unlikely(!__pyx_int_2076935265)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2077965243 = PyInt_FromLong(2077965243L); if (unlikely(!__pyx_int_2077965243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2079897426 = PyInt_FromLong(2079897426L); if (unlikely(!__pyx_int_2079897426)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2081048481 = PyInt_FromLong(2081048481L); if (unlikely(!__pyx_int_2081048481)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2084453954 = PyInt_FromLong(2084453954L); if (unlikely(!__pyx_int_2084453954)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2084704233 = PyInt_FromLong(2084704233L); if (unlikely(!__pyx_int_2084704233)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2087309459 = PyInt_FromLong(2087309459L); if (unlikely(!__pyx_int_2087309459)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2088535288 = PyInt_FromLong(2088535288L); if (unlikely(!__pyx_int_2088535288)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2089089148 = PyInt_FromLong(2089089148L); if (unlikely(!__pyx_int_2089089148)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2090982877 = PyInt_FromLong(2090982877L); if (unlikely(!__pyx_int_2090982877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2094410160 = PyInt_FromLong(2094410160L); if (unlikely(!__pyx_int_2094410160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2100090966 = PyInt_FromLong(2100090966L); if (unlikely(!__pyx_int_2100090966)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2102799147 = PyInt_FromLong(2102799147L); if (unlikely(!__pyx_int_2102799147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2105378810 = PyInt_FromLong(2105378810L); if (unlikely(!__pyx_int_2105378810)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2105887268 = PyInt_FromLong(2105887268L); if (unlikely(!__pyx_int_2105887268)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2106063485 = PyInt_FromLong(2106063485L); if (unlikely(!__pyx_int_2106063485)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2108100632 = PyInt_FromLong(2108100632L); if (unlikely(!__pyx_int_2108100632)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2108928974 = PyInt_FromLong(2108928974L); if (unlikely(!__pyx_int_2108928974)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2110667444 = PyInt_FromLong(2110667444L); if (unlikely(!__pyx_int_2110667444)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2117360635 = PyInt_FromLong(2117360635L); if (unlikely(!__pyx_int_2117360635)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2118074177 = PyInt_FromLong(2118074177L); if (unlikely(!__pyx_int_2118074177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2118214995 = PyInt_FromLong(2118214995L); if (unlikely(!__pyx_int_2118214995)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2118541908 = PyInt_FromLong(2118541908L); if (unlikely(!__pyx_int_2118541908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2119445034 = PyInt_FromLong(2119445034L); if (unlikely(!__pyx_int_2119445034)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2122220284 = PyInt_FromLong(2122220284L); if (unlikely(!__pyx_int_2122220284)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2122513534 = PyInt_FromLong(2122513534L); if (unlikely(!__pyx_int_2122513534)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2125135846 = PyInt_FromLong(2125135846L); if (unlikely(!__pyx_int_2125135846)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2135253587 = PyInt_FromLong(2135253587L); if (unlikely(!__pyx_int_2135253587)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2135319889 = PyInt_FromLong(2135319889L); if (unlikely(!__pyx_int_2135319889)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2137062819 = PyInt_FromLong(2137062819L); if (unlikely(!__pyx_int_2137062819)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2139062782 = PyInt_FromLong(2139062782L); if (unlikely(!__pyx_int_2139062782)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2139225727 = PyInt_FromLong(2139225727L); if (unlikely(!__pyx_int_2139225727)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2141445340 = PyInt_FromLong(2141445340L); if (unlikely(!__pyx_int_2141445340)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2142417613 = PyInt_FromLong(2142417613L); if (unlikely(!__pyx_int_2142417613)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2144161806 = PyInt_FromLong(2144161806L); if (unlikely(!__pyx_int_2144161806)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2148108681 = PyInt_FromString((char *)"2148108681", 0, 0); if (unlikely(!__pyx_int_2148108681)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2149987652 = PyInt_FromString((char *)"2149987652", 0, 0); if (unlikely(!__pyx_int_2149987652)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2151694528 = PyInt_FromString((char *)"2151694528", 0, 0); if (unlikely(!__pyx_int_2151694528)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2155911963 = PyInt_FromString((char *)"2155911963", 0, 0); if (unlikely(!__pyx_int_2155911963)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2156299017 = PyInt_FromString((char *)"2156299017", 0, 0); if (unlikely(!__pyx_int_2156299017)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2157648768 = PyInt_FromString((char *)"2157648768", 0, 0); if (unlikely(!__pyx_int_2157648768)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2159976285 = PyInt_FromString((char *)"2159976285", 0, 0); if (unlikely(!__pyx_int_2159976285)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2160117071 = PyInt_FromString((char *)"2160117071", 0, 0); if (unlikely(!__pyx_int_2160117071)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2169303058 = PyInt_FromString((char *)"2169303058", 0, 0); if (unlikely(!__pyx_int_2169303058)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2172753945 = PyInt_FromString((char *)"2172753945", 0, 0); if (unlikely(!__pyx_int_2172753945)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2174228865 = PyInt_FromString((char *)"2174228865", 0, 0); if (unlikely(!__pyx_int_2174228865)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2174754046 = PyInt_FromString((char *)"2174754046", 0, 0); if (unlikely(!__pyx_int_2174754046)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2177544179 = PyInt_FromString((char *)"2177544179", 0, 0); if (unlikely(!__pyx_int_2177544179)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2177748300 = PyInt_FromString((char *)"2177748300", 0, 0); if (unlikely(!__pyx_int_2177748300)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2177869557 = PyInt_FromString((char *)"2177869557", 0, 0); if (unlikely(!__pyx_int_2177869557)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2180939647 = PyInt_FromString((char *)"2180939647", 0, 0); if (unlikely(!__pyx_int_2180939647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2185314755 = PyInt_FromString((char *)"2185314755", 0, 0); if (unlikely(!__pyx_int_2185314755)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2187128086 = PyInt_FromString((char *)"2187128086", 0, 0); if (unlikely(!__pyx_int_2187128086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2189597983 = PyInt_FromString((char *)"2189597983", 0, 0); if (unlikely(!__pyx_int_2189597983)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2191335298 = PyInt_FromString((char *)"2191335298", 0, 0); if (unlikely(!__pyx_int_2191335298)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2193862645 = PyInt_FromString((char *)"2193862645", 0, 0); if (unlikely(!__pyx_int_2193862645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2194319100 = PyInt_FromString((char *)"2194319100", 0, 0); if (unlikely(!__pyx_int_2194319100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2196052529 = PyInt_FromString((char *)"2196052529", 0, 0); if (unlikely(!__pyx_int_2196052529)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2197585534 = PyInt_FromString((char *)"2197585534", 0, 0); if (unlikely(!__pyx_int_2197585534)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2198438022 = PyInt_FromString((char *)"2198438022", 0, 0); if (unlikely(!__pyx_int_2198438022)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2198571144 = PyInt_FromString((char *)"2198571144", 0, 0); if (unlikely(!__pyx_int_2198571144)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2200818878 = PyInt_FromString((char *)"2200818878", 0, 0); if (unlikely(!__pyx_int_2200818878)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2203032232 = PyInt_FromString((char *)"2203032232", 0, 0); if (unlikely(!__pyx_int_2203032232)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2206440989 = PyInt_FromString((char *)"2206440989", 0, 0); if (unlikely(!__pyx_int_2206440989)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2208177539 = PyInt_FromString((char *)"2208177539", 0, 0); if (unlikely(!__pyx_int_2208177539)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2211236943 = PyInt_FromString((char *)"2211236943", 0, 0); if (unlikely(!__pyx_int_2211236943)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2213296395 = PyInt_FromString((char *)"2213296395", 0, 0); if (unlikely(!__pyx_int_2213296395)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2216610296 = PyInt_FromString((char *)"2216610296", 0, 0); if (unlikely(!__pyx_int_2216610296)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2218934982 = PyInt_FromString((char *)"2218934982", 0, 0); if (unlikely(!__pyx_int_2218934982)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2220981195 = PyInt_FromString((char *)"2220981195", 0, 0); if (unlikely(!__pyx_int_2220981195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2223281939 = PyInt_FromString((char *)"2223281939", 0, 0); if (unlikely(!__pyx_int_2223281939)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2224493444 = PyInt_FromString((char *)"2224493444", 0, 0); if (unlikely(!__pyx_int_2224493444)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2226875310 = PyInt_FromString((char *)"2226875310", 0, 0); if (unlikely(!__pyx_int_2226875310)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2227573024 = PyInt_FromString((char *)"2227573024", 0, 0); if (unlikely(!__pyx_int_2227573024)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2230877308 = PyInt_FromString((char *)"2230877308", 0, 0); if (unlikely(!__pyx_int_2230877308)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2232388234 = PyInt_FromString((char *)"2232388234", 0, 0); if (unlikely(!__pyx_int_2232388234)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2232435299 = PyInt_FromString((char *)"2232435299", 0, 0); if (unlikely(!__pyx_int_2232435299)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2235061775 = PyInt_FromString((char *)"2235061775", 0, 0); if (unlikely(!__pyx_int_2235061775)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2236228733 = PyInt_FromString((char *)"2236228733", 0, 0); if (unlikely(!__pyx_int_2236228733)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2237133081 = PyInt_FromString((char *)"2237133081", 0, 0); if (unlikely(!__pyx_int_2237133081)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2240123921 = PyInt_FromString((char *)"2240123921", 0, 0); if (unlikely(!__pyx_int_2240123921)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2241073541 = PyInt_FromString((char *)"2241073541", 0, 0); if (unlikely(!__pyx_int_2241073541)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2244988746 = PyInt_FromString((char *)"2244988746", 0, 0); if (unlikely(!__pyx_int_2244988746)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2249034635 = PyInt_FromString((char *)"2249034635", 0, 0); if (unlikely(!__pyx_int_2249034635)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2252555205 = PyInt_FromString((char *)"2252555205", 0, 0); if (unlikely(!__pyx_int_2252555205)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2253581325 = PyInt_FromString((char *)"2253581325", 0, 0); if (unlikely(!__pyx_int_2253581325)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2256028891 = PyInt_FromString((char *)"2256028891", 0, 0); if (unlikely(!__pyx_int_2256028891)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2256734592 = PyInt_FromString((char *)"2256734592", 0, 0); if (unlikely(!__pyx_int_2256734592)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2256965911 = PyInt_FromString((char *)"2256965911", 0, 0); if (unlikely(!__pyx_int_2256965911)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2257655686 = PyInt_FromString((char *)"2257655686", 0, 0); if (unlikely(!__pyx_int_2257655686)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2261089178 = PyInt_FromString((char *)"2261089178", 0, 0); if (unlikely(!__pyx_int_2261089178)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2269728455 = PyInt_FromString((char *)"2269728455", 0, 0); if (unlikely(!__pyx_int_2269728455)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2272556026 = PyInt_FromString((char *)"2272556026", 0, 0); if (unlikely(!__pyx_int_2272556026)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2273808917 = PyInt_FromString((char *)"2273808917", 0, 0); if (unlikely(!__pyx_int_2273808917)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2274497927 = PyInt_FromString((char *)"2274497927", 0, 0); if (unlikely(!__pyx_int_2274497927)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2274680428 = PyInt_FromString((char *)"2274680428", 0, 0); if (unlikely(!__pyx_int_2274680428)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2278477385 = PyInt_FromString((char *)"2278477385", 0, 0); if (unlikely(!__pyx_int_2278477385)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2280796200 = PyInt_FromString((char *)"2280796200", 0, 0); if (unlikely(!__pyx_int_2280796200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2281340285 = PyInt_FromString((char *)"2281340285", 0, 0); if (unlikely(!__pyx_int_2281340285)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2282195339 = PyInt_FromString((char *)"2282195339", 0, 0); if (unlikely(!__pyx_int_2282195339)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2283490410 = PyInt_FromString((char *)"2283490410", 0, 0); if (unlikely(!__pyx_int_2283490410)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2286175436 = PyInt_FromString((char *)"2286175436", 0, 0); if (unlikely(!__pyx_int_2286175436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2290289544 = PyInt_FromString((char *)"2290289544", 0, 0); if (unlikely(!__pyx_int_2290289544)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2290647819 = PyInt_FromString((char *)"2290647819", 0, 0); if (unlikely(!__pyx_int_2290647819)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2293045232 = PyInt_FromString((char *)"2293045232", 0, 0); if (unlikely(!__pyx_int_2293045232)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2295101073 = PyInt_FromString((char *)"2295101073", 0, 0); if (unlikely(!__pyx_int_2295101073)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2297460856 = PyInt_FromString((char *)"2297460856", 0, 0); if (unlikely(!__pyx_int_2297460856)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2298973838 = PyInt_FromString((char *)"2298973838", 0, 0); if (unlikely(!__pyx_int_2298973838)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2302690252 = PyInt_FromString((char *)"2302690252", 0, 0); if (unlikely(!__pyx_int_2302690252)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2305455554 = PyInt_FromString((char *)"2305455554", 0, 0); if (unlikely(!__pyx_int_2305455554)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2306869641 = PyInt_FromString((char *)"2306869641", 0, 0); if (unlikely(!__pyx_int_2306869641)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2307489801 = PyInt_FromString((char *)"2307489801", 0, 0); if (unlikely(!__pyx_int_2307489801)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2307622919 = PyInt_FromString((char *)"2307622919", 0, 0); if (unlikely(!__pyx_int_2307622919)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2311702848 = PyInt_FromString((char *)"2311702848", 0, 0); if (unlikely(!__pyx_int_2311702848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2313884476 = PyInt_FromString((char *)"2313884476", 0, 0); if (unlikely(!__pyx_int_2313884476)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2315620239 = PyInt_FromString((char *)"2315620239", 0, 0); if (unlikely(!__pyx_int_2315620239)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2319795663 = PyInt_FromString((char *)"2319795663", 0, 0); if (unlikely(!__pyx_int_2319795663)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2323976074 = PyInt_FromString((char *)"2323976074", 0, 0); if (unlikely(!__pyx_int_2323976074)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2324333839 = PyInt_FromString((char *)"2324333839", 0, 0); if (unlikely(!__pyx_int_2324333839)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2328143614 = PyInt_FromString((char *)"2328143614", 0, 0); if (unlikely(!__pyx_int_2328143614)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2328828971 = PyInt_FromString((char *)"2328828971", 0, 0); if (unlikely(!__pyx_int_2328828971)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2330014213 = PyInt_FromString((char *)"2330014213", 0, 0); if (unlikely(!__pyx_int_2330014213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2331590177 = PyInt_FromString((char *)"2331590177", 0, 0); if (unlikely(!__pyx_int_2331590177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2334669897 = PyInt_FromString((char *)"2334669897", 0, 0); if (unlikely(!__pyx_int_2334669897)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2336434550 = PyInt_FromString((char *)"2336434550", 0, 0); if (unlikely(!__pyx_int_2336434550)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2340818315 = PyInt_FromString((char *)"2340818315", 0, 0); if (unlikely(!__pyx_int_2340818315)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2340947849 = PyInt_FromString((char *)"2340947849", 0, 0); if (unlikely(!__pyx_int_2340947849)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2341176845 = PyInt_FromString((char *)"2341176845", 0, 0); if (unlikely(!__pyx_int_2341176845)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2345119218 = PyInt_FromString((char *)"2345119218", 0, 0); if (unlikely(!__pyx_int_2345119218)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2345191491 = PyInt_FromString((char *)"2345191491", 0, 0); if (unlikely(!__pyx_int_2345191491)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2347923833 = PyInt_FromString((char *)"2347923833", 0, 0); if (unlikely(!__pyx_int_2347923833)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2348912013 = PyInt_FromString((char *)"2348912013", 0, 0); if (unlikely(!__pyx_int_2348912013)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2352307457 = PyInt_FromString((char *)"2352307457", 0, 0); if (unlikely(!__pyx_int_2352307457)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2353415882 = PyInt_FromString((char *)"2353415882", 0, 0); if (unlikely(!__pyx_int_2353415882)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2358021891 = PyInt_FromString((char *)"2358021891", 0, 0); if (unlikely(!__pyx_int_2358021891)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2358182796 = PyInt_FromString((char *)"2358182796", 0, 0); if (unlikely(!__pyx_int_2358182796)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2358957921 = PyInt_FromString((char *)"2358957921", 0, 0); if (unlikely(!__pyx_int_2358957921)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2361698556 = PyInt_FromString((char *)"2361698556", 0, 0); if (unlikely(!__pyx_int_2361698556)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2362090238 = PyInt_FromString((char *)"2362090238", 0, 0); if (unlikely(!__pyx_int_2362090238)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2366882550 = PyInt_FromString((char *)"2366882550", 0, 0); if (unlikely(!__pyx_int_2366882550)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2370213795 = PyInt_FromString((char *)"2370213795", 0, 0); if (unlikely(!__pyx_int_2370213795)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2373340630 = PyInt_FromString((char *)"2373340630", 0, 0); if (unlikely(!__pyx_int_2373340630)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2374762893 = PyInt_FromString((char *)"2374762893", 0, 0); if (unlikely(!__pyx_int_2374762893)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2374863873 = PyInt_FromString((char *)"2374863873", 0, 0); if (unlikely(!__pyx_int_2374863873)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2377486676 = PyInt_FromString((char *)"2377486676", 0, 0); if (unlikely(!__pyx_int_2377486676)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2378943302 = PyInt_FromString((char *)"2378943302", 0, 0); if (unlikely(!__pyx_int_2378943302)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2381740923 = PyInt_FromString((char *)"2381740923", 0, 0); if (unlikely(!__pyx_int_2381740923)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2384911031 = PyInt_FromString((char *)"2384911031", 0, 0); if (unlikely(!__pyx_int_2384911031)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2387036105 = PyInt_FromString((char *)"2387036105", 0, 0); if (unlikely(!__pyx_int_2387036105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2388260884 = PyInt_FromString((char *)"2388260884", 0, 0); if (unlikely(!__pyx_int_2388260884)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2390325492 = PyInt_FromString((char *)"2390325492", 0, 0); if (unlikely(!__pyx_int_2390325492)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2391345038 = PyInt_FromString((char *)"2391345038", 0, 0); if (unlikely(!__pyx_int_2391345038)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2391705863 = PyInt_FromString((char *)"2391705863", 0, 0); if (unlikely(!__pyx_int_2391705863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2395588676 = PyInt_FromString((char *)"2395588676", 0, 0); if (unlikely(!__pyx_int_2395588676)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2398386810 = PyInt_FromString((char *)"2398386810", 0, 0); if (unlikely(!__pyx_int_2398386810)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2399374476 = PyInt_FromString((char *)"2399374476", 0, 0); if (unlikely(!__pyx_int_2399374476)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2403728665 = PyInt_FromString((char *)"2403728665", 0, 0); if (unlikely(!__pyx_int_2403728665)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2404901663 = PyInt_FromString((char *)"2404901663", 0, 0); if (unlikely(!__pyx_int_2404901663)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2405426947 = PyInt_FromString((char *)"2405426947", 0, 0); if (unlikely(!__pyx_int_2405426947)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2408187279 = PyInt_FromString((char *)"2408187279", 0, 0); if (unlikely(!__pyx_int_2408187279)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2408548869 = PyInt_FromString((char *)"2408548869", 0, 0); if (unlikely(!__pyx_int_2408548869)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2411029155 = PyInt_FromString((char *)"2411029155", 0, 0); if (unlikely(!__pyx_int_2411029155)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2412431941 = PyInt_FromString((char *)"2412431941", 0, 0); if (unlikely(!__pyx_int_2412431941)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2420656344 = PyInt_FromString((char *)"2420656344", 0, 0); if (unlikely(!__pyx_int_2420656344)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2422494913 = PyInt_FromString((char *)"2422494913", 0, 0); if (unlikely(!__pyx_int_2422494913)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2425400123 = PyInt_FromString((char *)"2425400123", 0, 0); if (unlikely(!__pyx_int_2425400123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2427141008 = PyInt_FromString((char *)"2427141008", 0, 0); if (unlikely(!__pyx_int_2427141008)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2429595872 = PyInt_FromString((char *)"2429595872", 0, 0); if (unlikely(!__pyx_int_2429595872)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2430122216 = PyInt_FromString((char *)"2430122216", 0, 0); if (unlikely(!__pyx_int_2430122216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2430627952 = PyInt_FromString((char *)"2430627952", 0, 0); if (unlikely(!__pyx_int_2430627952)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2431590963 = PyInt_FromString((char *)"2431590963", 0, 0); if (unlikely(!__pyx_int_2431590963)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2434238086 = PyInt_FromString((char *)"2434238086", 0, 0); if (unlikely(!__pyx_int_2434238086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2438237621 = PyInt_FromString((char *)"2438237621", 0, 0); if (unlikely(!__pyx_int_2438237621)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2441661558 = PyInt_FromString((char *)"2441661558", 0, 0); if (unlikely(!__pyx_int_2441661558)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2442242105 = PyInt_FromString((char *)"2442242105", 0, 0); if (unlikely(!__pyx_int_2442242105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2443058075 = PyInt_FromString((char *)"2443058075", 0, 0); if (unlikely(!__pyx_int_2443058075)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2443721105 = PyInt_FromString((char *)"2443721105", 0, 0); if (unlikely(!__pyx_int_2443721105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2445657428 = PyInt_FromString((char *)"2445657428", 0, 0); if (unlikely(!__pyx_int_2445657428)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2448830231 = PyInt_FromString((char *)"2448830231", 0, 0); if (unlikely(!__pyx_int_2448830231)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2450346104 = PyInt_FromString((char *)"2450346104", 0, 0); if (unlikely(!__pyx_int_2450346104)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2450884487 = PyInt_FromString((char *)"2450884487", 0, 0); if (unlikely(!__pyx_int_2450884487)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2454276571 = PyInt_FromString((char *)"2454276571", 0, 0); if (unlikely(!__pyx_int_2454276571)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2459086143 = PyInt_FromString((char *)"2459086143", 0, 0); if (unlikely(!__pyx_int_2459086143)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2459735317 = PyInt_FromString((char *)"2459735317", 0, 0); if (unlikely(!__pyx_int_2459735317)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2460449204 = PyInt_FromString((char *)"2460449204", 0, 0); if (unlikely(!__pyx_int_2460449204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2460827538 = PyInt_FromString((char *)"2460827538", 0, 0); if (unlikely(!__pyx_int_2460827538)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2463879762 = PyInt_FromString((char *)"2463879762", 0, 0); if (unlikely(!__pyx_int_2463879762)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2471224067 = PyInt_FromString((char *)"2471224067", 0, 0); if (unlikely(!__pyx_int_2471224067)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2472011535 = PyInt_FromString((char *)"2472011535", 0, 0); if (unlikely(!__pyx_int_2472011535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2474404304 = PyInt_FromString((char *)"2474404304", 0, 0); if (unlikely(!__pyx_int_2474404304)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2475929149 = PyInt_FromString((char *)"2475929149", 0, 0); if (unlikely(!__pyx_int_2475929149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2477669779 = PyInt_FromString((char *)"2477669779", 0, 0); if (unlikely(!__pyx_int_2477669779)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2478443234 = PyInt_FromString((char *)"2478443234", 0, 0); if (unlikely(!__pyx_int_2478443234)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2479146071 = PyInt_FromString((char *)"2479146071", 0, 0); if (unlikely(!__pyx_int_2479146071)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2481090929 = PyInt_FromString((char *)"2481090929", 0, 0); if (unlikely(!__pyx_int_2481090929)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2484176261 = PyInt_FromString((char *)"2484176261", 0, 0); if (unlikely(!__pyx_int_2484176261)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2486224549 = PyInt_FromString((char *)"2486224549", 0, 0); if (unlikely(!__pyx_int_2486224549)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2487810577 = PyInt_FromString((char *)"2487810577", 0, 0); if (unlikely(!__pyx_int_2487810577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2487896798 = PyInt_FromString((char *)"2487896798", 0, 0); if (unlikely(!__pyx_int_2487896798)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2492770099 = PyInt_FromString((char *)"2492770099", 0, 0); if (unlikely(!__pyx_int_2492770099)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2493985684 = PyInt_FromString((char *)"2493985684", 0, 0); if (unlikely(!__pyx_int_2493985684)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2497604743 = PyInt_FromString((char *)"2497604743", 0, 0); if (unlikely(!__pyx_int_2497604743)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2499348523 = PyInt_FromString((char *)"2499348523", 0, 0); if (unlikely(!__pyx_int_2499348523)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2501218972 = PyInt_FromString((char *)"2501218972", 0, 0); if (unlikely(!__pyx_int_2501218972)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2504130317 = PyInt_FromString((char *)"2504130317", 0, 0); if (unlikely(!__pyx_int_2504130317)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2505202138 = PyInt_FromString((char *)"2505202138", 0, 0); if (unlikely(!__pyx_int_2505202138)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2507040230 = PyInt_FromString((char *)"2507040230", 0, 0); if (unlikely(!__pyx_int_2507040230)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2509612081 = PyInt_FromString((char *)"2509612081", 0, 0); if (unlikely(!__pyx_int_2509612081)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2510565781 = PyInt_FromString((char *)"2510565781", 0, 0); if (unlikely(!__pyx_int_2510565781)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2512897874 = PyInt_FromString((char *)"2512897874", 0, 0); if (unlikely(!__pyx_int_2512897874)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2514908019 = PyInt_FromString((char *)"2514908019", 0, 0); if (unlikely(!__pyx_int_2514908019)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2516901860 = PyInt_FromString((char *)"2516901860", 0, 0); if (unlikely(!__pyx_int_2516901860)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2520393566 = PyInt_FromString((char *)"2520393566", 0, 0); if (unlikely(!__pyx_int_2520393566)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2521517021 = PyInt_FromString((char *)"2521517021", 0, 0); if (unlikely(!__pyx_int_2521517021)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2526454071 = PyInt_FromString((char *)"2526454071", 0, 0); if (unlikely(!__pyx_int_2526454071)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2527147926 = PyInt_FromString((char *)"2527147926", 0, 0); if (unlikely(!__pyx_int_2527147926)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2530391278 = PyInt_FromString((char *)"2530391278", 0, 0); if (unlikely(!__pyx_int_2530391278)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2531067453 = PyInt_FromString((char *)"2531067453", 0, 0); if (unlikely(!__pyx_int_2531067453)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2531553906 = PyInt_FromString((char *)"2531553906", 0, 0); if (unlikely(!__pyx_int_2531553906)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2534638724 = PyInt_FromString((char *)"2534638724", 0, 0); if (unlikely(!__pyx_int_2534638724)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2535604243 = PyInt_FromString((char *)"2535604243", 0, 0); if (unlikely(!__pyx_int_2535604243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2538681184 = PyInt_FromString((char *)"2538681184", 0, 0); if (unlikely(!__pyx_int_2538681184)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2543297077 = PyInt_FromString((char *)"2543297077", 0, 0); if (unlikely(!__pyx_int_2543297077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2543990167 = PyInt_FromString((char *)"2543990167", 0, 0); if (unlikely(!__pyx_int_2543990167)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2544078150 = PyInt_FromString((char *)"2544078150", 0, 0); if (unlikely(!__pyx_int_2544078150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2546386513 = PyInt_FromString((char *)"2546386513", 0, 0); if (unlikely(!__pyx_int_2546386513)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2547432937 = PyInt_FromString((char *)"2547432937", 0, 0); if (unlikely(!__pyx_int_2547432937)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2551808385 = PyInt_FromString((char *)"2551808385", 0, 0); if (unlikely(!__pyx_int_2551808385)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2554718734 = PyInt_FromString((char *)"2554718734", 0, 0); if (unlikely(!__pyx_int_2554718734)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2555048196 = PyInt_FromString((char *)"2555048196", 0, 0); if (unlikely(!__pyx_int_2555048196)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2555137236 = PyInt_FromString((char *)"2555137236", 0, 0); if (unlikely(!__pyx_int_2555137236)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2560144171 = PyInt_FromString((char *)"2560144171", 0, 0); if (unlikely(!__pyx_int_2560144171)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2561878936 = PyInt_FromString((char *)"2561878936", 0, 0); if (unlikely(!__pyx_int_2561878936)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2564033334 = PyInt_FromString((char *)"2564033334", 0, 0); if (unlikely(!__pyx_int_2564033334)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2566595609 = PyInt_FromString((char *)"2566595609", 0, 0); if (unlikely(!__pyx_int_2566595609)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2570832044 = PyInt_FromString((char *)"2570832044", 0, 0); if (unlikely(!__pyx_int_2570832044)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2572697195 = PyInt_FromString((char *)"2572697195", 0, 0); if (unlikely(!__pyx_int_2572697195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2576986153 = PyInt_FromString((char *)"2576986153", 0, 0); if (unlikely(!__pyx_int_2576986153)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2578018489 = PyInt_FromString((char *)"2578018489", 0, 0); if (unlikely(!__pyx_int_2578018489)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2578459033 = PyInt_FromString((char *)"2578459033", 0, 0); if (unlikely(!__pyx_int_2578459033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2579611992 = PyInt_FromString((char *)"2579611992", 0, 0); if (unlikely(!__pyx_int_2579611992)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2581445614 = PyInt_FromString((char *)"2581445614", 0, 0); if (unlikely(!__pyx_int_2581445614)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2582542199 = PyInt_FromString((char *)"2582542199", 0, 0); if (unlikely(!__pyx_int_2582542199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2588757463 = PyInt_FromString((char *)"2588757463", 0, 0); if (unlikely(!__pyx_int_2588757463)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2592523643 = PyInt_FromString((char *)"2592523643", 0, 0); if (unlikely(!__pyx_int_2592523643)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2593830191 = PyInt_FromString((char *)"2593830191", 0, 0); if (unlikely(!__pyx_int_2593830191)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2594734927 = PyInt_FromString((char *)"2594734927", 0, 0); if (unlikely(!__pyx_int_2594734927)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2595565466 = PyInt_FromString((char *)"2595565466", 0, 0); if (unlikely(!__pyx_int_2595565466)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2595684844 = PyInt_FromString((char *)"2595684844", 0, 0); if (unlikely(!__pyx_int_2595684844)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2597806476 = PyInt_FromString((char *)"2597806476", 0, 0); if (unlikely(!__pyx_int_2597806476)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2599188086 = PyInt_FromString((char *)"2599188086", 0, 0); if (unlikely(!__pyx_int_2599188086)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2602270848 = PyInt_FromString((char *)"2602270848", 0, 0); if (unlikely(!__pyx_int_2602270848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2606453969 = PyInt_FromString((char *)"2606453969", 0, 0); if (unlikely(!__pyx_int_2606453969)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2607439820 = PyInt_FromString((char *)"2607439820", 0, 0); if (unlikely(!__pyx_int_2607439820)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2610011675 = PyInt_FromString((char *)"2610011675", 0, 0); if (unlikely(!__pyx_int_2610011675)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2610673197 = PyInt_FromString((char *)"2610673197", 0, 0); if (unlikely(!__pyx_int_2610673197)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2612407707 = PyInt_FromString((char *)"2612407707", 0, 0); if (unlikely(!__pyx_int_2612407707)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2613100635 = PyInt_FromString((char *)"2613100635", 0, 0); if (unlikely(!__pyx_int_2613100635)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2614737639 = PyInt_FromString((char *)"2614737639", 0, 0); if (unlikely(!__pyx_int_2614737639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2622377682 = PyInt_FromString((char *)"2622377682", 0, 0); if (unlikely(!__pyx_int_2622377682)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2623762152 = PyInt_FromString((char *)"2623762152", 0, 0); if (unlikely(!__pyx_int_2623762152)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2627016082 = PyInt_FromString((char *)"2627016082", 0, 0); if (unlikely(!__pyx_int_2627016082)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2627518243 = PyInt_FromString((char *)"2627518243", 0, 0); if (unlikely(!__pyx_int_2627518243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2629772188 = PyInt_FromString((char *)"2629772188", 0, 0); if (unlikely(!__pyx_int_2629772188)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2631065433 = PyInt_FromString((char *)"2631065433", 0, 0); if (unlikely(!__pyx_int_2631065433)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2631447780 = PyInt_FromString((char *)"2631447780", 0, 0); if (unlikely(!__pyx_int_2631447780)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2632479860 = PyInt_FromString((char *)"2632479860", 0, 0); if (unlikely(!__pyx_int_2632479860)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2636087938 = PyInt_FromString((char *)"2636087938", 0, 0); if (unlikely(!__pyx_int_2636087938)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2637442643 = PyInt_FromString((char *)"2637442643", 0, 0); if (unlikely(!__pyx_int_2637442643)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2638606623 = PyInt_FromString((char *)"2638606623", 0, 0); if (unlikely(!__pyx_int_2638606623)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2640243204 = PyInt_FromString((char *)"2640243204", 0, 0); if (unlikely(!__pyx_int_2640243204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2644360225 = PyInt_FromString((char *)"2644360225", 0, 0); if (unlikely(!__pyx_int_2644360225)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2646352285 = PyInt_FromString((char *)"2646352285", 0, 0); if (unlikely(!__pyx_int_2646352285)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2646852446 = PyInt_FromString((char *)"2646852446", 0, 0); if (unlikely(!__pyx_int_2646852446)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2648976442 = PyInt_FromString((char *)"2648976442", 0, 0); if (unlikely(!__pyx_int_2648976442)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2652609425 = PyInt_FromString((char *)"2652609425", 0, 0); if (unlikely(!__pyx_int_2652609425)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2652734339 = PyInt_FromString((char *)"2652734339", 0, 0); if (unlikely(!__pyx_int_2652734339)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2653899549 = PyInt_FromString((char *)"2653899549", 0, 0); if (unlikely(!__pyx_int_2653899549)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2655997905 = PyInt_FromString((char *)"2655997905", 0, 0); if (unlikely(!__pyx_int_2655997905)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2658625497 = PyInt_FromString((char *)"2658625497", 0, 0); if (unlikely(!__pyx_int_2658625497)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2661202215 = PyInt_FromString((char *)"2661202215", 0, 0); if (unlikely(!__pyx_int_2661202215)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2662934430 = PyInt_FromString((char *)"2662934430", 0, 0); if (unlikely(!__pyx_int_2662934430)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2664543715 = PyInt_FromString((char *)"2664543715", 0, 0); if (unlikely(!__pyx_int_2664543715)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2667994737 = PyInt_FromString((char *)"2667994737", 0, 0); if (unlikely(!__pyx_int_2667994737)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2668221674 = PyInt_FromString((char *)"2668221674", 0, 0); if (unlikely(!__pyx_int_2668221674)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2673705150 = PyInt_FromString((char *)"2673705150", 0, 0); if (unlikely(!__pyx_int_2673705150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2678045221 = PyInt_FromString((char *)"2678045221", 0, 0); if (unlikely(!__pyx_int_2678045221)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2679776671 = PyInt_FromString((char *)"2679776671", 0, 0); if (unlikely(!__pyx_int_2679776671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2680341085 = PyInt_FromString((char *)"2680341085", 0, 0); if (unlikely(!__pyx_int_2680341085)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2682942837 = PyInt_FromString((char *)"2682942837", 0, 0); if (unlikely(!__pyx_int_2682942837)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2683765030 = PyInt_FromString((char *)"2683765030", 0, 0); if (unlikely(!__pyx_int_2683765030)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2686254721 = PyInt_FromString((char *)"2686254721", 0, 0); if (unlikely(!__pyx_int_2686254721)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2687165888 = PyInt_FromString((char *)"2687165888", 0, 0); if (unlikely(!__pyx_int_2687165888)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2689618160 = PyInt_FromString((char *)"2689618160", 0, 0); if (unlikely(!__pyx_int_2689618160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2694904667 = PyInt_FromString((char *)"2694904667", 0, 0); if (unlikely(!__pyx_int_2694904667)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2695033685 = PyInt_FromString((char *)"2695033685", 0, 0); if (unlikely(!__pyx_int_2695033685)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2696962144 = PyInt_FromString((char *)"2696962144", 0, 0); if (unlikely(!__pyx_int_2696962144)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2700099354 = PyInt_FromString((char *)"2700099354", 0, 0); if (unlikely(!__pyx_int_2700099354)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2700827552 = PyInt_FromString((char *)"2700827552", 0, 0); if (unlikely(!__pyx_int_2700827552)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2701949495 = PyInt_FromString((char *)"2701949495", 0, 0); if (unlikely(!__pyx_int_2701949495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2704774806 = PyInt_FromString((char *)"2704774806", 0, 0); if (unlikely(!__pyx_int_2704774806)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2706270690 = PyInt_FromString((char *)"2706270690", 0, 0); if (unlikely(!__pyx_int_2706270690)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2708326185 = PyInt_FromString((char *)"2708326185", 0, 0); if (unlikely(!__pyx_int_2708326185)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2709260871 = PyInt_FromString((char *)"2709260871", 0, 0); if (unlikely(!__pyx_int_2709260871)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2711746649 = PyInt_FromString((char *)"2711746649", 0, 0); if (unlikely(!__pyx_int_2711746649)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2715671932 = PyInt_FromString((char *)"2715671932", 0, 0); if (unlikely(!__pyx_int_2715671932)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2717407649 = PyInt_FromString((char *)"2717407649", 0, 0); if (unlikely(!__pyx_int_2717407649)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2721421207 = PyInt_FromString((char *)"2721421207", 0, 0); if (unlikely(!__pyx_int_2721421207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2723238387 = PyInt_FromString((char *)"2723238387", 0, 0); if (unlikely(!__pyx_int_2723238387)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2724322336 = PyInt_FromString((char *)"2724322336", 0, 0); if (unlikely(!__pyx_int_2724322336)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2724642869 = PyInt_FromString((char *)"2724642869", 0, 0); if (unlikely(!__pyx_int_2724642869)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2728590687 = PyInt_FromString((char *)"2728590687", 0, 0); if (unlikely(!__pyx_int_2728590687)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2733856160 = PyInt_FromString((char *)"2733856160", 0, 0); if (unlikely(!__pyx_int_2733856160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2734514082 = PyInt_FromString((char *)"2734514082", 0, 0); if (unlikely(!__pyx_int_2734514082)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2734591178 = PyInt_FromString((char *)"2734591178", 0, 0); if (unlikely(!__pyx_int_2734591178)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2738905026 = PyInt_FromString((char *)"2738905026", 0, 0); if (unlikely(!__pyx_int_2738905026)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2743034109 = PyInt_FromString((char *)"2743034109", 0, 0); if (unlikely(!__pyx_int_2743034109)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2743944855 = PyInt_FromString((char *)"2743944855", 0, 0); if (unlikely(!__pyx_int_2743944855)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2744104290 = PyInt_FromString((char *)"2744104290", 0, 0); if (unlikely(!__pyx_int_2744104290)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2745433693 = PyInt_FromString((char *)"2745433693", 0, 0); if (unlikely(!__pyx_int_2745433693)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2747425121 = PyInt_FromString((char *)"2747425121", 0, 0); if (unlikely(!__pyx_int_2747425121)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2749160575 = PyInt_FromString((char *)"2749160575", 0, 0); if (unlikely(!__pyx_int_2749160575)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2751356323 = PyInt_FromString((char *)"2751356323", 0, 0); if (unlikely(!__pyx_int_2751356323)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2754712981 = PyInt_FromString((char *)"2754712981", 0, 0); if (unlikely(!__pyx_int_2754712981)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2755636671 = PyInt_FromString((char *)"2755636671", 0, 0); if (unlikely(!__pyx_int_2755636671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2756858614 = PyInt_FromString((char *)"2756858614", 0, 0); if (unlikely(!__pyx_int_2756858614)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2762274643 = PyInt_FromString((char *)"2762274643", 0, 0); if (unlikely(!__pyx_int_2762274643)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2763173681 = PyInt_FromString((char *)"2763173681", 0, 0); if (unlikely(!__pyx_int_2763173681)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2764249623 = PyInt_FromString((char *)"2764249623", 0, 0); if (unlikely(!__pyx_int_2764249623)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2767645557 = PyInt_FromString((char *)"2767645557", 0, 0); if (unlikely(!__pyx_int_2767645557)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2767672228 = PyInt_FromString((char *)"2767672228", 0, 0); if (unlikely(!__pyx_int_2767672228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2776292904 = PyInt_FromString((char *)"2776292904", 0, 0); if (unlikely(!__pyx_int_2776292904)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2777952454 = PyInt_FromString((char *)"2777952454", 0, 0); if (unlikely(!__pyx_int_2777952454)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2779116625 = PyInt_FromString((char *)"2779116625", 0, 0); if (unlikely(!__pyx_int_2779116625)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2779915199 = PyInt_FromString((char *)"2779915199", 0, 0); if (unlikely(!__pyx_int_2779915199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2781242211 = PyInt_FromString((char *)"2781242211", 0, 0); if (unlikely(!__pyx_int_2781242211)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2782082824 = PyInt_FromString((char *)"2782082824", 0, 0); if (unlikely(!__pyx_int_2782082824)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2782912378 = PyInt_FromString((char *)"2782912378", 0, 0); if (unlikely(!__pyx_int_2782912378)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2784252325 = PyInt_FromString((char *)"2784252325", 0, 0); if (unlikely(!__pyx_int_2784252325)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2787207260 = PyInt_FromString((char *)"2787207260", 0, 0); if (unlikely(!__pyx_int_2787207260)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2790478837 = PyInt_FromString((char *)"2790478837", 0, 0); if (unlikely(!__pyx_int_2790478837)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2795958615 = PyInt_FromString((char *)"2795958615", 0, 0); if (unlikely(!__pyx_int_2795958615)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2797888098 = PyInt_FromString((char *)"2797888098", 0, 0); if (unlikely(!__pyx_int_2797888098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2800834470 = PyInt_FromString((char *)"2800834470", 0, 0); if (unlikely(!__pyx_int_2800834470)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2801107407 = PyInt_FromString((char *)"2801107407", 0, 0); if (unlikely(!__pyx_int_2801107407)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2801566410 = PyInt_FromString((char *)"2801566410", 0, 0); if (unlikely(!__pyx_int_2801566410)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2801699524 = PyInt_FromString((char *)"2801699524", 0, 0); if (unlikely(!__pyx_int_2801699524)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2802849917 = PyInt_FromString((char *)"2802849917", 0, 0); if (unlikely(!__pyx_int_2802849917)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2805175444 = PyInt_FromString((char *)"2805175444", 0, 0); if (unlikely(!__pyx_int_2805175444)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2807058932 = PyInt_FromString((char *)"2807058932", 0, 0); if (unlikely(!__pyx_int_2807058932)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2809771154 = PyInt_FromString((char *)"2809771154", 0, 0); if (unlikely(!__pyx_int_2809771154)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2812801621 = PyInt_FromString((char *)"2812801621", 0, 0); if (unlikely(!__pyx_int_2812801621)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2815956275 = PyInt_FromString((char *)"2815956275", 0, 0); if (unlikely(!__pyx_int_2815956275)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2816401017 = PyInt_FromString((char *)"2816401017", 0, 0); if (unlikely(!__pyx_int_2816401017)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2817676711 = PyInt_FromString((char *)"2817676711", 0, 0); if (unlikely(!__pyx_int_2817676711)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2818666809 = PyInt_FromString((char *)"2818666809", 0, 0); if (unlikely(!__pyx_int_2818666809)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2822345105 = PyInt_FromString((char *)"2822345105", 0, 0); if (unlikely(!__pyx_int_2822345105)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2824099068 = PyInt_FromString((char *)"2824099068", 0, 0); if (unlikely(!__pyx_int_2824099068)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2827177882 = PyInt_FromString((char *)"2827177882", 0, 0); if (unlikely(!__pyx_int_2827177882)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2829640523 = PyInt_FromString((char *)"2829640523", 0, 0); if (unlikely(!__pyx_int_2829640523)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2830708150 = PyInt_FromString((char *)"2830708150", 0, 0); if (unlikely(!__pyx_int_2830708150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2833468328 = PyInt_FromString((char *)"2833468328", 0, 0); if (unlikely(!__pyx_int_2833468328)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2835123396 = PyInt_FromString((char *)"2835123396", 0, 0); if (unlikely(!__pyx_int_2835123396)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2837966542 = PyInt_FromString((char *)"2837966542", 0, 0); if (unlikely(!__pyx_int_2837966542)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2842678573 = PyInt_FromString((char *)"2842678573", 0, 0); if (unlikely(!__pyx_int_2842678573)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2842737049 = PyInt_FromString((char *)"2842737049", 0, 0); if (unlikely(!__pyx_int_2842737049)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2846482505 = PyInt_FromString((char *)"2846482505", 0, 0); if (unlikely(!__pyx_int_2846482505)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2848461854 = PyInt_FromString((char *)"2848461854", 0, 0); if (unlikely(!__pyx_int_2848461854)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2848876391 = PyInt_FromString((char *)"2848876391", 0, 0); if (unlikely(!__pyx_int_2848876391)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2849626480 = PyInt_FromString((char *)"2849626480", 0, 0); if (unlikely(!__pyx_int_2849626480)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2850048425 = PyInt_FromString((char *)"2850048425", 0, 0); if (unlikely(!__pyx_int_2850048425)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2856345839 = PyInt_FromString((char *)"2856345839", 0, 0); if (unlikely(!__pyx_int_2856345839)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2857194700 = PyInt_FromString((char *)"2857194700", 0, 0); if (unlikely(!__pyx_int_2857194700)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2857719295 = PyInt_FromString((char *)"2857719295", 0, 0); if (unlikely(!__pyx_int_2857719295)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2858115069 = PyInt_FromString((char *)"2858115069", 0, 0); if (unlikely(!__pyx_int_2858115069)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2863326543 = PyInt_FromString((char *)"2863326543", 0, 0); if (unlikely(!__pyx_int_2863326543)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2865522278 = PyInt_FromString((char *)"2865522278", 0, 0); if (unlikely(!__pyx_int_2865522278)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2867154858 = PyInt_FromString((char *)"2867154858", 0, 0); if (unlikely(!__pyx_int_2867154858)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2868897406 = PyInt_FromString((char *)"2868897406", 0, 0); if (unlikely(!__pyx_int_2868897406)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2871682645 = PyInt_FromString((char *)"2871682645", 0, 0); if (unlikely(!__pyx_int_2871682645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2872807568 = PyInt_FromString((char *)"2872807568", 0, 0); if (unlikely(!__pyx_int_2872807568)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2875968315 = PyInt_FromString((char *)"2875968315", 0, 0); if (unlikely(!__pyx_int_2875968315)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2876494627 = PyInt_FromString((char *)"2876494627", 0, 0); if (unlikely(!__pyx_int_2876494627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2880169549 = PyInt_FromString((char *)"2880169549", 0, 0); if (unlikely(!__pyx_int_2880169549)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2880240216 = PyInt_FromString((char *)"2880240216", 0, 0); if (unlikely(!__pyx_int_2880240216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2883115123 = PyInt_FromString((char *)"2883115123", 0, 0); if (unlikely(!__pyx_int_2883115123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2883997099 = PyInt_FromString((char *)"2883997099", 0, 0); if (unlikely(!__pyx_int_2883997099)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2887651696 = PyInt_FromString((char *)"2887651696", 0, 0); if (unlikely(!__pyx_int_2887651696)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2891339514 = PyInt_FromString((char *)"2891339514", 0, 0); if (unlikely(!__pyx_int_2891339514)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2892417312 = PyInt_FromString((char *)"2892417312", 0, 0); if (unlikely(!__pyx_int_2892417312)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2895723464 = PyInt_FromString((char *)"2895723464", 0, 0); if (unlikely(!__pyx_int_2895723464)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2897014595 = PyInt_FromString((char *)"2897014595", 0, 0); if (unlikely(!__pyx_int_2897014595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2898814052 = PyInt_FromString((char *)"2898814052", 0, 0); if (unlikely(!__pyx_int_2898814052)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2901361580 = PyInt_FromString((char *)"2901361580", 0, 0); if (unlikely(!__pyx_int_2901361580)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2902087851 = PyInt_FromString((char *)"2902087851", 0, 0); if (unlikely(!__pyx_int_2902087851)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2904027272 = PyInt_FromString((char *)"2904027272", 0, 0); if (unlikely(!__pyx_int_2904027272)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2906624658 = PyInt_FromString((char *)"2906624658", 0, 0); if (unlikely(!__pyx_int_2906624658)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2910219766 = PyInt_FromString((char *)"2910219766", 0, 0); if (unlikely(!__pyx_int_2910219766)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2913856577 = PyInt_FromString((char *)"2913856577", 0, 0); if (unlikely(!__pyx_int_2913856577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2915017791 = PyInt_FromString((char *)"2915017791", 0, 0); if (unlikely(!__pyx_int_2915017791)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2916866934 = PyInt_FromString((char *)"2916866934", 0, 0); if (unlikely(!__pyx_int_2916866934)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2917941677 = PyInt_FromString((char *)"2917941677", 0, 0); if (unlikely(!__pyx_int_2917941677)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2918353863 = PyInt_FromString((char *)"2918353863", 0, 0); if (unlikely(!__pyx_int_2918353863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2923271059 = PyInt_FromString((char *)"2923271059", 0, 0); if (unlikely(!__pyx_int_2923271059)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2924959737 = PyInt_FromString((char *)"2924959737", 0, 0); if (unlikely(!__pyx_int_2924959737)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2927934315 = PyInt_FromString((char *)"2927934315", 0, 0); if (unlikely(!__pyx_int_2927934315)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2930698567 = PyInt_FromString((char *)"2930698567", 0, 0); if (unlikely(!__pyx_int_2930698567)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2933202493 = PyInt_FromString((char *)"2933202493", 0, 0); if (unlikely(!__pyx_int_2933202493)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2933734917 = PyInt_FromString((char *)"2933734917", 0, 0); if (unlikely(!__pyx_int_2933734917)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2934523822 = PyInt_FromString((char *)"2934523822", 0, 0); if (unlikely(!__pyx_int_2934523822)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2935566865 = PyInt_FromString((char *)"2935566865", 0, 0); if (unlikely(!__pyx_int_2935566865)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2939266226 = PyInt_FromString((char *)"2939266226", 0, 0); if (unlikely(!__pyx_int_2939266226)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2943682380 = PyInt_FromString((char *)"2943682380", 0, 0); if (unlikely(!__pyx_int_2943682380)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2947541573 = PyInt_FromString((char *)"2947541573", 0, 0); if (unlikely(!__pyx_int_2947541573)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2949277029 = PyInt_FromString((char *)"2949277029", 0, 0); if (unlikely(!__pyx_int_2949277029)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2950355573 = PyInt_FromString((char *)"2950355573", 0, 0); if (unlikely(!__pyx_int_2950355573)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2951366063 = PyInt_FromString((char *)"2951366063", 0, 0); if (unlikely(!__pyx_int_2951366063)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2951971274 = PyInt_FromString((char *)"2951971274", 0, 0); if (unlikely(!__pyx_int_2951971274)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2952102595 = PyInt_FromString((char *)"2952102595", 0, 0); if (unlikely(!__pyx_int_2952102595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2955516313 = PyInt_FromString((char *)"2955516313", 0, 0); if (unlikely(!__pyx_int_2955516313)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2957853679 = PyInt_FromString((char *)"2957853679", 0, 0); if (unlikely(!__pyx_int_2957853679)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2958579944 = PyInt_FromString((char *)"2958579944", 0, 0); if (unlikely(!__pyx_int_2958579944)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2960971305 = PyInt_FromString((char *)"2960971305", 0, 0); if (unlikely(!__pyx_int_2960971305)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2964376443 = PyInt_FromString((char *)"2964376443", 0, 0); if (unlikely(!__pyx_int_2964376443)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2966125488 = PyInt_FromString((char *)"2966125488", 0, 0); if (unlikely(!__pyx_int_2966125488)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2967507152 = PyInt_FromString((char *)"2967507152", 0, 0); if (unlikely(!__pyx_int_2967507152)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2968011453 = PyInt_FromString((char *)"2968011453", 0, 0); if (unlikely(!__pyx_int_2968011453)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2970356327 = PyInt_FromString((char *)"2970356327", 0, 0); if (unlikely(!__pyx_int_2970356327)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2973530695 = PyInt_FromString((char *)"2973530695", 0, 0); if (unlikely(!__pyx_int_2973530695)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2975484382 = PyInt_FromString((char *)"2975484382", 0, 0); if (unlikely(!__pyx_int_2975484382)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2976151520 = PyInt_FromString((char *)"2976151520", 0, 0); if (unlikely(!__pyx_int_2976151520)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2981218425 = PyInt_FromString((char *)"2981218425", 0, 0); if (unlikely(!__pyx_int_2981218425)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2982705585 = PyInt_FromString((char *)"2982705585", 0, 0); if (unlikely(!__pyx_int_2982705585)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2983581028 = PyInt_FromString((char *)"2983581028", 0, 0); if (unlikely(!__pyx_int_2983581028)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2984144751 = PyInt_FromString((char *)"2984144751", 0, 0); if (unlikely(!__pyx_int_2984144751)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2988687269 = PyInt_FromString((char *)"2988687269", 0, 0); if (unlikely(!__pyx_int_2988687269)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2989552604 = PyInt_FromString((char *)"2989552604", 0, 0); if (unlikely(!__pyx_int_2989552604)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2992200171 = PyInt_FromString((char *)"2992200171", 0, 0); if (unlikely(!__pyx_int_2992200171)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2997825956 = PyInt_FromString((char *)"2997825956", 0, 0); if (unlikely(!__pyx_int_2997825956)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2998062463 = PyInt_FromString((char *)"2998062463", 0, 0); if (unlikely(!__pyx_int_2998062463)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2999812018 = PyInt_FromString((char *)"2999812018", 0, 0); if (unlikely(!__pyx_int_2999812018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3000790638 = PyInt_FromString((char *)"3000790638", 0, 0); if (unlikely(!__pyx_int_3000790638)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3001755655 = PyInt_FromString((char *)"3001755655", 0, 0); if (unlikely(!__pyx_int_3001755655)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3004591147 = PyInt_FromString((char *)"3004591147", 0, 0); if (unlikely(!__pyx_int_3004591147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3005978776 = PyInt_FromString((char *)"3005978776", 0, 0); if (unlikely(!__pyx_int_3005978776)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3009879386 = PyInt_FromString((char *)"3009879386", 0, 0); if (unlikely(!__pyx_int_3009879386)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3014905469 = PyInt_FromString((char *)"3014905469", 0, 0); if (unlikely(!__pyx_int_3014905469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3016654259 = PyInt_FromString((char *)"3016654259", 0, 0); if (unlikely(!__pyx_int_3016654259)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3016697106 = PyInt_FromString((char *)"3016697106", 0, 0); if (unlikely(!__pyx_int_3016697106)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3017069671 = PyInt_FromString((char *)"3017069671", 0, 0); if (unlikely(!__pyx_int_3017069671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3017672716 = PyInt_FromString((char *)"3017672716", 0, 0); if (unlikely(!__pyx_int_3017672716)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3025820398 = PyInt_FromString((char *)"3025820398", 0, 0); if (unlikely(!__pyx_int_3025820398)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3028143674 = PyInt_FromString((char *)"3028143674", 0, 0); if (unlikely(!__pyx_int_3028143674)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3029510009 = PyInt_FromString((char *)"3029510009", 0, 0); if (unlikely(!__pyx_int_3029510009)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3031746419 = PyInt_FromString((char *)"3031746419", 0, 0); if (unlikely(!__pyx_int_3031746419)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3032970164 = PyInt_FromString((char *)"3032970164", 0, 0); if (unlikely(!__pyx_int_3032970164)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3034082412 = PyInt_FromString((char *)"3034082412", 0, 0); if (unlikely(!__pyx_int_3034082412)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3034881240 = PyInt_FromString((char *)"3034881240", 0, 0); if (unlikely(!__pyx_int_3034881240)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3035535058 = PyInt_FromString((char *)"3035535058", 0, 0); if (unlikely(!__pyx_int_3035535058)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3039795866 = PyInt_FromString((char *)"3039795866", 0, 0); if (unlikely(!__pyx_int_3039795866)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3043140495 = PyInt_FromString((char *)"3043140495", 0, 0); if (unlikely(!__pyx_int_3043140495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3046200461 = PyInt_FromString((char *)"3046200461", 0, 0); if (unlikely(!__pyx_int_3046200461)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3048588401 = PyInt_FromString((char *)"3048588401", 0, 0); if (unlikely(!__pyx_int_3048588401)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3049390895 = PyInt_FromString((char *)"3049390895", 0, 0); if (unlikely(!__pyx_int_3049390895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3049550261 = PyInt_FromString((char *)"3049550261", 0, 0); if (unlikely(!__pyx_int_3049550261)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3050821474 = PyInt_FromString((char *)"3050821474", 0, 0); if (unlikely(!__pyx_int_3050821474)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3051593425 = PyInt_FromString((char *)"3051593425", 0, 0); if (unlikely(!__pyx_int_3051593425)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3056442267 = PyInt_FromString((char *)"3056442267", 0, 0); if (unlikely(!__pyx_int_3056442267)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3059440621 = PyInt_FromString((char *)"3059440621", 0, 0); if (unlikely(!__pyx_int_3059440621)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3060847922 = PyInt_FromString((char *)"3060847922", 0, 0); if (unlikely(!__pyx_int_3060847922)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3064510765 = PyInt_FromString((char *)"3064510765", 0, 0); if (unlikely(!__pyx_int_3064510765)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3065430391 = PyInt_FromString((char *)"3065430391", 0, 0); if (unlikely(!__pyx_int_3065430391)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3065962831 = PyInt_FromString((char *)"3065962831", 0, 0); if (unlikely(!__pyx_int_3065962831)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3066132406 = PyInt_FromString((char *)"3066132406", 0, 0); if (unlikely(!__pyx_int_3066132406)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3069049960 = PyInt_FromString((char *)"3069049960", 0, 0); if (unlikely(!__pyx_int_3069049960)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3070356634 = PyInt_FromString((char *)"3070356634", 0, 0); if (unlikely(!__pyx_int_3070356634)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3075636216 = PyInt_FromString((char *)"3075636216", 0, 0); if (unlikely(!__pyx_int_3075636216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3076639029 = PyInt_FromString((char *)"3076639029", 0, 0); if (unlikely(!__pyx_int_3076639029)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3079546586 = PyInt_FromString((char *)"3079546586", 0, 0); if (unlikely(!__pyx_int_3079546586)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3082273397 = PyInt_FromString((char *)"3082273397", 0, 0); if (unlikely(!__pyx_int_3082273397)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3082974647 = PyInt_FromString((char *)"3082974647", 0, 0); if (unlikely(!__pyx_int_3082974647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3084310113 = PyInt_FromString((char *)"3084310113", 0, 0); if (unlikely(!__pyx_int_3084310113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3084545389 = PyInt_FromString((char *)"3084545389", 0, 0); if (unlikely(!__pyx_int_3084545389)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3092726480 = PyInt_FromString((char *)"3092726480", 0, 0); if (unlikely(!__pyx_int_3092726480)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3093060836 = PyInt_FromString((char *)"3093060836", 0, 0); if (unlikely(!__pyx_int_3093060836)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3099120491 = PyInt_FromString((char *)"3099120491", 0, 0); if (unlikely(!__pyx_int_3099120491)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3099667487 = PyInt_FromString((char *)"3099667487", 0, 0); if (unlikely(!__pyx_int_3099667487)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3100665960 = PyInt_FromString((char *)"3100665960", 0, 0); if (unlikely(!__pyx_int_3100665960)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3100863416 = PyInt_FromString((char *)"3100863416", 0, 0); if (unlikely(!__pyx_int_3100863416)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3102011747 = PyInt_FromString((char *)"3102011747", 0, 0); if (unlikely(!__pyx_int_3102011747)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3102249176 = PyInt_FromString((char *)"3102249176", 0, 0); if (unlikely(!__pyx_int_3102249176)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3106381470 = PyInt_FromString((char *)"3106381470", 0, 0); if (unlikely(!__pyx_int_3106381470)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3106780840 = PyInt_FromString((char *)"3106780840", 0, 0); if (unlikely(!__pyx_int_3106780840)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3110650942 = PyInt_FromString((char *)"3110650942", 0, 0); if (unlikely(!__pyx_int_3110650942)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3111247143 = PyInt_FromString((char *)"3111247143", 0, 0); if (unlikely(!__pyx_int_3111247143)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3113855344 = PyInt_FromString((char *)"3113855344", 0, 0); if (unlikely(!__pyx_int_3113855344)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3115962473 = PyInt_FromString((char *)"3115962473", 0, 0); if (unlikely(!__pyx_int_3115962473)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3117443513 = PyInt_FromString((char *)"3117443513", 0, 0); if (unlikely(!__pyx_int_3117443513)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3117535592 = PyInt_FromString((char *)"3117535592", 0, 0); if (unlikely(!__pyx_int_3117535592)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3120694122 = PyInt_FromString((char *)"3120694122", 0, 0); if (unlikely(!__pyx_int_3120694122)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3121275539 = PyInt_FromString((char *)"3121275539", 0, 0); if (unlikely(!__pyx_int_3121275539)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3122358053 = PyInt_FromString((char *)"3122358053", 0, 0); if (unlikely(!__pyx_int_3122358053)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3123027871 = PyInt_FromString((char *)"3123027871", 0, 0); if (unlikely(!__pyx_int_3123027871)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3126681063 = PyInt_FromString((char *)"3126681063", 0, 0); if (unlikely(!__pyx_int_3126681063)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3132806511 = PyInt_FromString((char *)"3132806511", 0, 0); if (unlikely(!__pyx_int_3132806511)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3134549946 = PyInt_FromString((char *)"3134549946", 0, 0); if (unlikely(!__pyx_int_3134549946)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3135740889 = PyInt_FromString((char *)"3135740889", 0, 0); if (unlikely(!__pyx_int_3135740889)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3141400786 = PyInt_FromString((char *)"3141400786", 0, 0); if (unlikely(!__pyx_int_3141400786)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3144396420 = PyInt_FromString((char *)"3144396420", 0, 0); if (unlikely(!__pyx_int_3144396420)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3145456443 = PyInt_FromString((char *)"3145456443", 0, 0); if (unlikely(!__pyx_int_3145456443)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3149649517 = PyInt_FromString((char *)"3149649517", 0, 0); if (unlikely(!__pyx_int_3149649517)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3151024235 = PyInt_FromString((char *)"3151024235", 0, 0); if (unlikely(!__pyx_int_3151024235)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3151128937 = PyInt_FromString((char *)"3151128937", 0, 0); if (unlikely(!__pyx_int_3151128937)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3151392187 = PyInt_FromString((char *)"3151392187", 0, 0); if (unlikely(!__pyx_int_3151392187)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3152976349 = PyInt_FromString((char *)"3152976349", 0, 0); if (unlikely(!__pyx_int_3152976349)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3156319645 = PyInt_FromString((char *)"3156319645", 0, 0); if (unlikely(!__pyx_int_3156319645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3157750862 = PyInt_FromString((char *)"3157750862", 0, 0); if (unlikely(!__pyx_int_3157750862)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3160175349 = PyInt_FromString((char *)"3160175349", 0, 0); if (unlikely(!__pyx_int_3160175349)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3160301282 = PyInt_FromString((char *)"3160301282", 0, 0); if (unlikely(!__pyx_int_3160301282)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3166494563 = PyInt_FromString((char *)"3166494563", 0, 0); if (unlikely(!__pyx_int_3166494563)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3167684641 = PyInt_FromString((char *)"3167684641", 0, 0); if (unlikely(!__pyx_int_3167684641)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3168756668 = PyInt_FromString((char *)"3168756668", 0, 0); if (unlikely(!__pyx_int_3168756668)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3168937228 = PyInt_FromString((char *)"3168937228", 0, 0); if (unlikely(!__pyx_int_3168937228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3175501286 = PyInt_FromString((char *)"3175501286", 0, 0); if (unlikely(!__pyx_int_3175501286)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3178106961 = PyInt_FromString((char *)"3178106961", 0, 0); if (unlikely(!__pyx_int_3178106961)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3182487618 = PyInt_FromString((char *)"3182487618", 0, 0); if (unlikely(!__pyx_int_3182487618)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3183336545 = PyInt_FromString((char *)"3183336545", 0, 0); if (unlikely(!__pyx_int_3183336545)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3184776046 = PyInt_FromString((char *)"3184776046", 0, 0); if (unlikely(!__pyx_int_3184776046)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3184946027 = PyInt_FromString((char *)"3184946027", 0, 0); if (unlikely(!__pyx_int_3184946027)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3185336765 = PyInt_FromString((char *)"3185336765", 0, 0); if (unlikely(!__pyx_int_3185336765)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3186202582 = PyInt_FromString((char *)"3186202582", 0, 0); if (unlikely(!__pyx_int_3186202582)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3193921505 = PyInt_FromString((char *)"3193921505", 0, 0); if (unlikely(!__pyx_int_3193921505)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3196267988 = PyInt_FromString((char *)"3196267988", 0, 0); if (unlikely(!__pyx_int_3196267988)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3198115200 = PyInt_FromString((char *)"3198115200", 0, 0); if (unlikely(!__pyx_int_3198115200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3200178535 = PyInt_FromString((char *)"3200178535", 0, 0); if (unlikely(!__pyx_int_3200178535)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3201591914 = PyInt_FromString((char *)"3201591914", 0, 0); if (unlikely(!__pyx_int_3201591914)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3201631749 = PyInt_FromString((char *)"3201631749", 0, 0); if (unlikely(!__pyx_int_3201631749)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3201918910 = PyInt_FromString((char *)"3201918910", 0, 0); if (unlikely(!__pyx_int_3201918910)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3202437046 = PyInt_FromString((char *)"3202437046", 0, 0); if (unlikely(!__pyx_int_3202437046)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3206782108 = PyInt_FromString((char *)"3206782108", 0, 0); if (unlikely(!__pyx_int_3206782108)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3211623147 = PyInt_FromString((char *)"3211623147", 0, 0); if (unlikely(!__pyx_int_3211623147)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3212035895 = PyInt_FromString((char *)"3212035895", 0, 0); if (unlikely(!__pyx_int_3212035895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3215212461 = PyInt_FromString((char *)"3215212461", 0, 0); if (unlikely(!__pyx_int_3215212461)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3215307299 = PyInt_FromString((char *)"3215307299", 0, 0); if (unlikely(!__pyx_int_3215307299)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3217021541 = PyInt_FromString((char *)"3217021541", 0, 0); if (unlikely(!__pyx_int_3217021541)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3218264685 = PyInt_FromString((char *)"3218264685", 0, 0); if (unlikely(!__pyx_int_3218264685)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3218761151 = PyInt_FromString((char *)"3218761151", 0, 0); if (unlikely(!__pyx_int_3218761151)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3224740454 = PyInt_FromString((char *)"3224740454", 0, 0); if (unlikely(!__pyx_int_3224740454)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3227229120 = PyInt_FromString((char *)"3227229120", 0, 0); if (unlikely(!__pyx_int_3227229120)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3227541664 = PyInt_FromString((char *)"3227541664", 0, 0); if (unlikely(!__pyx_int_3227541664)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3229630528 = PyInt_FromString((char *)"3229630528", 0, 0); if (unlikely(!__pyx_int_3229630528)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3231722213 = PyInt_FromString((char *)"3231722213", 0, 0); if (unlikely(!__pyx_int_3231722213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3233831835 = PyInt_FromString((char *)"3233831835", 0, 0); if (unlikely(!__pyx_int_3233831835)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3234156416 = PyInt_FromString((char *)"3234156416", 0, 0); if (unlikely(!__pyx_int_3234156416)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3235995134 = PyInt_FromString((char *)"3235995134", 0, 0); if (unlikely(!__pyx_int_3235995134)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3240894392 = PyInt_FromString((char *)"3240894392", 0, 0); if (unlikely(!__pyx_int_3240894392)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3243809217 = PyInt_FromString((char *)"3243809217", 0, 0); if (unlikely(!__pyx_int_3243809217)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3245848246 = PyInt_FromString((char *)"3245848246", 0, 0); if (unlikely(!__pyx_int_3245848246)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3247465558 = PyInt_FromString((char *)"3247465558", 0, 0); if (unlikely(!__pyx_int_3247465558)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3250673817 = PyInt_FromString((char *)"3250673817", 0, 0); if (unlikely(!__pyx_int_3250673817)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3252238545 = PyInt_FromString((char *)"3252238545", 0, 0); if (unlikely(!__pyx_int_3252238545)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3252932727 = PyInt_FromString((char *)"3252932727", 0, 0); if (unlikely(!__pyx_int_3252932727)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3253595436 = PyInt_FromString((char *)"3253595436", 0, 0); if (unlikely(!__pyx_int_3253595436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3254988725 = PyInt_FromString((char *)"3254988725", 0, 0); if (unlikely(!__pyx_int_3254988725)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3260915650 = PyInt_FromString((char *)"3260915650", 0, 0); if (unlikely(!__pyx_int_3260915650)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3261161891 = PyInt_FromString((char *)"3261161891", 0, 0); if (unlikely(!__pyx_int_3261161891)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3262494647 = PyInt_FromString((char *)"3262494647", 0, 0); if (unlikely(!__pyx_int_3262494647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3263785589 = PyInt_FromString((char *)"3263785589", 0, 0); if (unlikely(!__pyx_int_3263785589)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3265478751 = PyInt_FromString((char *)"3265478751", 0, 0); if (unlikely(!__pyx_int_3265478751)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3267517855 = PyInt_FromString((char *)"3267517855", 0, 0); if (unlikely(!__pyx_int_3267517855)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3270937875 = PyInt_FromString((char *)"3270937875", 0, 0); if (unlikely(!__pyx_int_3270937875)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3273267108 = PyInt_FromString((char *)"3273267108", 0, 0); if (unlikely(!__pyx_int_3273267108)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3274667266 = PyInt_FromString((char *)"3274667266", 0, 0); if (unlikely(!__pyx_int_3274667266)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3277757891 = PyInt_FromString((char *)"3277757891", 0, 0); if (unlikely(!__pyx_int_3277757891)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3279033885 = PyInt_FromString((char *)"3279033885", 0, 0); if (unlikely(!__pyx_int_3279033885)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3280093505 = PyInt_FromString((char *)"3280093505", 0, 0); if (unlikely(!__pyx_int_3280093505)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3283088770 = PyInt_FromString((char *)"3283088770", 0, 0); if (unlikely(!__pyx_int_3283088770)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3284360861 = PyInt_FromString((char *)"3284360861", 0, 0); if (unlikely(!__pyx_int_3284360861)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3287084079 = PyInt_FromString((char *)"3287084079", 0, 0); if (unlikely(!__pyx_int_3287084079)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3292445032 = PyInt_FromString((char *)"3292445032", 0, 0); if (unlikely(!__pyx_int_3292445032)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3294073796 = PyInt_FromString((char *)"3294073796", 0, 0); if (unlikely(!__pyx_int_3294073796)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3294430577 = PyInt_FromString((char *)"3294430577", 0, 0); if (unlikely(!__pyx_int_3294430577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3294782118 = PyInt_FromString((char *)"3294782118", 0, 0); if (unlikely(!__pyx_int_3294782118)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3295786421 = PyInt_FromString((char *)"3295786421", 0, 0); if (unlikely(!__pyx_int_3295786421)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3299278474 = PyInt_FromString((char *)"3299278474", 0, 0); if (unlikely(!__pyx_int_3299278474)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3299409036 = PyInt_FromString((char *)"3299409036", 0, 0); if (unlikely(!__pyx_int_3299409036)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3301201811 = PyInt_FromString((char *)"3301201811", 0, 0); if (unlikely(!__pyx_int_3301201811)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3307916247 = PyInt_FromString((char *)"3307916247", 0, 0); if (unlikely(!__pyx_int_3307916247)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3309594171 = PyInt_FromString((char *)"3309594171", 0, 0); if (unlikely(!__pyx_int_3309594171)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3310321856 = PyInt_FromString((char *)"3310321856", 0, 0); if (unlikely(!__pyx_int_3310321856)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3310653893 = PyInt_FromString((char *)"3310653893", 0, 0); if (unlikely(!__pyx_int_3310653893)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3313212038 = PyInt_FromString((char *)"3313212038", 0, 0); if (unlikely(!__pyx_int_3313212038)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3313910595 = PyInt_FromString((char *)"3313910595", 0, 0); if (unlikely(!__pyx_int_3313910595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3318043793 = PyInt_FromString((char *)"3318043793", 0, 0); if (unlikely(!__pyx_int_3318043793)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3320835882 = PyInt_FromString((char *)"3320835882", 0, 0); if (unlikely(!__pyx_int_3320835882)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3323011204 = PyInt_FromString((char *)"3323011204", 0, 0); if (unlikely(!__pyx_int_3323011204)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3327236038 = PyInt_FromString((char *)"3327236038", 0, 0); if (unlikely(!__pyx_int_3327236038)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3328402341 = PyInt_FromString((char *)"3328402341", 0, 0); if (unlikely(!__pyx_int_3328402341)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3328955385 = PyInt_FromString((char *)"3328955385", 0, 0); if (unlikely(!__pyx_int_3328955385)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3330556482 = PyInt_FromString((char *)"3330556482", 0, 0); if (unlikely(!__pyx_int_3330556482)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3332740144 = PyInt_FromString((char *)"3332740144", 0, 0); if (unlikely(!__pyx_int_3332740144)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3334885783 = PyInt_FromString((char *)"3334885783", 0, 0); if (unlikely(!__pyx_int_3334885783)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3336358691 = PyInt_FromString((char *)"3336358691", 0, 0); if (unlikely(!__pyx_int_3336358691)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3341394285 = PyInt_FromString((char *)"3341394285", 0, 0); if (unlikely(!__pyx_int_3341394285)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3342319475 = PyInt_FromString((char *)"3342319475", 0, 0); if (unlikely(!__pyx_int_3342319475)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3344078279 = PyInt_FromString((char *)"3344078279", 0, 0); if (unlikely(!__pyx_int_3344078279)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3346248884 = PyInt_FromString((char *)"3346248884", 0, 0); if (unlikely(!__pyx_int_3346248884)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3347532110 = PyInt_FromString((char *)"3347532110", 0, 0); if (unlikely(!__pyx_int_3347532110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3350065803 = PyInt_FromString((char *)"3350065803", 0, 0); if (unlikely(!__pyx_int_3350065803)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3351728789 = PyInt_FromString((char *)"3351728789", 0, 0); if (unlikely(!__pyx_int_3351728789)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3354324521 = PyInt_FromString((char *)"3354324521", 0, 0); if (unlikely(!__pyx_int_3354324521)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3356761769 = PyInt_FromString((char *)"3356761769", 0, 0); if (unlikely(!__pyx_int_3356761769)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3359869896 = PyInt_FromString((char *)"3359869896", 0, 0); if (unlikely(!__pyx_int_3359869896)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3359936201 = PyInt_FromString((char *)"3359936201", 0, 0); if (unlikely(!__pyx_int_3359936201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3362022572 = PyInt_FromString((char *)"3362022572", 0, 0); if (unlikely(!__pyx_int_3362022572)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3363418545 = PyInt_FromString((char *)"3363418545", 0, 0); if (unlikely(!__pyx_int_3363418545)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3366754619 = PyInt_FromString((char *)"3366754619", 0, 0); if (unlikely(!__pyx_int_3366754619)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3368567691 = PyInt_FromString((char *)"3368567691", 0, 0); if (unlikely(!__pyx_int_3368567691)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3371096953 = PyInt_FromString((char *)"3371096953", 0, 0); if (unlikely(!__pyx_int_3371096953)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3374361702 = PyInt_FromString((char *)"3374361702", 0, 0); if (unlikely(!__pyx_int_3374361702)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3375740769 = PyInt_FromString((char *)"3375740769", 0, 0); if (unlikely(!__pyx_int_3375740769)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3376449993 = PyInt_FromString((char *)"3376449993", 0, 0); if (unlikely(!__pyx_int_3376449993)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3381544775 = PyInt_FromString((char *)"3381544775", 0, 0); if (unlikely(!__pyx_int_3381544775)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3385345166 = PyInt_FromString((char *)"3385345166", 0, 0); if (unlikely(!__pyx_int_3385345166)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3385409673 = PyInt_FromString((char *)"3385409673", 0, 0); if (unlikely(!__pyx_int_3385409673)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3387549984 = PyInt_FromString((char *)"3387549984", 0, 0); if (unlikely(!__pyx_int_3387549984)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3388507166 = PyInt_FromString((char *)"3388507166", 0, 0); if (unlikely(!__pyx_int_3388507166)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3393556426 = PyInt_FromString((char *)"3393556426", 0, 0); if (unlikely(!__pyx_int_3393556426)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3395642799 = PyInt_FromString((char *)"3395642799", 0, 0); if (unlikely(!__pyx_int_3395642799)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3398190662 = PyInt_FromString((char *)"3398190662", 0, 0); if (unlikely(!__pyx_int_3398190662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3399679628 = PyInt_FromString((char *)"3399679628", 0, 0); if (unlikely(!__pyx_int_3399679628)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3399941250 = PyInt_FromString((char *)"3399941250", 0, 0); if (unlikely(!__pyx_int_3399941250)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3400528769 = PyInt_FromString((char *)"3400528769", 0, 0); if (unlikely(!__pyx_int_3400528769)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3402253711 = PyInt_FromString((char *)"3402253711", 0, 0); if (unlikely(!__pyx_int_3402253711)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3403100636 = PyInt_FromString((char *)"3403100636", 0, 0); if (unlikely(!__pyx_int_3403100636)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3408119516 = PyInt_FromString((char *)"3408119516", 0, 0); if (unlikely(!__pyx_int_3408119516)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3409685355 = PyInt_FromString((char *)"3409685355", 0, 0); if (unlikely(!__pyx_int_3409685355)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3410398667 = PyInt_FromString((char *)"3410398667", 0, 0); if (unlikely(!__pyx_int_3410398667)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3413881008 = PyInt_FromString((char *)"3413881008", 0, 0); if (unlikely(!__pyx_int_3413881008)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3414450555 = PyInt_FromString((char *)"3414450555", 0, 0); if (unlikely(!__pyx_int_3414450555)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3419096717 = PyInt_FromString((char *)"3419096717", 0, 0); if (unlikely(!__pyx_int_3419096717)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3419915562 = PyInt_FromString((char *)"3419915562", 0, 0); if (unlikely(!__pyx_int_3419915562)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3421038627 = PyInt_FromString((char *)"3421038627", 0, 0); if (unlikely(!__pyx_int_3421038627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3427763148 = PyInt_FromString((char *)"3427763148", 0, 0); if (unlikely(!__pyx_int_3427763148)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3429263018 = PyInt_FromString((char *)"3429263018", 0, 0); if (unlikely(!__pyx_int_3429263018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3430322568 = PyInt_FromString((char *)"3430322568", 0, 0); if (unlikely(!__pyx_int_3430322568)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3431482436 = PyInt_FromString((char *)"3431482436", 0, 0); if (unlikely(!__pyx_int_3431482436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3431546947 = PyInt_FromString((char *)"3431546947", 0, 0); if (unlikely(!__pyx_int_3431546947)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3432737375 = PyInt_FromString((char *)"3432737375", 0, 0); if (unlikely(!__pyx_int_3432737375)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3433712980 = PyInt_FromString((char *)"3433712980", 0, 0); if (unlikely(!__pyx_int_3433712980)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3435941763 = PyInt_FromString((char *)"3435941763", 0, 0); if (unlikely(!__pyx_int_3435941763)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3441850377 = PyInt_FromString((char *)"3441850377", 0, 0); if (unlikely(!__pyx_int_3441850377)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3444343245 = PyInt_FromString((char *)"3444343245", 0, 0); if (unlikely(!__pyx_int_3444343245)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3444575871 = PyInt_FromString((char *)"3444575871", 0, 0); if (unlikely(!__pyx_int_3444575871)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3446004468 = PyInt_FromString((char *)"3446004468", 0, 0); if (unlikely(!__pyx_int_3446004468)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3447698098 = PyInt_FromString((char *)"3447698098", 0, 0); if (unlikely(!__pyx_int_3447698098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3452783745 = PyInt_FromString((char *)"3452783745", 0, 0); if (unlikely(!__pyx_int_3452783745)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3454686199 = PyInt_FromString((char *)"3454686199", 0, 0); if (unlikely(!__pyx_int_3454686199)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3454790438 = PyInt_FromString((char *)"3454790438", 0, 0); if (unlikely(!__pyx_int_3454790438)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3459953789 = PyInt_FromString((char *)"3459953789", 0, 0); if (unlikely(!__pyx_int_3459953789)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3460925390 = PyInt_FromString((char *)"3460925390", 0, 0); if (unlikely(!__pyx_int_3460925390)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3460984630 = PyInt_FromString((char *)"3460984630", 0, 0); if (unlikely(!__pyx_int_3460984630)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3462883241 = PyInt_FromString((char *)"3462883241", 0, 0); if (unlikely(!__pyx_int_3462883241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3464042516 = PyInt_FromString((char *)"3464042516", 0, 0); if (unlikely(!__pyx_int_3464042516)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3464344499 = PyInt_FromString((char *)"3464344499", 0, 0); if (unlikely(!__pyx_int_3464344499)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3467192302 = PyInt_FromString((char *)"3467192302", 0, 0); if (unlikely(!__pyx_int_3467192302)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3469625735 = PyInt_FromString((char *)"3469625735", 0, 0); if (unlikely(!__pyx_int_3469625735)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3473416636 = PyInt_FromString((char *)"3473416636", 0, 0); if (unlikely(!__pyx_int_3473416636)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3474729866 = PyInt_FromString((char *)"3474729866", 0, 0); if (unlikely(!__pyx_int_3474729866)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3475313331 = PyInt_FromString((char *)"3475313331", 0, 0); if (unlikely(!__pyx_int_3475313331)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3477767631 = PyInt_FromString((char *)"3477767631", 0, 0); if (unlikely(!__pyx_int_3477767631)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3481945413 = PyInt_FromString((char *)"3481945413", 0, 0); if (unlikely(!__pyx_int_3481945413)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3483825537 = PyInt_FromString((char *)"3483825537", 0, 0); if (unlikely(!__pyx_int_3483825537)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3486468741 = PyInt_FromString((char *)"3486468741", 0, 0); if (unlikely(!__pyx_int_3486468741)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3488279077 = PyInt_FromString((char *)"3488279077", 0, 0); if (unlikely(!__pyx_int_3488279077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3496503480 = PyInt_FromString((char *)"3496503480", 0, 0); if (unlikely(!__pyx_int_3496503480)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3496589753 = PyInt_FromString((char *)"3496589753", 0, 0); if (unlikely(!__pyx_int_3496589753)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3496721360 = PyInt_FromString((char *)"3496721360", 0, 0); if (unlikely(!__pyx_int_3496721360)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3497509347 = PyInt_FromString((char *)"3497509347", 0, 0); if (unlikely(!__pyx_int_3497509347)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3499326569 = PyInt_FromString((char *)"3499326569", 0, 0); if (unlikely(!__pyx_int_3499326569)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3501252752 = PyInt_FromString((char *)"3501252752", 0, 0); if (unlikely(!__pyx_int_3501252752)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3501741890 = PyInt_FromString((char *)"3501741890", 0, 0); if (unlikely(!__pyx_int_3501741890)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3503319995 = PyInt_FromString((char *)"3503319995", 0, 0); if (unlikely(!__pyx_int_3503319995)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3509871135 = PyInt_FromString((char *)"3509871135", 0, 0); if (unlikely(!__pyx_int_3509871135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3513301457 = PyInt_FromString((char *)"3513301457", 0, 0); if (unlikely(!__pyx_int_3513301457)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3516619604 = PyInt_FromString((char *)"3516619604", 0, 0); if (unlikely(!__pyx_int_3516619604)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3516813135 = PyInt_FromString((char *)"3516813135", 0, 0); if (unlikely(!__pyx_int_3516813135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3518358430 = PyInt_FromString((char *)"3518358430", 0, 0); if (unlikely(!__pyx_int_3518358430)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3519142200 = PyInt_FromString((char *)"3519142200", 0, 0); if (unlikely(!__pyx_int_3519142200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3520161977 = PyInt_FromString((char *)"3520161977", 0, 0); if (unlikely(!__pyx_int_3520161977)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3521504564 = PyInt_FromString((char *)"3521504564", 0, 0); if (unlikely(!__pyx_int_3521504564)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3528626907 = PyInt_FromString((char *)"3528626907", 0, 0); if (unlikely(!__pyx_int_3528626907)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3530123707 = PyInt_FromString((char *)"3530123707", 0, 0); if (unlikely(!__pyx_int_3530123707)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3530407890 = PyInt_FromString((char *)"3530407890", 0, 0); if (unlikely(!__pyx_int_3530407890)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3533459022 = PyInt_FromString((char *)"3533459022", 0, 0); if (unlikely(!__pyx_int_3533459022)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3535072918 = PyInt_FromString((char *)"3535072918", 0, 0); if (unlikely(!__pyx_int_3535072918)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3535486456 = PyInt_FromString((char *)"3535486456", 0, 0); if (unlikely(!__pyx_int_3535486456)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3537006015 = PyInt_FromString((char *)"3537006015", 0, 0); if (unlikely(!__pyx_int_3537006015)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3537852828 = PyInt_FromString((char *)"3537852828", 0, 0); if (unlikely(!__pyx_int_3537852828)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3542330227 = PyInt_FromString((char *)"3542330227", 0, 0); if (unlikely(!__pyx_int_3542330227)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3543599269 = PyInt_FromString((char *)"3543599269", 0, 0); if (unlikely(!__pyx_int_3543599269)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3545789473 = PyInt_FromString((char *)"3545789473", 0, 0); if (unlikely(!__pyx_int_3545789473)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3547052216 = PyInt_FromString((char *)"3547052216", 0, 0); if (unlikely(!__pyx_int_3547052216)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3547250131 = PyInt_FromString((char *)"3547250131", 0, 0); if (unlikely(!__pyx_int_3547250131)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3553849021 = PyInt_FromString((char *)"3553849021", 0, 0); if (unlikely(!__pyx_int_3553849021)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3554993207 = PyInt_FromString((char *)"3554993207", 0, 0); if (unlikely(!__pyx_int_3554993207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3556361835 = PyInt_FromString((char *)"3556361835", 0, 0); if (unlikely(!__pyx_int_3556361835)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3557504664 = PyInt_FromString((char *)"3557504664", 0, 0); if (unlikely(!__pyx_int_3557504664)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3563566036 = PyInt_FromString((char *)"3563566036", 0, 0); if (unlikely(!__pyx_int_3563566036)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3563743934 = PyInt_FromString((char *)"3563743934", 0, 0); if (unlikely(!__pyx_int_3563743934)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3564045318 = PyInt_FromString((char *)"3564045318", 0, 0); if (unlikely(!__pyx_int_3564045318)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3566750796 = PyInt_FromString((char *)"3566750796", 0, 0); if (unlikely(!__pyx_int_3566750796)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3569255213 = PyInt_FromString((char *)"3569255213", 0, 0); if (unlikely(!__pyx_int_3569255213)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3570689971 = PyInt_FromString((char *)"3570689971", 0, 0); if (unlikely(!__pyx_int_3570689971)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3572145929 = PyInt_FromString((char *)"3572145929", 0, 0); if (unlikely(!__pyx_int_3572145929)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3573941694 = PyInt_FromString((char *)"3573941694", 0, 0); if (unlikely(!__pyx_int_3573941694)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3575528878 = PyInt_FromString((char *)"3575528878", 0, 0); if (unlikely(!__pyx_int_3575528878)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3576539503 = PyInt_FromString((char *)"3576539503", 0, 0); if (unlikely(!__pyx_int_3576539503)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3576870512 = PyInt_FromString((char *)"3576870512", 0, 0); if (unlikely(!__pyx_int_3576870512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3580146133 = PyInt_FromString((char *)"3580146133", 0, 0); if (unlikely(!__pyx_int_3580146133)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3580869306 = PyInt_FromString((char *)"3580869306", 0, 0); if (unlikely(!__pyx_int_3580869306)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3587531953 = PyInt_FromString((char *)"3587531953", 0, 0); if (unlikely(!__pyx_int_3587531953)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3588745010 = PyInt_FromString((char *)"3588745010", 0, 0); if (unlikely(!__pyx_int_3588745010)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3593056380 = PyInt_FromString((char *)"3593056380", 0, 0); if (unlikely(!__pyx_int_3593056380)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3594982253 = PyInt_FromString((char *)"3594982253", 0, 0); if (unlikely(!__pyx_int_3594982253)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3596728278 = PyInt_FromString((char *)"3596728278", 0, 0); if (unlikely(!__pyx_int_3596728278)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3597364157 = PyInt_FromString((char *)"3597364157", 0, 0); if (unlikely(!__pyx_int_3597364157)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3597515707 = PyInt_FromString((char *)"3597515707", 0, 0); if (unlikely(!__pyx_int_3597515707)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3599595085 = PyInt_FromString((char *)"3599595085", 0, 0); if (unlikely(!__pyx_int_3599595085)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3602770327 = PyInt_FromString((char *)"3602770327", 0, 0); if (unlikely(!__pyx_int_3602770327)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3604373943 = PyInt_FromString((char *)"3604373943", 0, 0); if (unlikely(!__pyx_int_3604373943)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3610369226 = PyInt_FromString((char *)"3610369226", 0, 0); if (unlikely(!__pyx_int_3610369226)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3613494426 = PyInt_FromString((char *)"3613494426", 0, 0); if (unlikely(!__pyx_int_3613494426)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3613570519 = PyInt_FromString((char *)"3613570519", 0, 0); if (unlikely(!__pyx_int_3613570519)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3617213773 = PyInt_FromString((char *)"3617213773", 0, 0); if (unlikely(!__pyx_int_3617213773)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3620022987 = PyInt_FromString((char *)"3620022987", 0, 0); if (unlikely(!__pyx_int_3620022987)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3621216949 = PyInt_FromString((char *)"3621216949", 0, 0); if (unlikely(!__pyx_int_3621216949)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3622233649 = PyInt_FromString((char *)"3622233649", 0, 0); if (unlikely(!__pyx_int_3622233649)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3623636965 = PyInt_FromString((char *)"3623636965", 0, 0); if (unlikely(!__pyx_int_3623636965)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3625268135 = PyInt_FromString((char *)"3625268135", 0, 0); if (unlikely(!__pyx_int_3625268135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3629546796 = PyInt_FromString((char *)"3629546796", 0, 0); if (unlikely(!__pyx_int_3629546796)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3630984372 = PyInt_FromString((char *)"3630984372", 0, 0); if (unlikely(!__pyx_int_3630984372)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3631459288 = PyInt_FromString((char *)"3631459288", 0, 0); if (unlikely(!__pyx_int_3631459288)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3633334344 = PyInt_FromString((char *)"3633334344", 0, 0); if (unlikely(!__pyx_int_3633334344)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3635733660 = PyInt_FromString((char *)"3635733660", 0, 0); if (unlikely(!__pyx_int_3635733660)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3635996816 = PyInt_FromString((char *)"3635996816", 0, 0); if (unlikely(!__pyx_int_3635996816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3638064043 = PyInt_FromString((char *)"3638064043", 0, 0); if (unlikely(!__pyx_int_3638064043)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3644379585 = PyInt_FromString((char *)"3644379585", 0, 0); if (unlikely(!__pyx_int_3644379585)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3647212047 = PyInt_FromString((char *)"3647212047", 0, 0); if (unlikely(!__pyx_int_3647212047)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3647454910 = PyInt_FromString((char *)"3647454910", 0, 0); if (unlikely(!__pyx_int_3647454910)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3648039385 = PyInt_FromString((char *)"3648039385", 0, 0); if (unlikely(!__pyx_int_3648039385)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3651041127 = PyInt_FromString((char *)"3651041127", 0, 0); if (unlikely(!__pyx_int_3651041127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3652904859 = PyInt_FromString((char *)"3652904859", 0, 0); if (unlikely(!__pyx_int_3652904859)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3654906025 = PyInt_FromString((char *)"3654906025", 0, 0); if (unlikely(!__pyx_int_3654906025)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3655459128 = PyInt_FromString((char *)"3655459128", 0, 0); if (unlikely(!__pyx_int_3655459128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3664101311 = PyInt_FromString((char *)"3664101311", 0, 0); if (unlikely(!__pyx_int_3664101311)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3664604599 = PyInt_FromString((char *)"3664604599", 0, 0); if (unlikely(!__pyx_int_3664604599)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3665145818 = PyInt_FromString((char *)"3665145818", 0, 0); if (unlikely(!__pyx_int_3665145818)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3667219033 = PyInt_FromString((char *)"3667219033", 0, 0); if (unlikely(!__pyx_int_3667219033)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3669462566 = PyInt_FromString((char *)"3669462566", 0, 0); if (unlikely(!__pyx_int_3669462566)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3671750063 = PyInt_FromString((char *)"3671750063", 0, 0); if (unlikely(!__pyx_int_3671750063)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3673476453 = PyInt_FromString((char *)"3673476453", 0, 0); if (unlikely(!__pyx_int_3673476453)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3673637356 = PyInt_FromString((char *)"3673637356", 0, 0); if (unlikely(!__pyx_int_3673637356)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3678124923 = PyInt_FromString((char *)"3678124923", 0, 0); if (unlikely(!__pyx_int_3678124923)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3681988059 = PyInt_FromString((char *)"3681988059", 0, 0); if (unlikely(!__pyx_int_3681988059)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3682191598 = PyInt_FromString((char *)"3682191598", 0, 0); if (unlikely(!__pyx_int_3682191598)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3683022916 = PyInt_FromString((char *)"3683022916", 0, 0); if (unlikely(!__pyx_int_3683022916)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3683797321 = PyInt_FromString((char *)"3683797321", 0, 0); if (unlikely(!__pyx_int_3683797321)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3687994002 = PyInt_FromString((char *)"3687994002", 0, 0); if (unlikely(!__pyx_int_3687994002)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3688593069 = PyInt_FromString((char *)"3688593069", 0, 0); if (unlikely(!__pyx_int_3688593069)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3688947771 = PyInt_FromString((char *)"3688947771", 0, 0); if (unlikely(!__pyx_int_3688947771)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3693126241 = PyInt_FromString((char *)"3693126241", 0, 0); if (unlikely(!__pyx_int_3693126241)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3697393085 = PyInt_FromString((char *)"3697393085", 0, 0); if (unlikely(!__pyx_int_3697393085)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3698224818 = PyInt_FromString((char *)"3698224818", 0, 0); if (unlikely(!__pyx_int_3698224818)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3699352540 = PyInt_FromString((char *)"3699352540", 0, 0); if (unlikely(!__pyx_int_3699352540)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3702665459 = PyInt_FromString((char *)"3702665459", 0, 0); if (unlikely(!__pyx_int_3702665459)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3704280881 = PyInt_FromString((char *)"3704280881", 0, 0); if (unlikely(!__pyx_int_3704280881)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3704300486 = PyInt_FromString((char *)"3704300486", 0, 0); if (unlikely(!__pyx_int_3704300486)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3705438115 = PyInt_FromString((char *)"3705438115", 0, 0); if (unlikely(!__pyx_int_3705438115)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3708173718 = PyInt_FromString((char *)"3708173718", 0, 0); if (unlikely(!__pyx_int_3708173718)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3710368113 = PyInt_FromString((char *)"3710368113", 0, 0); if (unlikely(!__pyx_int_3710368113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3711829422 = PyInt_FromString((char *)"3711829422", 0, 0); if (unlikely(!__pyx_int_3711829422)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3715932637 = PyInt_FromString((char *)"3715932637", 0, 0); if (unlikely(!__pyx_int_3715932637)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3717614411 = PyInt_FromString((char *)"3717614411", 0, 0); if (unlikely(!__pyx_int_3717614411)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3720081049 = PyInt_FromString((char *)"3720081049", 0, 0); if (unlikely(!__pyx_int_3720081049)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3722280097 = PyInt_FromString((char *)"3722280097", 0, 0); if (unlikely(!__pyx_int_3722280097)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3722699582 = PyInt_FromString((char *)"3722699582", 0, 0); if (unlikely(!__pyx_int_3722699582)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3725069491 = PyInt_FromString((char *)"3725069491", 0, 0); if (unlikely(!__pyx_int_3725069491)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3727205754 = PyInt_FromString((char *)"3727205754", 0, 0); if (unlikely(!__pyx_int_3727205754)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3731654548 = PyInt_FromString((char *)"3731654548", 0, 0); if (unlikely(!__pyx_int_3731654548)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3731845041 = PyInt_FromString((char *)"3731845041", 0, 0); if (unlikely(!__pyx_int_3731845041)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3732514782 = PyInt_FromString((char *)"3732514782", 0, 0); if (unlikely(!__pyx_int_3732514782)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3734260298 = PyInt_FromString((char *)"3734260298", 0, 0); if (unlikely(!__pyx_int_3734260298)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3736164937 = PyInt_FromString((char *)"3736164937", 0, 0); if (unlikely(!__pyx_int_3736164937)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3739122087 = PyInt_FromString((char *)"3739122087", 0, 0); if (unlikely(!__pyx_int_3739122087)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3745345300 = PyInt_FromString((char *)"3745345300", 0, 0); if (unlikely(!__pyx_int_3745345300)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3746175075 = PyInt_FromString((char *)"3746175075", 0, 0); if (unlikely(!__pyx_int_3746175075)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3747192018 = PyInt_FromString((char *)"3747192018", 0, 0); if (unlikely(!__pyx_int_3747192018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3747855548 = PyInt_FromString((char *)"3747855548", 0, 0); if (unlikely(!__pyx_int_3747855548)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3749357023 = PyInt_FromString((char *)"3749357023", 0, 0); if (unlikely(!__pyx_int_3749357023)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3755965093 = PyInt_FromString((char *)"3755965093", 0, 0); if (unlikely(!__pyx_int_3755965093)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3756188221 = PyInt_FromString((char *)"3756188221", 0, 0); if (unlikely(!__pyx_int_3756188221)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3756299780 = PyInt_FromString((char *)"3756299780", 0, 0); if (unlikely(!__pyx_int_3756299780)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3762019296 = PyInt_FromString((char *)"3762019296", 0, 0); if (unlikely(!__pyx_int_3762019296)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3762502690 = PyInt_FromString((char *)"3762502690", 0, 0); if (unlikely(!__pyx_int_3762502690)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3762923945 = PyInt_FromString((char *)"3762923945", 0, 0); if (unlikely(!__pyx_int_3762923945)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3764988233 = PyInt_FromString((char *)"3764988233", 0, 0); if (unlikely(!__pyx_int_3764988233)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3765465232 = PyInt_FromString((char *)"3765465232", 0, 0); if (unlikely(!__pyx_int_3765465232)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3767586992 = PyInt_FromString((char *)"3767586992", 0, 0); if (unlikely(!__pyx_int_3767586992)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3769721975 = PyInt_FromString((char *)"3769721975", 0, 0); if (unlikely(!__pyx_int_3769721975)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3772791771 = PyInt_FromString((char *)"3772791771", 0, 0); if (unlikely(!__pyx_int_3772791771)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3776767469 = PyInt_FromString((char *)"3776767469", 0, 0); if (unlikely(!__pyx_int_3776767469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3778151818 = PyInt_FromString((char *)"3778151818", 0, 0); if (unlikely(!__pyx_int_3778151818)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3778599393 = PyInt_FromString((char *)"3778599393", 0, 0); if (unlikely(!__pyx_int_3778599393)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3780097726 = PyInt_FromString((char *)"3780097726", 0, 0); if (unlikely(!__pyx_int_3780097726)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3781033664 = PyInt_FromString((char *)"3781033664", 0, 0); if (unlikely(!__pyx_int_3781033664)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3787349855 = PyInt_FromString((char *)"3787349855", 0, 0); if (unlikely(!__pyx_int_3787349855)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3789633753 = PyInt_FromString((char *)"3789633753", 0, 0); if (unlikely(!__pyx_int_3789633753)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3791519004 = PyInt_FromString((char *)"3791519004", 0, 0); if (unlikely(!__pyx_int_3791519004)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3794078908 = PyInt_FromString((char *)"3794078908", 0, 0); if (unlikely(!__pyx_int_3794078908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3795705826 = PyInt_FromString((char *)"3795705826", 0, 0); if (unlikely(!__pyx_int_3795705826)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3799085459 = PyInt_FromString((char *)"3799085459", 0, 0); if (unlikely(!__pyx_int_3799085459)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3799141122 = PyInt_FromString((char *)"3799141122", 0, 0); if (unlikely(!__pyx_int_3799141122)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3801332234 = PyInt_FromString((char *)"3801332234", 0, 0); if (unlikely(!__pyx_int_3801332234)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3802222185 = PyInt_FromString((char *)"3802222185", 0, 0); if (unlikely(!__pyx_int_3802222185)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3803995742 = PyInt_FromString((char *)"3803995742", 0, 0); if (unlikely(!__pyx_int_3803995742)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3806477791 = PyInt_FromString((char *)"3806477791", 0, 0); if (unlikely(!__pyx_int_3806477791)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3808662347 = PyInt_FromString((char *)"3808662347", 0, 0); if (unlikely(!__pyx_int_3808662347)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3810496343 = PyInt_FromString((char *)"3810496343", 0, 0); if (unlikely(!__pyx_int_3810496343)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3812548067 = PyInt_FromString((char *)"3812548067", 0, 0); if (unlikely(!__pyx_int_3812548067)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3813386408 = PyInt_FromString((char *)"3813386408", 0, 0); if (unlikely(!__pyx_int_3813386408)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3818836405 = PyInt_FromString((char *)"3818836405", 0, 0); if (unlikely(!__pyx_int_3818836405)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3822090177 = PyInt_FromString((char *)"3822090177", 0, 0); if (unlikely(!__pyx_int_3822090177)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3823320797 = PyInt_FromString((char *)"3823320797", 0, 0); if (unlikely(!__pyx_int_3823320797)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3825007647 = PyInt_FromString((char *)"3825007647", 0, 0); if (unlikely(!__pyx_int_3825007647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3828103837 = PyInt_FromString((char *)"3828103837", 0, 0); if (unlikely(!__pyx_int_3828103837)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3828863972 = PyInt_FromString((char *)"3828863972", 0, 0); if (unlikely(!__pyx_int_3828863972)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3832705686 = PyInt_FromString((char *)"3832705686", 0, 0); if (unlikely(!__pyx_int_3832705686)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3835036895 = PyInt_FromString((char *)"3835036895", 0, 0); if (unlikely(!__pyx_int_3835036895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3835484340 = PyInt_FromString((char *)"3835484340", 0, 0); if (unlikely(!__pyx_int_3835484340)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3837287516 = PyInt_FromString((char *)"3837287516", 0, 0); if (unlikely(!__pyx_int_3837287516)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3840161747 = PyInt_FromString((char *)"3840161747", 0, 0); if (unlikely(!__pyx_int_3840161747)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3841024952 = PyInt_FromString((char *)"3841024952", 0, 0); if (unlikely(!__pyx_int_3841024952)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3843699074 = PyInt_FromString((char *)"3843699074", 0, 0); if (unlikely(!__pyx_int_3843699074)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3845444069 = PyInt_FromString((char *)"3845444069", 0, 0); if (unlikely(!__pyx_int_3845444069)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3847203498 = PyInt_FromString((char *)"3847203498", 0, 0); if (unlikely(!__pyx_int_3847203498)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3854606378 = PyInt_FromString((char *)"3854606378", 0, 0); if (unlikely(!__pyx_int_3854606378)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3856137295 = PyInt_FromString((char *)"3856137295", 0, 0); if (unlikely(!__pyx_int_3856137295)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3857003729 = PyInt_FromString((char *)"3857003729", 0, 0); if (unlikely(!__pyx_int_3857003729)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3857572124 = PyInt_FromString((char *)"3857572124", 0, 0); if (unlikely(!__pyx_int_3857572124)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3858759450 = PyInt_FromString((char *)"3858759450", 0, 0); if (unlikely(!__pyx_int_3858759450)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3862026214 = PyInt_FromString((char *)"3862026214", 0, 0); if (unlikely(!__pyx_int_3862026214)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3863849899 = PyInt_FromString((char *)"3863849899", 0, 0); if (unlikely(!__pyx_int_3863849899)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3866325909 = PyInt_FromString((char *)"3866325909", 0, 0); if (unlikely(!__pyx_int_3866325909)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3867060991 = PyInt_FromString((char *)"3867060991", 0, 0); if (unlikely(!__pyx_int_3867060991)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3868552805 = PyInt_FromString((char *)"3868552805", 0, 0); if (unlikely(!__pyx_int_3868552805)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3871163981 = PyInt_FromString((char *)"3871163981", 0, 0); if (unlikely(!__pyx_int_3871163981)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3873845719 = PyInt_FromString((char *)"3873845719", 0, 0); if (unlikely(!__pyx_int_3873845719)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3874428392 = PyInt_FromString((char *)"3874428392", 0, 0); if (unlikely(!__pyx_int_3874428392)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3875770207 = PyInt_FromString((char *)"3875770207", 0, 0); if (unlikely(!__pyx_int_3875770207)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3876557655 = PyInt_FromString((char *)"3876557655", 0, 0); if (unlikely(!__pyx_int_3876557655)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3877198648 = PyInt_FromString((char *)"3877198648", 0, 0); if (unlikely(!__pyx_int_3877198648)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3878868455 = PyInt_FromString((char *)"3878868455", 0, 0); if (unlikely(!__pyx_int_3878868455)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3885750714 = PyInt_FromString((char *)"3885750714", 0, 0); if (unlikely(!__pyx_int_3885750714)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3887750493 = PyInt_FromString((char *)"3887750493", 0, 0); if (unlikely(!__pyx_int_3887750493)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3890688725 = PyInt_FromString((char *)"3890688725", 0, 0); if (unlikely(!__pyx_int_3890688725)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3892248089 = PyInt_FromString((char *)"3892248089", 0, 0); if (unlikely(!__pyx_int_3892248089)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3894660072 = PyInt_FromString((char *)"3894660072", 0, 0); if (unlikely(!__pyx_int_3894660072)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3896688048 = PyInt_FromString((char *)"3896688048", 0, 0); if (unlikely(!__pyx_int_3896688048)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3899946140 = PyInt_FromString((char *)"3899946140", 0, 0); if (unlikely(!__pyx_int_3899946140)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3901806776 = PyInt_FromString((char *)"3901806776", 0, 0); if (unlikely(!__pyx_int_3901806776)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3902563182 = PyInt_FromString((char *)"3902563182", 0, 0); if (unlikely(!__pyx_int_3902563182)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3903871064 = PyInt_FromString((char *)"3903871064", 0, 0); if (unlikely(!__pyx_int_3903871064)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3907448597 = PyInt_FromString((char *)"3907448597", 0, 0); if (unlikely(!__pyx_int_3907448597)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3907527627 = PyInt_FromString((char *)"3907527627", 0, 0); if (unlikely(!__pyx_int_3907527627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3910161971 = PyInt_FromString((char *)"3910161971", 0, 0); if (unlikely(!__pyx_int_3910161971)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3911240169 = PyInt_FromString((char *)"3911240169", 0, 0); if (unlikely(!__pyx_int_3911240169)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3913789102 = PyInt_FromString((char *)"3913789102", 0, 0); if (unlikely(!__pyx_int_3913789102)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3915653703 = PyInt_FromString((char *)"3915653703", 0, 0); if (unlikely(!__pyx_int_3915653703)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3917234703 = PyInt_FromString((char *)"3917234703", 0, 0); if (unlikely(!__pyx_int_3917234703)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3919042237 = PyInt_FromString((char *)"3919042237", 0, 0); if (unlikely(!__pyx_int_3919042237)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3924369609 = PyInt_FromString((char *)"3924369609", 0, 0); if (unlikely(!__pyx_int_3924369609)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3925473552 = PyInt_FromString((char *)"3925473552", 0, 0); if (unlikely(!__pyx_int_3925473552)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3926170974 = PyInt_FromString((char *)"3926170974", 0, 0); if (unlikely(!__pyx_int_3926170974)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3926825029 = PyInt_FromString((char *)"3926825029", 0, 0); if (unlikely(!__pyx_int_3926825029)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3928346602 = PyInt_FromString((char *)"3928346602", 0, 0); if (unlikely(!__pyx_int_3928346602)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3930435503 = PyInt_FromString((char *)"3930435503", 0, 0); if (unlikely(!__pyx_int_3930435503)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3931371469 = PyInt_FromString((char *)"3931371469", 0, 0); if (unlikely(!__pyx_int_3931371469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3933566367 = PyInt_FromString((char *)"3933566367", 0, 0); if (unlikely(!__pyx_int_3933566367)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3936291284 = PyInt_FromString((char *)"3936291284", 0, 0); if (unlikely(!__pyx_int_3936291284)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3941213647 = PyInt_FromString((char *)"3941213647", 0, 0); if (unlikely(!__pyx_int_3941213647)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3943906441 = PyInt_FromString((char *)"3943906441", 0, 0); if (unlikely(!__pyx_int_3943906441)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3945188843 = PyInt_FromString((char *)"3945188843", 0, 0); if (unlikely(!__pyx_int_3945188843)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3945269170 = PyInt_FromString((char *)"3945269170", 0, 0); if (unlikely(!__pyx_int_3945269170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3950355702 = PyInt_FromString((char *)"3950355702", 0, 0); if (unlikely(!__pyx_int_3950355702)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3954334041 = PyInt_FromString((char *)"3954334041", 0, 0); if (unlikely(!__pyx_int_3954334041)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3955191162 = PyInt_FromString((char *)"3955191162", 0, 0); if (unlikely(!__pyx_int_3955191162)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3958056653 = PyInt_FromString((char *)"3958056653", 0, 0); if (unlikely(!__pyx_int_3958056653)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3958962195 = PyInt_FromString((char *)"3958962195", 0, 0); if (unlikely(!__pyx_int_3958962195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3960309330 = PyInt_FromString((char *)"3960309330", 0, 0); if (unlikely(!__pyx_int_3960309330)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3962553324 = PyInt_FromString((char *)"3962553324", 0, 0); if (unlikely(!__pyx_int_3962553324)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3963161475 = PyInt_FromString((char *)"3963161475", 0, 0); if (unlikely(!__pyx_int_3963161475)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3963727277 = PyInt_FromString((char *)"3963727277", 0, 0); if (unlikely(!__pyx_int_3963727277)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3967186586 = PyInt_FromString((char *)"3967186586", 0, 0); if (unlikely(!__pyx_int_3967186586)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3969562369 = PyInt_FromString((char *)"3969562369", 0, 0); if (unlikely(!__pyx_int_3969562369)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3973773121 = PyInt_FromString((char *)"3973773121", 0, 0); if (unlikely(!__pyx_int_3973773121)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3974901699 = PyInt_FromString((char *)"3974901699", 0, 0); if (unlikely(!__pyx_int_3974901699)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3977675356 = PyInt_FromString((char *)"3977675356", 0, 0); if (unlikely(!__pyx_int_3977675356)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3979133421 = PyInt_FromString((char *)"3979133421", 0, 0); if (unlikely(!__pyx_int_3979133421)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3980931627 = PyInt_FromString((char *)"3980931627", 0, 0); if (unlikely(!__pyx_int_3980931627)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3988151131 = PyInt_FromString((char *)"3988151131", 0, 0); if (unlikely(!__pyx_int_3988151131)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3990953189 = PyInt_FromString((char *)"3990953189", 0, 0); if (unlikely(!__pyx_int_3990953189)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3991743681 = PyInt_FromString((char *)"3991743681", 0, 0); if (unlikely(!__pyx_int_3991743681)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3992714006 = PyInt_FromString((char *)"3992714006", 0, 0); if (unlikely(!__pyx_int_3992714006)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3992742070 = PyInt_FromString((char *)"3992742070", 0, 0); if (unlikely(!__pyx_int_3992742070)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3995715566 = PyInt_FromString((char *)"3995715566", 0, 0); if (unlikely(!__pyx_int_3995715566)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4000806809 = PyInt_FromString((char *)"4000806809", 0, 0); if (unlikely(!__pyx_int_4000806809)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4002861748 = PyInt_FromString((char *)"4002861748", 0, 0); if (unlikely(!__pyx_int_4002861748)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4003061179 = PyInt_FromString((char *)"4003061179", 0, 0); if (unlikely(!__pyx_int_4003061179)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4004797018 = PyInt_FromString((char *)"4004797018", 0, 0); if (unlikely(!__pyx_int_4004797018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4006521127 = PyInt_FromString((char *)"4006521127", 0, 0); if (unlikely(!__pyx_int_4006521127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4007360968 = PyInt_FromString((char *)"4007360968", 0, 0); if (unlikely(!__pyx_int_4007360968)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4008585671 = PyInt_FromString((char *)"4008585671", 0, 0); if (unlikely(!__pyx_int_4008585671)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4011190502 = PyInt_FromString((char *)"4011190502", 0, 0); if (unlikely(!__pyx_int_4011190502)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4011996048 = PyInt_FromString((char *)"4011996048", 0, 0); if (unlikely(!__pyx_int_4011996048)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4012557807 = PyInt_FromString((char *)"4012557807", 0, 0); if (unlikely(!__pyx_int_4012557807)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4014189740 = PyInt_FromString((char *)"4014189740", 0, 0); if (unlikely(!__pyx_int_4014189740)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4020912224 = PyInt_FromString((char *)"4020912224", 0, 0); if (unlikely(!__pyx_int_4020912224)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4021308739 = PyInt_FromString((char *)"4021308739", 0, 0); if (unlikely(!__pyx_int_4021308739)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4025428677 = PyInt_FromString((char *)"4025428677", 0, 0); if (unlikely(!__pyx_int_4025428677)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4026202645 = PyInt_FromString((char *)"4026202645", 0, 0); if (unlikely(!__pyx_int_4026202645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4027317232 = PyInt_FromString((char *)"4027317232", 0, 0); if (unlikely(!__pyx_int_4027317232)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4027744588 = PyInt_FromString((char *)"4027744588", 0, 0); if (unlikely(!__pyx_int_4027744588)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4030667424 = PyInt_FromString((char *)"4030667424", 0, 0); if (unlikely(!__pyx_int_4030667424)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4034427016 = PyInt_FromString((char *)"4034427016", 0, 0); if (unlikely(!__pyx_int_4034427016)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4035489047 = PyInt_FromString((char *)"4035489047", 0, 0); if (unlikely(!__pyx_int_4035489047)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4037038160 = PyInt_FromString((char *)"4037038160", 0, 0); if (unlikely(!__pyx_int_4037038160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4042263547 = PyInt_FromString((char *)"4042263547", 0, 0); if (unlikely(!__pyx_int_4042263547)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4042459122 = PyInt_FromString((char *)"4042459122", 0, 0); if (unlikely(!__pyx_int_4042459122)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4043610186 = PyInt_FromString((char *)"4043610186", 0, 0); if (unlikely(!__pyx_int_4043610186)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4043897329 = PyInt_FromString((char *)"4043897329", 0, 0); if (unlikely(!__pyx_int_4043897329)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4044981591 = PyInt_FromString((char *)"4044981591", 0, 0); if (unlikely(!__pyx_int_4044981591)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4045380933 = PyInt_FromString((char *)"4045380933", 0, 0); if (unlikely(!__pyx_int_4045380933)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4049053350 = PyInt_FromString((char *)"4049053350", 0, 0); if (unlikely(!__pyx_int_4049053350)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4049844452 = PyInt_FromString((char *)"4049844452", 0, 0); if (unlikely(!__pyx_int_4049844452)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4059105529 = PyInt_FromString((char *)"4059105529", 0, 0); if (unlikely(!__pyx_int_4059105529)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4059428100 = PyInt_FromString((char *)"4059428100", 0, 0); if (unlikely(!__pyx_int_4059428100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4061003762 = PyInt_FromString((char *)"4061003762", 0, 0); if (unlikely(!__pyx_int_4061003762)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4063242375 = PyInt_FromString((char *)"4063242375", 0, 0); if (unlikely(!__pyx_int_4063242375)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4065699751 = PyInt_FromString((char *)"4065699751", 0, 0); if (unlikely(!__pyx_int_4065699751)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4067639125 = PyInt_FromString((char *)"4067639125", 0, 0); if (unlikely(!__pyx_int_4067639125)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4068047243 = PyInt_FromString((char *)"4068047243", 0, 0); if (unlikely(!__pyx_int_4068047243)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4069246893 = PyInt_FromString((char *)"4069246893", 0, 0); if (unlikely(!__pyx_int_4069246893)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4075877127 = PyInt_FromString((char *)"4075877127", 0, 0); if (unlikely(!__pyx_int_4075877127)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4075949567 = PyInt_FromString((char *)"4075949567", 0, 0); if (unlikely(!__pyx_int_4075949567)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4077384432 = PyInt_FromString((char *)"4077384432", 0, 0); if (unlikely(!__pyx_int_4077384432)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4077846003 = PyInt_FromString((char *)"4077846003", 0, 0); if (unlikely(!__pyx_int_4077846003)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4082475170 = PyInt_FromString((char *)"4082475170", 0, 0); if (unlikely(!__pyx_int_4082475170)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4085369519 = PyInt_FromString((char *)"4085369519", 0, 0); if (unlikely(!__pyx_int_4085369519)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4087501137 = PyInt_FromString((char *)"4087501137", 0, 0); if (unlikely(!__pyx_int_4087501137)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4091327024 = PyInt_FromString((char *)"4091327024", 0, 0); if (unlikely(!__pyx_int_4091327024)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4092792573 = PyInt_FromString((char *)"4092792573", 0, 0); if (unlikely(!__pyx_int_4092792573)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4092916743 = PyInt_FromString((char *)"4092916743", 0, 0); if (unlikely(!__pyx_int_4092916743)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4094161908 = PyInt_FromString((char *)"4094161908", 0, 0); if (unlikely(!__pyx_int_4094161908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4098991525 = PyInt_FromString((char *)"4098991525", 0, 0); if (unlikely(!__pyx_int_4098991525)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4100872472 = PyInt_FromString((char *)"4100872472", 0, 0); if (unlikely(!__pyx_int_4100872472)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4101667470 = PyInt_FromString((char *)"4101667470", 0, 0); if (unlikely(!__pyx_int_4101667470)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4102977912 = PyInt_FromString((char *)"4102977912", 0, 0); if (unlikely(!__pyx_int_4102977912)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4104605777 = PyInt_FromString((char *)"4104605777", 0, 0); if (unlikely(!__pyx_int_4104605777)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4107101658 = PyInt_FromString((char *)"4107101658", 0, 0); if (unlikely(!__pyx_int_4107101658)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4109633523 = PyInt_FromString((char *)"4109633523", 0, 0); if (unlikely(!__pyx_int_4109633523)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4110568485 = PyInt_FromString((char *)"4110568485", 0, 0); if (unlikely(!__pyx_int_4110568485)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4110742005 = PyInt_FromString((char *)"4110742005", 0, 0); if (unlikely(!__pyx_int_4110742005)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4118925222 = PyInt_FromString((char *)"4118925222", 0, 0); if (unlikely(!__pyx_int_4118925222)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4118987695 = PyInt_FromString((char *)"4118987695", 0, 0); if (unlikely(!__pyx_int_4118987695)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4121318227 = PyInt_FromString((char *)"4121318227", 0, 0); if (unlikely(!__pyx_int_4121318227)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4122762354 = PyInt_FromString((char *)"4122762354", 0, 0); if (unlikely(!__pyx_int_4122762354)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4126475505 = PyInt_FromString((char *)"4126475505", 0, 0); if (unlikely(!__pyx_int_4126475505)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4126668546 = PyInt_FromString((char *)"4126668546", 0, 0); if (unlikely(!__pyx_int_4126668546)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4127324150 = PyInt_FromString((char *)"4127324150", 0, 0); if (unlikely(!__pyx_int_4127324150)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4130281361 = PyInt_FromString((char *)"4130281361", 0, 0); if (unlikely(!__pyx_int_4130281361)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4135287693 = PyInt_FromString((char *)"4135287693", 0, 0); if (unlikely(!__pyx_int_4135287693)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4136440770 = PyInt_FromString((char *)"4136440770", 0, 0); if (unlikely(!__pyx_int_4136440770)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4137964114 = PyInt_FromString((char *)"4137964114", 0, 0); if (unlikely(!__pyx_int_4137964114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4138563181 = PyInt_FromString((char *)"4138563181", 0, 0); if (unlikely(!__pyx_int_4138563181)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4142626212 = PyInt_FromString((char *)"4142626212", 0, 0); if (unlikely(!__pyx_int_4142626212)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4143317495 = PyInt_FromString((char *)"4143317495", 0, 0); if (unlikely(!__pyx_int_4143317495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4144047775 = PyInt_FromString((char *)"4144047775", 0, 0); if (unlikely(!__pyx_int_4144047775)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4144166391 = PyInt_FromString((char *)"4144166391", 0, 0); if (unlikely(!__pyx_int_4144166391)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4148292826 = PyInt_FromString((char *)"4148292826", 0, 0); if (unlikely(!__pyx_int_4148292826)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4149453988 = PyInt_FromString((char *)"4149453988", 0, 0); if (unlikely(!__pyx_int_4149453988)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4150144569 = PyInt_FromString((char *)"4150144569", 0, 0); if (unlikely(!__pyx_int_4150144569)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4157467219 = PyInt_FromString((char *)"4157467219", 0, 0); if (unlikely(!__pyx_int_4157467219)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4160157185 = PyInt_FromString((char *)"4160157185", 0, 0); if (unlikely(!__pyx_int_4160157185)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4160160501 = PyInt_FromString((char *)"4160160501", 0, 0); if (unlikely(!__pyx_int_4160160501)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4162055160 = PyInt_FromString((char *)"4162055160", 0, 0); if (unlikely(!__pyx_int_4162055160)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4162096729 = PyInt_FromString((char *)"4162096729", 0, 0); if (unlikely(!__pyx_int_4162096729)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4166623649 = PyInt_FromString((char *)"4166623649", 0, 0); if (unlikely(!__pyx_int_4166623649)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4168907908 = PyInt_FromString((char *)"4168907908", 0, 0); if (unlikely(!__pyx_int_4168907908)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4169408201 = PyInt_FromString((char *)"4169408201", 0, 0); if (unlikely(!__pyx_int_4169408201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4172763771 = PyInt_FromString((char *)"4172763771", 0, 0); if (unlikely(!__pyx_int_4172763771)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4174560061 = PyInt_FromString((char *)"4174560061", 0, 0); if (unlikely(!__pyx_int_4174560061)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4177007595 = PyInt_FromString((char *)"4177007595", 0, 0); if (unlikely(!__pyx_int_4177007595)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4178062228 = PyInt_FromString((char *)"4178062228", 0, 0); if (unlikely(!__pyx_int_4178062228)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4178635257 = PyInt_FromString((char *)"4178635257", 0, 0); if (unlikely(!__pyx_int_4178635257)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4180808110 = PyInt_FromString((char *)"4180808110", 0, 0); if (unlikely(!__pyx_int_4180808110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4181598602 = PyInt_FromString((char *)"4181598602", 0, 0); if (unlikely(!__pyx_int_4181598602)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4188952407 = PyInt_FromString((char *)"4188952407", 0, 0); if (unlikely(!__pyx_int_4188952407)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4190530515 = PyInt_FromString((char *)"4190530515", 0, 0); if (unlikely(!__pyx_int_4190530515)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4193382664 = PyInt_FromString((char *)"4193382664", 0, 0); if (unlikely(!__pyx_int_4193382664)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4193849577 = PyInt_FromString((char *)"4193849577", 0, 0); if (unlikely(!__pyx_int_4193849577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4195456072 = PyInt_FromString((char *)"4195456072", 0, 0); if (unlikely(!__pyx_int_4195456072)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4195741690 = PyInt_FromString((char *)"4195741690", 0, 0); if (unlikely(!__pyx_int_4195741690)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4199882800 = PyInt_FromString((char *)"4199882800", 0, 0); if (unlikely(!__pyx_int_4199882800)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4200115116 = PyInt_FromString((char *)"4200115116", 0, 0); if (unlikely(!__pyx_int_4200115116)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4202528135 = PyInt_FromString((char *)"4202528135", 0, 0); if (unlikely(!__pyx_int_4202528135)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4203181171 = PyInt_FromString((char *)"4203181171", 0, 0); if (unlikely(!__pyx_int_4203181171)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4205598294 = PyInt_FromString((char *)"4205598294", 0, 0); if (unlikely(!__pyx_int_4205598294)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4210693615 = PyInt_FromString((char *)"4210693615", 0, 0); if (unlikely(!__pyx_int_4210693615)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4211818798 = PyInt_FromString((char *)"4211818798", 0, 0); if (unlikely(!__pyx_int_4211818798)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4212583931 = PyInt_FromString((char *)"4212583931", 0, 0); if (unlikely(!__pyx_int_4212583931)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4213447064 = PyInt_FromString((char *)"4213447064", 0, 0); if (unlikely(!__pyx_int_4213447064)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4217086112 = PyInt_FromString((char *)"4217086112", 0, 0); if (unlikely(!__pyx_int_4217086112)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4219352155 = PyInt_FromString((char *)"4219352155", 0, 0); if (unlikely(!__pyx_int_4219352155)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4226871307 = PyInt_FromString((char *)"4226871307", 0, 0); if (unlikely(!__pyx_int_4226871307)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4227536621 = PyInt_FromString((char *)"4227536621", 0, 0); if (unlikely(!__pyx_int_4227536621)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4227665663 = PyInt_FromString((char *)"4227665663", 0, 0); if (unlikely(!__pyx_int_4227665663)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4229948412 = PyInt_FromString((char *)"4229948412", 0, 0); if (unlikely(!__pyx_int_4229948412)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4233094615 = PyInt_FromString((char *)"4233094615", 0, 0); if (unlikely(!__pyx_int_4233094615)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4234721005 = PyInt_FromString((char *)"4234721005", 0, 0); if (unlikely(!__pyx_int_4234721005)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4236148354 = PyInt_FromString((char *)"4236148354", 0, 0); if (unlikely(!__pyx_int_4236148354)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4236429990 = PyInt_FromString((char *)"4236429990", 0, 0); if (unlikely(!__pyx_int_4236429990)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4237083816 = PyInt_FromString((char *)"4237083816", 0, 0); if (unlikely(!__pyx_int_4237083816)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4238890068 = PyInt_FromString((char *)"4238890068", 0, 0); if (unlikely(!__pyx_int_4238890068)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4244381667 = PyInt_FromString((char *)"4244381667", 0, 0); if (unlikely(!__pyx_int_4244381667)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4245618683 = PyInt_FromString((char *)"4245618683", 0, 0); if (unlikely(!__pyx_int_4245618683)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4246310725 = PyInt_FromString((char *)"4246310725", 0, 0); if (unlikely(!__pyx_int_4246310725)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4246528509 = PyInt_FromString((char *)"4246528509", 0, 0); if (unlikely(!__pyx_int_4246528509)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4250903202 = PyInt_FromString((char *)"4250903202", 0, 0); if (unlikely(!__pyx_int_4250903202)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4255350624 = PyInt_FromString((char *)"4255350624", 0, 0); if (unlikely(!__pyx_int_4255350624)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4255800159 = PyInt_FromString((char *)"4255800159", 0, 0); if (unlikely(!__pyx_int_4255800159)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4260623118 = PyInt_FromString((char *)"4260623118", 0, 0); if (unlikely(!__pyx_int_4260623118)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4261223649 = PyInt_FromString((char *)"4261223649", 0, 0); if (unlikely(!__pyx_int_4261223649)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4263110654 = PyInt_FromString((char *)"4263110654", 0, 0); if (unlikely(!__pyx_int_4263110654)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4267549603 = PyInt_FromString((char *)"4267549603", 0, 0); if (unlikely(!__pyx_int_4267549603)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4269768577 = PyInt_FromString((char *)"4269768577", 0, 0); if (unlikely(!__pyx_int_4269768577)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4269907996 = PyInt_FromString((char *)"4269907996", 0, 0); if (unlikely(!__pyx_int_4269907996)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4270507174 = PyInt_FromString((char *)"4270507174", 0, 0); if (unlikely(!__pyx_int_4270507174)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4270639778 = PyInt_FromString((char *)"4270639778", 0, 0); if (unlikely(!__pyx_int_4270639778)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4274053469 = PyInt_FromString((char *)"4274053469", 0, 0); if (unlikely(!__pyx_int_4274053469)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4278065639 = PyInt_FromString((char *)"4278065639", 0, 0); if (unlikely(!__pyx_int_4278065639)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4279080257 = PyInt_FromString((char *)"4279080257", 0, 0); if (unlikely(!__pyx_int_4279080257)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4279952895 = PyInt_FromString((char *)"4279952895", 0, 0); if (unlikely(!__pyx_int_4279952895)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4284502037 = PyInt_FromString((char *)"4284502037", 0, 0); if (unlikely(!__pyx_int_4284502037)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4289353045 = PyInt_FromString((char *)"4289353045", 0, 0); if (unlikely(!__pyx_int_4289353045)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4293295786 = PyInt_FromString((char *)"4293295786", 0, 0); if (unlikely(!__pyx_int_4293295786)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4294111757 = PyInt_FromString((char *)"4294111757", 0, 0); if (unlikely(!__pyx_int_4294111757)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4294704398 = PyInt_FromString((char *)"4294704398", 0, 0); if (unlikely(!__pyx_int_4294704398)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4294908645 = PyInt_FromString((char *)"4294908645", 0, 0); if (unlikely(!__pyx_int_4294908645)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_8 = PyInt_FromLong(-8); if (unlikely(!__pyx_int_neg_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct___string_to_bytes = &__pyx_type_7Aeskeys___pyx_scope_struct___string_to_bytes;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_1_genexpr = &__pyx_type_7Aeskeys___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_2__bytes_to_string = &__pyx_type_7Aeskeys___pyx_scope_struct_2__bytes_to_string;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_3_genexpr = &__pyx_type_7Aeskeys___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_4_to_bufferable = &__pyx_type_7Aeskeys___pyx_scope_struct_4_to_bufferable;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_5_genexpr = &__pyx_type_7Aeskeys___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_6_to_bufferable = &__pyx_type_7Aeskeys___pyx_scope_struct_6_to_bufferable;
  if (PyType_Ready(&__pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7Aeskeys___pyx_scope_struct_7_genexpr = &__pyx_type_7Aeskeys___pyx_scope_struct_7_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initAeskeys(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initAeskeys(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Aeskeys(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Aeskeys(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Aeskeys(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Aeskeys' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Aeskeys(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Aeskeys", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Aeskeys) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Aeskeys")) {
      if (unlikely(PyDict_SetItemString(modules, "Aeskeys", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Aeskeys.pyx":13
 * #   CTR - Counter
 * 
 * import copy             # <<<<<<<<<<<<<<
 * import struct
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_copy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copy, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":14
 * 
 * import copy
 * import struct             # <<<<<<<<<<<<<<
 * 
 * __all__ = ["AES", "AES_CTR", "AES_CBC", "AES_CFB", "AES_ECB", "AES_OFB", "AESoperation", "Counter"]
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":16
 * import struct
 * 
 * __all__ = ["AES", "AES_CTR", "AES_CBC", "AES_CFB", "AES_ECB", "AES_OFB", "AESoperation", "Counter"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AES);
  __Pyx_GIVEREF(__pyx_n_s_AES);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AES);
  __Pyx_INCREF(__pyx_n_s_AES_CTR);
  __Pyx_GIVEREF(__pyx_n_s_AES_CTR);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_AES_CTR);
  __Pyx_INCREF(__pyx_n_s_AES_CBC);
  __Pyx_GIVEREF(__pyx_n_s_AES_CBC);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_AES_CBC);
  __Pyx_INCREF(__pyx_n_s_AES_CFB);
  __Pyx_GIVEREF(__pyx_n_s_AES_CFB);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_AES_CFB);
  __Pyx_INCREF(__pyx_n_s_AES_ECB);
  __Pyx_GIVEREF(__pyx_n_s_AES_ECB);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_AES_ECB);
  __Pyx_INCREF(__pyx_n_s_AES_OFB);
  __Pyx_GIVEREF(__pyx_n_s_AES_OFB);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_AES_OFB);
  __Pyx_INCREF(__pyx_n_s_AESoperation);
  __Pyx_GIVEREF(__pyx_n_s_AESoperation);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_AESoperation);
  __Pyx_INCREF(__pyx_n_s_Counter);
  __Pyx_GIVEREF(__pyx_n_s_Counter);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_Counter);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":19
 * 
 * 
 * def _compact_word(word):             # <<<<<<<<<<<<<<
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_1_compact_word, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compact_word, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":22
 *     return (word[0] << 24) | (word[1] << 16) | (word[2] << 8) | word[3]
 * 
 * def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *     return list(ord(c) for c in text)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_3_string_to_bytes, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_to_bytes, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":25
 *     return list(ord(c) for c in text)
 * 
 * def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *     return "".join(chr(b) for b in binary)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_5_bytes_to_string, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bytes_to_string, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":28
 *     return "".join(chr(b) for b in binary)
 * 
 * def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *     return a + b
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_7_concat_list, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat_list, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":31
 *     return a + b
 * 
 * try:             # <<<<<<<<<<<<<<
 *     xrange
 * except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "Aeskeys.pyx":32
 * 
 * try:
 *     xrange             # <<<<<<<<<<<<<<
 * except Exception:
 *     xrange = range
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_xrange); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "Aeskeys.pyx":31
 *     return a + b
 * 
 * try:             # <<<<<<<<<<<<<<
 *     xrange
 * except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "Aeskeys.pyx":33
 * try:
 *     xrange
 * except Exception:             # <<<<<<<<<<<<<<
 *     xrange = range
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_5) {
      __Pyx_AddTraceback("Aeskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 33, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "Aeskeys.pyx":34
 *     xrange
 * except Exception:
 *     xrange = range             # <<<<<<<<<<<<<<
 * 
 *     def _string_to_bytes(text):
 */
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_xrange, __pyx_builtin_range) < 0) __PYX_ERR(0, 34, __pyx_L4_except_error)

      /* "Aeskeys.pyx":36
 *     xrange = range
 * 
 *     def _string_to_bytes(text):             # <<<<<<<<<<<<<<
 *         if isinstance(text, bytes):
 *             return text
 */
      __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_9_string_to_bytes, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 36, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_to_bytes, __pyx_t_8) < 0) __PYX_ERR(0, 36, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":41
 *         return [ord(c) for c in text]
 * 
 *     def _bytes_to_string(binary):             # <<<<<<<<<<<<<<
 *         return bytes(binary)
 * 
 */
      __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_11_bytes_to_string, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 41, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_bytes_to_string, __pyx_t_8) < 0) __PYX_ERR(0, 41, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":44
 *         return bytes(binary)
 * 
 *     def _concat_list(a, b):             # <<<<<<<<<<<<<<
 *         return a + bytes(b)
 * 
 */
      __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_13_concat_list, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 44, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_concat_list, __pyx_t_8) < 0) __PYX_ERR(0, 44, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":47
 *         return a + bytes(b)
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         if isinstance(binary, bytes):
 *             return binary
 */
      __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_15to_bufferable, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 47, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_to_bufferable, __pyx_t_8) < 0) __PYX_ERR(0, 47, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":52
 *         return bytes(ord(b) for b in binary)
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
      __pyx_t_8 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_17_get_byte, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 52, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_byte, __pyx_t_8) < 0) __PYX_ERR(0, 52, __pyx_L4_except_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "Aeskeys.pyx":31
 *     return a + b
 * 
 * try:             # <<<<<<<<<<<<<<
 *     xrange
 * except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L7_try_end:;
  }

  /* "Aeskeys.pyx":55
 *         return c
 * 
 * class AES(object):             # <<<<<<<<<<<<<<
 * 
 *     # Number of rounds by keysize ~
 */
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__48); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_tuple__48, __pyx_n_s_AES, __pyx_n_s_AES, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Aeskeys.pyx":58
 * 
 *     # Number of rounds by keysize ~
 *     number_of_rounds = {16: 10, 24: 12, 32: 14}             # <<<<<<<<<<<<<<
 * 
 *     # Round constant words ~
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_16, __pyx_int_10) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_24, __pyx_int_12) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32, __pyx_int_14) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_number_of_rounds, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":61
 * 
 *     # Round constant words ~
 *     rcon = [ 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91 ]             # <<<<<<<<<<<<<<
 * 
 *     # S-box and Inverse S-box (S is for Substitution) ~
 */
  __pyx_t_1 = PyList_New(30); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_4);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_8);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_16);
  __Pyx_INCREF(__pyx_int_32);
  __Pyx_GIVEREF(__pyx_int_32);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_32);
  __Pyx_INCREF(__pyx_int_64);
  __Pyx_GIVEREF(__pyx_int_64);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_64);
  __Pyx_INCREF(__pyx_int_128);
  __Pyx_GIVEREF(__pyx_int_128);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_128);
  __Pyx_INCREF(__pyx_int_27);
  __Pyx_GIVEREF(__pyx_int_27);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_27);
  __Pyx_INCREF(__pyx_int_54);
  __Pyx_GIVEREF(__pyx_int_54);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_54);
  __Pyx_INCREF(__pyx_int_108);
  __Pyx_GIVEREF(__pyx_int_108);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_108);
  __Pyx_INCREF(__pyx_int_216);
  __Pyx_GIVEREF(__pyx_int_216);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_216);
  __Pyx_INCREF(__pyx_int_171);
  __Pyx_GIVEREF(__pyx_int_171);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_171);
  __Pyx_INCREF(__pyx_int_77);
  __Pyx_GIVEREF(__pyx_int_77);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_77);
  __Pyx_INCREF(__pyx_int_154);
  __Pyx_GIVEREF(__pyx_int_154);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_154);
  __Pyx_INCREF(__pyx_int_47);
  __Pyx_GIVEREF(__pyx_int_47);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_47);
  __Pyx_INCREF(__pyx_int_94);
  __Pyx_GIVEREF(__pyx_int_94);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_94);
  __Pyx_INCREF(__pyx_int_188);
  __Pyx_GIVEREF(__pyx_int_188);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_188);
  __Pyx_INCREF(__pyx_int_99);
  __Pyx_GIVEREF(__pyx_int_99);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_99);
  __Pyx_INCREF(__pyx_int_198);
  __Pyx_GIVEREF(__pyx_int_198);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_198);
  __Pyx_INCREF(__pyx_int_151);
  __Pyx_GIVEREF(__pyx_int_151);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_151);
  __Pyx_INCREF(__pyx_int_53);
  __Pyx_GIVEREF(__pyx_int_53);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_53);
  __Pyx_INCREF(__pyx_int_106);
  __Pyx_GIVEREF(__pyx_int_106);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_106);
  __Pyx_INCREF(__pyx_int_212);
  __Pyx_GIVEREF(__pyx_int_212);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_212);
  __Pyx_INCREF(__pyx_int_179);
  __Pyx_GIVEREF(__pyx_int_179);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_179);
  __Pyx_INCREF(__pyx_int_125);
  __Pyx_GIVEREF(__pyx_int_125);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_125);
  __Pyx_INCREF(__pyx_int_250);
  __Pyx_GIVEREF(__pyx_int_250);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_250);
  __Pyx_INCREF(__pyx_int_239);
  __Pyx_GIVEREF(__pyx_int_239);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_239);
  __Pyx_INCREF(__pyx_int_197);
  __Pyx_GIVEREF(__pyx_int_197);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_197);
  __Pyx_INCREF(__pyx_int_145);
  __Pyx_GIVEREF(__pyx_int_145);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_145);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_rcon, __pyx_t_1) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":64
 * 
 *     # S-box and Inverse S-box (S is for Substitution) ~
 *     S = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]             # <<<<<<<<<<<<<<
 *     Si =[ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]
 * 
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_99);
  __Pyx_GIVEREF(__pyx_int_99);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_99);
  __Pyx_INCREF(__pyx_int_124);
  __Pyx_GIVEREF(__pyx_int_124);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_124);
  __Pyx_INCREF(__pyx_int_119);
  __Pyx_GIVEREF(__pyx_int_119);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_119);
  __Pyx_INCREF(__pyx_int_123);
  __Pyx_GIVEREF(__pyx_int_123);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_123);
  __Pyx_INCREF(__pyx_int_242);
  __Pyx_GIVEREF(__pyx_int_242);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_242);
  __Pyx_INCREF(__pyx_int_107);
  __Pyx_GIVEREF(__pyx_int_107);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_107);
  __Pyx_INCREF(__pyx_int_111);
  __Pyx_GIVEREF(__pyx_int_111);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_111);
  __Pyx_INCREF(__pyx_int_197);
  __Pyx_GIVEREF(__pyx_int_197);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_197);
  __Pyx_INCREF(__pyx_int_48);
  __Pyx_GIVEREF(__pyx_int_48);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_48);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_103);
  __Pyx_GIVEREF(__pyx_int_103);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_103);
  __Pyx_INCREF(__pyx_int_43);
  __Pyx_GIVEREF(__pyx_int_43);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_43);
  __Pyx_INCREF(__pyx_int_254);
  __Pyx_GIVEREF(__pyx_int_254);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_254);
  __Pyx_INCREF(__pyx_int_215);
  __Pyx_GIVEREF(__pyx_int_215);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_215);
  __Pyx_INCREF(__pyx_int_171);
  __Pyx_GIVEREF(__pyx_int_171);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_171);
  __Pyx_INCREF(__pyx_int_118);
  __Pyx_GIVEREF(__pyx_int_118);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_118);
  __Pyx_INCREF(__pyx_int_202);
  __Pyx_GIVEREF(__pyx_int_202);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_202);
  __Pyx_INCREF(__pyx_int_130);
  __Pyx_GIVEREF(__pyx_int_130);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_130);
  __Pyx_INCREF(__pyx_int_201);
  __Pyx_GIVEREF(__pyx_int_201);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_201);
  __Pyx_INCREF(__pyx_int_125);
  __Pyx_GIVEREF(__pyx_int_125);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_125);
  __Pyx_INCREF(__pyx_int_250);
  __Pyx_GIVEREF(__pyx_int_250);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_250);
  __Pyx_INCREF(__pyx_int_89);
  __Pyx_GIVEREF(__pyx_int_89);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_89);
  __Pyx_INCREF(__pyx_int_71);
  __Pyx_GIVEREF(__pyx_int_71);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_71);
  __Pyx_INCREF(__pyx_int_240);
  __Pyx_GIVEREF(__pyx_int_240);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_240);
  __Pyx_INCREF(__pyx_int_173);
  __Pyx_GIVEREF(__pyx_int_173);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_173);
  __Pyx_INCREF(__pyx_int_212);
  __Pyx_GIVEREF(__pyx_int_212);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_212);
  __Pyx_INCREF(__pyx_int_162);
  __Pyx_GIVEREF(__pyx_int_162);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_162);
  __Pyx_INCREF(__pyx_int_175);
  __Pyx_GIVEREF(__pyx_int_175);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_175);
  __Pyx_INCREF(__pyx_int_156);
  __Pyx_GIVEREF(__pyx_int_156);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_156);
  __Pyx_INCREF(__pyx_int_164);
  __Pyx_GIVEREF(__pyx_int_164);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_164);
  __Pyx_INCREF(__pyx_int_114);
  __Pyx_GIVEREF(__pyx_int_114);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_114);
  __Pyx_INCREF(__pyx_int_192);
  __Pyx_GIVEREF(__pyx_int_192);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_192);
  __Pyx_INCREF(__pyx_int_183);
  __Pyx_GIVEREF(__pyx_int_183);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_183);
  __Pyx_INCREF(__pyx_int_253);
  __Pyx_GIVEREF(__pyx_int_253);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_253);
  __Pyx_INCREF(__pyx_int_147);
  __Pyx_GIVEREF(__pyx_int_147);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_147);
  __Pyx_INCREF(__pyx_int_38);
  __Pyx_GIVEREF(__pyx_int_38);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_38);
  __Pyx_INCREF(__pyx_int_54);
  __Pyx_GIVEREF(__pyx_int_54);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_54);
  __Pyx_INCREF(__pyx_int_63);
  __Pyx_GIVEREF(__pyx_int_63);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_63);
  __Pyx_INCREF(__pyx_int_247);
  __Pyx_GIVEREF(__pyx_int_247);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_247);
  __Pyx_INCREF(__pyx_int_204);
  __Pyx_GIVEREF(__pyx_int_204);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_204);
  __Pyx_INCREF(__pyx_int_52);
  __Pyx_GIVEREF(__pyx_int_52);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_52);
  __Pyx_INCREF(__pyx_int_165);
  __Pyx_GIVEREF(__pyx_int_165);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_165);
  __Pyx_INCREF(__pyx_int_229);
  __Pyx_GIVEREF(__pyx_int_229);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_229);
  __Pyx_INCREF(__pyx_int_241);
  __Pyx_GIVEREF(__pyx_int_241);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_241);
  __Pyx_INCREF(__pyx_int_113);
  __Pyx_GIVEREF(__pyx_int_113);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_113);
  __Pyx_INCREF(__pyx_int_216);
  __Pyx_GIVEREF(__pyx_int_216);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_216);
  __Pyx_INCREF(__pyx_int_49);
  __Pyx_GIVEREF(__pyx_int_49);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_49);
  __Pyx_INCREF(__pyx_int_21);
  __Pyx_GIVEREF(__pyx_int_21);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_21);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_4);
  __Pyx_INCREF(__pyx_int_199);
  __Pyx_GIVEREF(__pyx_int_199);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_199);
  __Pyx_INCREF(__pyx_int_35);
  __Pyx_GIVEREF(__pyx_int_35);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_35);
  __Pyx_INCREF(__pyx_int_195);
  __Pyx_GIVEREF(__pyx_int_195);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_195);
  __Pyx_INCREF(__pyx_int_24);
  __Pyx_GIVEREF(__pyx_int_24);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_24);
  __Pyx_INCREF(__pyx_int_150);
  __Pyx_GIVEREF(__pyx_int_150);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_150);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_5);
  __Pyx_INCREF(__pyx_int_154);
  __Pyx_GIVEREF(__pyx_int_154);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_154);
  __Pyx_INCREF(__pyx_int_7);
  __Pyx_GIVEREF(__pyx_int_7);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_7);
  __Pyx_INCREF(__pyx_int_18);
  __Pyx_GIVEREF(__pyx_int_18);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_18);
  __Pyx_INCREF(__pyx_int_128);
  __Pyx_GIVEREF(__pyx_int_128);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_128);
  __Pyx_INCREF(__pyx_int_226);
  __Pyx_GIVEREF(__pyx_int_226);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_226);
  __Pyx_INCREF(__pyx_int_235);
  __Pyx_GIVEREF(__pyx_int_235);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_235);
  __Pyx_INCREF(__pyx_int_39);
  __Pyx_GIVEREF(__pyx_int_39);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_39);
  __Pyx_INCREF(__pyx_int_178);
  __Pyx_GIVEREF(__pyx_int_178);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_178);
  __Pyx_INCREF(__pyx_int_117);
  __Pyx_GIVEREF(__pyx_int_117);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_117);
  __Pyx_INCREF(__pyx_int_9);
  __Pyx_GIVEREF(__pyx_int_9);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_9);
  __Pyx_INCREF(__pyx_int_131);
  __Pyx_GIVEREF(__pyx_int_131);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_131);
  __Pyx_INCREF(__pyx_int_44);
  __Pyx_GIVEREF(__pyx_int_44);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_44);
  __Pyx_INCREF(__pyx_int_26);
  __Pyx_GIVEREF(__pyx_int_26);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_26);
  __Pyx_INCREF(__pyx_int_27);
  __Pyx_GIVEREF(__pyx_int_27);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_27);
  __Pyx_INCREF(__pyx_int_110);
  __Pyx_GIVEREF(__pyx_int_110);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_110);
  __Pyx_INCREF(__pyx_int_90);
  __Pyx_GIVEREF(__pyx_int_90);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_90);
  __Pyx_INCREF(__pyx_int_160);
  __Pyx_GIVEREF(__pyx_int_160);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_160);
  __Pyx_INCREF(__pyx_int_82);
  __Pyx_GIVEREF(__pyx_int_82);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_82);
  __Pyx_INCREF(__pyx_int_59);
  __Pyx_GIVEREF(__pyx_int_59);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_59);
  __Pyx_INCREF(__pyx_int_214);
  __Pyx_GIVEREF(__pyx_int_214);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_214);
  __Pyx_INCREF(__pyx_int_179);
  __Pyx_GIVEREF(__pyx_int_179);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_179);
  __Pyx_INCREF(__pyx_int_41);
  __Pyx_GIVEREF(__pyx_int_41);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_41);
  __Pyx_INCREF(__pyx_int_227);
  __Pyx_GIVEREF(__pyx_int_227);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_227);
  __Pyx_INCREF(__pyx_int_47);
  __Pyx_GIVEREF(__pyx_int_47);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_47);
  __Pyx_INCREF(__pyx_int_132);
  __Pyx_GIVEREF(__pyx_int_132);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_132);
  __Pyx_INCREF(__pyx_int_83);
  __Pyx_GIVEREF(__pyx_int_83);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_83);
  __Pyx_INCREF(__pyx_int_209);
  __Pyx_GIVEREF(__pyx_int_209);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_209);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_237);
  __Pyx_GIVEREF(__pyx_int_237);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_237);
  __Pyx_INCREF(__pyx_int_32);
  __Pyx_GIVEREF(__pyx_int_32);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_32);
  __Pyx_INCREF(__pyx_int_252);
  __Pyx_GIVEREF(__pyx_int_252);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_252);
  __Pyx_INCREF(__pyx_int_177);
  __Pyx_GIVEREF(__pyx_int_177);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_177);
  __Pyx_INCREF(__pyx_int_91);
  __Pyx_GIVEREF(__pyx_int_91);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_91);
  __Pyx_INCREF(__pyx_int_106);
  __Pyx_GIVEREF(__pyx_int_106);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_106);
  __Pyx_INCREF(__pyx_int_203);
  __Pyx_GIVEREF(__pyx_int_203);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_203);
  __Pyx_INCREF(__pyx_int_190);
  __Pyx_GIVEREF(__pyx_int_190);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_190);
  __Pyx_INCREF(__pyx_int_57);
  __Pyx_GIVEREF(__pyx_int_57);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_57);
  __Pyx_INCREF(__pyx_int_74);
  __Pyx_GIVEREF(__pyx_int_74);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_74);
  __Pyx_INCREF(__pyx_int_76);
  __Pyx_GIVEREF(__pyx_int_76);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_76);
  __Pyx_INCREF(__pyx_int_88);
  __Pyx_GIVEREF(__pyx_int_88);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_88);
  __Pyx_INCREF(__pyx_int_207);
  __Pyx_GIVEREF(__pyx_int_207);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_207);
  __Pyx_INCREF(__pyx_int_208);
  __Pyx_GIVEREF(__pyx_int_208);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_208);
  __Pyx_INCREF(__pyx_int_239);
  __Pyx_GIVEREF(__pyx_int_239);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_239);
  __Pyx_INCREF(__pyx_int_170);
  __Pyx_GIVEREF(__pyx_int_170);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_170);
  __Pyx_INCREF(__pyx_int_251);
  __Pyx_GIVEREF(__pyx_int_251);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_251);
  __Pyx_INCREF(__pyx_int_67);
  __Pyx_GIVEREF(__pyx_int_67);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_67);
  __Pyx_INCREF(__pyx_int_77);
  __Pyx_GIVEREF(__pyx_int_77);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_77);
  __Pyx_INCREF(__pyx_int_51);
  __Pyx_GIVEREF(__pyx_int_51);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_51);
  __Pyx_INCREF(__pyx_int_133);
  __Pyx_GIVEREF(__pyx_int_133);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_133);
  __Pyx_INCREF(__pyx_int_69);
  __Pyx_GIVEREF(__pyx_int_69);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_69);
  __Pyx_INCREF(__pyx_int_249);
  __Pyx_GIVEREF(__pyx_int_249);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_249);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_2);
  __Pyx_INCREF(__pyx_int_127);
  __Pyx_GIVEREF(__pyx_int_127);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_127);
  __Pyx_INCREF(__pyx_int_80);
  __Pyx_GIVEREF(__pyx_int_80);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_80);
  __Pyx_INCREF(__pyx_int_60);
  __Pyx_GIVEREF(__pyx_int_60);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_60);
  __Pyx_INCREF(__pyx_int_159);
  __Pyx_GIVEREF(__pyx_int_159);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_159);
  __Pyx_INCREF(__pyx_int_168);
  __Pyx_GIVEREF(__pyx_int_168);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_168);
  __Pyx_INCREF(__pyx_int_81);
  __Pyx_GIVEREF(__pyx_int_81);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_81);
  __Pyx_INCREF(__pyx_int_163);
  __Pyx_GIVEREF(__pyx_int_163);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_163);
  __Pyx_INCREF(__pyx_int_64);
  __Pyx_GIVEREF(__pyx_int_64);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_64);
  __Pyx_INCREF(__pyx_int_143);
  __Pyx_GIVEREF(__pyx_int_143);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_143);
  __Pyx_INCREF(__pyx_int_146);
  __Pyx_GIVEREF(__pyx_int_146);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_146);
  __Pyx_INCREF(__pyx_int_157);
  __Pyx_GIVEREF(__pyx_int_157);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_157);
  __Pyx_INCREF(__pyx_int_56);
  __Pyx_GIVEREF(__pyx_int_56);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_56);
  __Pyx_INCREF(__pyx_int_245);
  __Pyx_GIVEREF(__pyx_int_245);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_245);
  __Pyx_INCREF(__pyx_int_188);
  __Pyx_GIVEREF(__pyx_int_188);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_188);
  __Pyx_INCREF(__pyx_int_182);
  __Pyx_GIVEREF(__pyx_int_182);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_182);
  __Pyx_INCREF(__pyx_int_218);
  __Pyx_GIVEREF(__pyx_int_218);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_218);
  __Pyx_INCREF(__pyx_int_33);
  __Pyx_GIVEREF(__pyx_int_33);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_33);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_16);
  __Pyx_INCREF(__pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_255);
  __Pyx_INCREF(__pyx_int_243);
  __Pyx_GIVEREF(__pyx_int_243);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_243);
  __Pyx_INCREF(__pyx_int_210);
  __Pyx_GIVEREF(__pyx_int_210);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_210);
  __Pyx_INCREF(__pyx_int_205);
  __Pyx_GIVEREF(__pyx_int_205);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_205);
  __Pyx_INCREF(__pyx_int_12);
  __Pyx_GIVEREF(__pyx_int_12);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_12);
  __Pyx_INCREF(__pyx_int_19);
  __Pyx_GIVEREF(__pyx_int_19);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_19);
  __Pyx_INCREF(__pyx_int_236);
  __Pyx_GIVEREF(__pyx_int_236);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_236);
  __Pyx_INCREF(__pyx_int_95);
  __Pyx_GIVEREF(__pyx_int_95);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_95);
  __Pyx_INCREF(__pyx_int_151);
  __Pyx_GIVEREF(__pyx_int_151);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_151);
  __Pyx_INCREF(__pyx_int_68);
  __Pyx_GIVEREF(__pyx_int_68);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_68);
  __Pyx_INCREF(__pyx_int_23);
  __Pyx_GIVEREF(__pyx_int_23);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_23);
  __Pyx_INCREF(__pyx_int_196);
  __Pyx_GIVEREF(__pyx_int_196);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_196);
  __Pyx_INCREF(__pyx_int_167);
  __Pyx_GIVEREF(__pyx_int_167);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_167);
  __Pyx_INCREF(__pyx_int_126);
  __Pyx_GIVEREF(__pyx_int_126);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_126);
  __Pyx_INCREF(__pyx_int_61);
  __Pyx_GIVEREF(__pyx_int_61);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_61);
  __Pyx_INCREF(__pyx_int_100);
  __Pyx_GIVEREF(__pyx_int_100);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_100);
  __Pyx_INCREF(__pyx_int_93);
  __Pyx_GIVEREF(__pyx_int_93);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_93);
  __Pyx_INCREF(__pyx_int_25);
  __Pyx_GIVEREF(__pyx_int_25);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_25);
  __Pyx_INCREF(__pyx_int_115);
  __Pyx_GIVEREF(__pyx_int_115);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_115);
  __Pyx_INCREF(__pyx_int_96);
  __Pyx_GIVEREF(__pyx_int_96);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_96);
  __Pyx_INCREF(__pyx_int_129);
  __Pyx_GIVEREF(__pyx_int_129);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_129);
  __Pyx_INCREF(__pyx_int_79);
  __Pyx_GIVEREF(__pyx_int_79);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_79);
  __Pyx_INCREF(__pyx_int_220);
  __Pyx_GIVEREF(__pyx_int_220);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_220);
  __Pyx_INCREF(__pyx_int_34);
  __Pyx_GIVEREF(__pyx_int_34);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_34);
  __Pyx_INCREF(__pyx_int_42);
  __Pyx_GIVEREF(__pyx_int_42);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_42);
  __Pyx_INCREF(__pyx_int_144);
  __Pyx_GIVEREF(__pyx_int_144);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_144);
  __Pyx_INCREF(__pyx_int_136);
  __Pyx_GIVEREF(__pyx_int_136);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_136);
  __Pyx_INCREF(__pyx_int_70);
  __Pyx_GIVEREF(__pyx_int_70);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_70);
  __Pyx_INCREF(__pyx_int_238);
  __Pyx_GIVEREF(__pyx_int_238);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_238);
  __Pyx_INCREF(__pyx_int_184);
  __Pyx_GIVEREF(__pyx_int_184);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_184);
  __Pyx_INCREF(__pyx_int_20);
  __Pyx_GIVEREF(__pyx_int_20);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_20);
  __Pyx_INCREF(__pyx_int_222);
  __Pyx_GIVEREF(__pyx_int_222);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_222);
  __Pyx_INCREF(__pyx_int_94);
  __Pyx_GIVEREF(__pyx_int_94);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_94);
  __Pyx_INCREF(__pyx_int_11);
  __Pyx_GIVEREF(__pyx_int_11);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_11);
  __Pyx_INCREF(__pyx_int_219);
  __Pyx_GIVEREF(__pyx_int_219);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_219);
  __Pyx_INCREF(__pyx_int_224);
  __Pyx_GIVEREF(__pyx_int_224);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_224);
  __Pyx_INCREF(__pyx_int_50);
  __Pyx_GIVEREF(__pyx_int_50);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_50);
  __Pyx_INCREF(__pyx_int_58);
  __Pyx_GIVEREF(__pyx_int_58);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_58);
  __Pyx_INCREF(__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_10);
  __Pyx_INCREF(__pyx_int_73);
  __Pyx_GIVEREF(__pyx_int_73);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_73);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_36);
  __Pyx_GIVEREF(__pyx_int_36);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_36);
  __Pyx_INCREF(__pyx_int_92);
  __Pyx_GIVEREF(__pyx_int_92);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_92);
  __Pyx_INCREF(__pyx_int_194);
  __Pyx_GIVEREF(__pyx_int_194);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_194);
  __Pyx_INCREF(__pyx_int_211);
  __Pyx_GIVEREF(__pyx_int_211);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_211);
  __Pyx_INCREF(__pyx_int_172);
  __Pyx_GIVEREF(__pyx_int_172);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_172);
  __Pyx_INCREF(__pyx_int_98);
  __Pyx_GIVEREF(__pyx_int_98);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_98);
  __Pyx_INCREF(__pyx_int_145);
  __Pyx_GIVEREF(__pyx_int_145);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_145);
  __Pyx_INCREF(__pyx_int_149);
  __Pyx_GIVEREF(__pyx_int_149);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_149);
  __Pyx_INCREF(__pyx_int_228);
  __Pyx_GIVEREF(__pyx_int_228);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_228);
  __Pyx_INCREF(__pyx_int_121);
  __Pyx_GIVEREF(__pyx_int_121);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_121);
  __Pyx_INCREF(__pyx_int_231);
  __Pyx_GIVEREF(__pyx_int_231);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_231);
  __Pyx_INCREF(__pyx_int_200);
  __Pyx_GIVEREF(__pyx_int_200);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_200);
  __Pyx_INCREF(__pyx_int_55);
  __Pyx_GIVEREF(__pyx_int_55);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_55);
  __Pyx_INCREF(__pyx_int_109);
  __Pyx_GIVEREF(__pyx_int_109);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_109);
  __Pyx_INCREF(__pyx_int_141);
  __Pyx_GIVEREF(__pyx_int_141);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_141);
  __Pyx_INCREF(__pyx_int_213);
  __Pyx_GIVEREF(__pyx_int_213);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_213);
  __Pyx_INCREF(__pyx_int_78);
  __Pyx_GIVEREF(__pyx_int_78);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_78);
  __Pyx_INCREF(__pyx_int_169);
  __Pyx_GIVEREF(__pyx_int_169);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_169);
  __Pyx_INCREF(__pyx_int_108);
  __Pyx_GIVEREF(__pyx_int_108);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_108);
  __Pyx_INCREF(__pyx_int_86);
  __Pyx_GIVEREF(__pyx_int_86);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_86);
  __Pyx_INCREF(__pyx_int_244);
  __Pyx_GIVEREF(__pyx_int_244);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_244);
  __Pyx_INCREF(__pyx_int_234);
  __Pyx_GIVEREF(__pyx_int_234);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_234);
  __Pyx_INCREF(__pyx_int_101);
  __Pyx_GIVEREF(__pyx_int_101);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_101);
  __Pyx_INCREF(__pyx_int_122);
  __Pyx_GIVEREF(__pyx_int_122);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_122);
  __Pyx_INCREF(__pyx_int_174);
  __Pyx_GIVEREF(__pyx_int_174);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_174);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_8);
  __Pyx_INCREF(__pyx_int_186);
  __Pyx_GIVEREF(__pyx_int_186);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_186);
  __Pyx_INCREF(__pyx_int_120);
  __Pyx_GIVEREF(__pyx_int_120);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_120);
  __Pyx_INCREF(__pyx_int_37);
  __Pyx_GIVEREF(__pyx_int_37);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_37);
  __Pyx_INCREF(__pyx_int_46);
  __Pyx_GIVEREF(__pyx_int_46);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_46);
  __Pyx_INCREF(__pyx_int_28);
  __Pyx_GIVEREF(__pyx_int_28);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_28);
  __Pyx_INCREF(__pyx_int_166);
  __Pyx_GIVEREF(__pyx_int_166);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_166);
  __Pyx_INCREF(__pyx_int_180);
  __Pyx_GIVEREF(__pyx_int_180);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_180);
  __Pyx_INCREF(__pyx_int_198);
  __Pyx_GIVEREF(__pyx_int_198);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_198);
  __Pyx_INCREF(__pyx_int_232);
  __Pyx_GIVEREF(__pyx_int_232);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_232);
  __Pyx_INCREF(__pyx_int_221);
  __Pyx_GIVEREF(__pyx_int_221);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_221);
  __Pyx_INCREF(__pyx_int_116);
  __Pyx_GIVEREF(__pyx_int_116);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_116);
  __Pyx_INCREF(__pyx_int_31);
  __Pyx_GIVEREF(__pyx_int_31);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_31);
  __Pyx_INCREF(__pyx_int_75);
  __Pyx_GIVEREF(__pyx_int_75);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_75);
  __Pyx_INCREF(__pyx_int_189);
  __Pyx_GIVEREF(__pyx_int_189);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_189);
  __Pyx_INCREF(__pyx_int_139);
  __Pyx_GIVEREF(__pyx_int_139);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_139);
  __Pyx_INCREF(__pyx_int_138);
  __Pyx_GIVEREF(__pyx_int_138);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_138);
  __Pyx_INCREF(__pyx_int_112);
  __Pyx_GIVEREF(__pyx_int_112);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_112);
  __Pyx_INCREF(__pyx_int_62);
  __Pyx_GIVEREF(__pyx_int_62);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_62);
  __Pyx_INCREF(__pyx_int_181);
  __Pyx_GIVEREF(__pyx_int_181);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_181);
  __Pyx_INCREF(__pyx_int_102);
  __Pyx_GIVEREF(__pyx_int_102);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_102);
  __Pyx_INCREF(__pyx_int_72);
  __Pyx_GIVEREF(__pyx_int_72);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_72);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_3);
  __Pyx_INCREF(__pyx_int_246);
  __Pyx_GIVEREF(__pyx_int_246);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_246);
  __Pyx_INCREF(__pyx_int_14);
  __Pyx_GIVEREF(__pyx_int_14);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_14);
  __Pyx_INCREF(__pyx_int_97);
  __Pyx_GIVEREF(__pyx_int_97);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_97);
  __Pyx_INCREF(__pyx_int_53);
  __Pyx_GIVEREF(__pyx_int_53);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_53);
  __Pyx_INCREF(__pyx_int_87);
  __Pyx_GIVEREF(__pyx_int_87);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_87);
  __Pyx_INCREF(__pyx_int_185);
  __Pyx_GIVEREF(__pyx_int_185);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_185);
  __Pyx_INCREF(__pyx_int_134);
  __Pyx_GIVEREF(__pyx_int_134);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_134);
  __Pyx_INCREF(__pyx_int_193);
  __Pyx_GIVEREF(__pyx_int_193);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_193);
  __Pyx_INCREF(__pyx_int_29);
  __Pyx_GIVEREF(__pyx_int_29);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_29);
  __Pyx_INCREF(__pyx_int_158);
  __Pyx_GIVEREF(__pyx_int_158);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_158);
  __Pyx_INCREF(__pyx_int_225);
  __Pyx_GIVEREF(__pyx_int_225);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_225);
  __Pyx_INCREF(__pyx_int_248);
  __Pyx_GIVEREF(__pyx_int_248);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_248);
  __Pyx_INCREF(__pyx_int_152);
  __Pyx_GIVEREF(__pyx_int_152);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_152);
  __Pyx_INCREF(__pyx_int_17);
  __Pyx_GIVEREF(__pyx_int_17);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_17);
  __Pyx_INCREF(__pyx_int_105);
  __Pyx_GIVEREF(__pyx_int_105);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_105);
  __Pyx_INCREF(__pyx_int_217);
  __Pyx_GIVEREF(__pyx_int_217);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_217);
  __Pyx_INCREF(__pyx_int_142);
  __Pyx_GIVEREF(__pyx_int_142);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_142);
  __Pyx_INCREF(__pyx_int_148);
  __Pyx_GIVEREF(__pyx_int_148);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_148);
  __Pyx_INCREF(__pyx_int_155);
  __Pyx_GIVEREF(__pyx_int_155);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_155);
  __Pyx_INCREF(__pyx_int_30);
  __Pyx_GIVEREF(__pyx_int_30);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_30);
  __Pyx_INCREF(__pyx_int_135);
  __Pyx_GIVEREF(__pyx_int_135);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_135);
  __Pyx_INCREF(__pyx_int_233);
  __Pyx_GIVEREF(__pyx_int_233);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_233);
  __Pyx_INCREF(__pyx_int_206);
  __Pyx_GIVEREF(__pyx_int_206);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_206);
  __Pyx_INCREF(__pyx_int_85);
  __Pyx_GIVEREF(__pyx_int_85);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_85);
  __Pyx_INCREF(__pyx_int_40);
  __Pyx_GIVEREF(__pyx_int_40);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_40);
  __Pyx_INCREF(__pyx_int_223);
  __Pyx_GIVEREF(__pyx_int_223);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_223);
  __Pyx_INCREF(__pyx_int_140);
  __Pyx_GIVEREF(__pyx_int_140);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_140);
  __Pyx_INCREF(__pyx_int_161);
  __Pyx_GIVEREF(__pyx_int_161);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_161);
  __Pyx_INCREF(__pyx_int_137);
  __Pyx_GIVEREF(__pyx_int_137);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_137);
  __Pyx_INCREF(__pyx_int_13);
  __Pyx_GIVEREF(__pyx_int_13);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_13);
  __Pyx_INCREF(__pyx_int_191);
  __Pyx_GIVEREF(__pyx_int_191);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_191);
  __Pyx_INCREF(__pyx_int_230);
  __Pyx_GIVEREF(__pyx_int_230);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_230);
  __Pyx_INCREF(__pyx_int_66);
  __Pyx_GIVEREF(__pyx_int_66);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_66);
  __Pyx_INCREF(__pyx_int_104);
  __Pyx_GIVEREF(__pyx_int_104);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_104);
  __Pyx_INCREF(__pyx_int_65);
  __Pyx_GIVEREF(__pyx_int_65);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_65);
  __Pyx_INCREF(__pyx_int_153);
  __Pyx_GIVEREF(__pyx_int_153);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_153);
  __Pyx_INCREF(__pyx_int_45);
  __Pyx_GIVEREF(__pyx_int_45);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_45);
  __Pyx_INCREF(__pyx_int_15);
  __Pyx_GIVEREF(__pyx_int_15);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_15);
  __Pyx_INCREF(__pyx_int_176);
  __Pyx_GIVEREF(__pyx_int_176);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_176);
  __Pyx_INCREF(__pyx_int_84);
  __Pyx_GIVEREF(__pyx_int_84);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_84);
  __Pyx_INCREF(__pyx_int_187);
  __Pyx_GIVEREF(__pyx_int_187);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_187);
  __Pyx_INCREF(__pyx_int_22);
  __Pyx_GIVEREF(__pyx_int_22);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_22);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_S, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":65
 *     # S-box and Inverse S-box (S is for Substitution) ~
 *     S = [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
 *     Si =[ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]             # <<<<<<<<<<<<<<
 * 
 *     # Transformations for encryption ~
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_82);
  __Pyx_GIVEREF(__pyx_int_82);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_82);
  __Pyx_INCREF(__pyx_int_9);
  __Pyx_GIVEREF(__pyx_int_9);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_9);
  __Pyx_INCREF(__pyx_int_106);
  __Pyx_GIVEREF(__pyx_int_106);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_106);
  __Pyx_INCREF(__pyx_int_213);
  __Pyx_GIVEREF(__pyx_int_213);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_213);
  __Pyx_INCREF(__pyx_int_48);
  __Pyx_GIVEREF(__pyx_int_48);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_48);
  __Pyx_INCREF(__pyx_int_54);
  __Pyx_GIVEREF(__pyx_int_54);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_54);
  __Pyx_INCREF(__pyx_int_165);
  __Pyx_GIVEREF(__pyx_int_165);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_165);
  __Pyx_INCREF(__pyx_int_56);
  __Pyx_GIVEREF(__pyx_int_56);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_56);
  __Pyx_INCREF(__pyx_int_191);
  __Pyx_GIVEREF(__pyx_int_191);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_191);
  __Pyx_INCREF(__pyx_int_64);
  __Pyx_GIVEREF(__pyx_int_64);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_64);
  __Pyx_INCREF(__pyx_int_163);
  __Pyx_GIVEREF(__pyx_int_163);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_163);
  __Pyx_INCREF(__pyx_int_158);
  __Pyx_GIVEREF(__pyx_int_158);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_158);
  __Pyx_INCREF(__pyx_int_129);
  __Pyx_GIVEREF(__pyx_int_129);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_129);
  __Pyx_INCREF(__pyx_int_243);
  __Pyx_GIVEREF(__pyx_int_243);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_243);
  __Pyx_INCREF(__pyx_int_215);
  __Pyx_GIVEREF(__pyx_int_215);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_215);
  __Pyx_INCREF(__pyx_int_251);
  __Pyx_GIVEREF(__pyx_int_251);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_251);
  __Pyx_INCREF(__pyx_int_124);
  __Pyx_GIVEREF(__pyx_int_124);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_124);
  __Pyx_INCREF(__pyx_int_227);
  __Pyx_GIVEREF(__pyx_int_227);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_227);
  __Pyx_INCREF(__pyx_int_57);
  __Pyx_GIVEREF(__pyx_int_57);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_57);
  __Pyx_INCREF(__pyx_int_130);
  __Pyx_GIVEREF(__pyx_int_130);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_130);
  __Pyx_INCREF(__pyx_int_155);
  __Pyx_GIVEREF(__pyx_int_155);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_155);
  __Pyx_INCREF(__pyx_int_47);
  __Pyx_GIVEREF(__pyx_int_47);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_47);
  __Pyx_INCREF(__pyx_int_255);
  __Pyx_GIVEREF(__pyx_int_255);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_255);
  __Pyx_INCREF(__pyx_int_135);
  __Pyx_GIVEREF(__pyx_int_135);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_135);
  __Pyx_INCREF(__pyx_int_52);
  __Pyx_GIVEREF(__pyx_int_52);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_52);
  __Pyx_INCREF(__pyx_int_142);
  __Pyx_GIVEREF(__pyx_int_142);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_142);
  __Pyx_INCREF(__pyx_int_67);
  __Pyx_GIVEREF(__pyx_int_67);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_67);
  __Pyx_INCREF(__pyx_int_68);
  __Pyx_GIVEREF(__pyx_int_68);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_68);
  __Pyx_INCREF(__pyx_int_196);
  __Pyx_GIVEREF(__pyx_int_196);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_196);
  __Pyx_INCREF(__pyx_int_222);
  __Pyx_GIVEREF(__pyx_int_222);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_222);
  __Pyx_INCREF(__pyx_int_233);
  __Pyx_GIVEREF(__pyx_int_233);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_233);
  __Pyx_INCREF(__pyx_int_203);
  __Pyx_GIVEREF(__pyx_int_203);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_203);
  __Pyx_INCREF(__pyx_int_84);
  __Pyx_GIVEREF(__pyx_int_84);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_84);
  __Pyx_INCREF(__pyx_int_123);
  __Pyx_GIVEREF(__pyx_int_123);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_123);
  __Pyx_INCREF(__pyx_int_148);
  __Pyx_GIVEREF(__pyx_int_148);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_148);
  __Pyx_INCREF(__pyx_int_50);
  __Pyx_GIVEREF(__pyx_int_50);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_50);
  __Pyx_INCREF(__pyx_int_166);
  __Pyx_GIVEREF(__pyx_int_166);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_166);
  __Pyx_INCREF(__pyx_int_194);
  __Pyx_GIVEREF(__pyx_int_194);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_194);
  __Pyx_INCREF(__pyx_int_35);
  __Pyx_GIVEREF(__pyx_int_35);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_35);
  __Pyx_INCREF(__pyx_int_61);
  __Pyx_GIVEREF(__pyx_int_61);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_61);
  __Pyx_INCREF(__pyx_int_238);
  __Pyx_GIVEREF(__pyx_int_238);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_238);
  __Pyx_INCREF(__pyx_int_76);
  __Pyx_GIVEREF(__pyx_int_76);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_76);
  __Pyx_INCREF(__pyx_int_149);
  __Pyx_GIVEREF(__pyx_int_149);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_149);
  __Pyx_INCREF(__pyx_int_11);
  __Pyx_GIVEREF(__pyx_int_11);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_11);
  __Pyx_INCREF(__pyx_int_66);
  __Pyx_GIVEREF(__pyx_int_66);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_66);
  __Pyx_INCREF(__pyx_int_250);
  __Pyx_GIVEREF(__pyx_int_250);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_250);
  __Pyx_INCREF(__pyx_int_195);
  __Pyx_GIVEREF(__pyx_int_195);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_195);
  __Pyx_INCREF(__pyx_int_78);
  __Pyx_GIVEREF(__pyx_int_78);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_78);
  __Pyx_INCREF(__pyx_int_8);
  __Pyx_GIVEREF(__pyx_int_8);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_8);
  __Pyx_INCREF(__pyx_int_46);
  __Pyx_GIVEREF(__pyx_int_46);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_46);
  __Pyx_INCREF(__pyx_int_161);
  __Pyx_GIVEREF(__pyx_int_161);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_161);
  __Pyx_INCREF(__pyx_int_102);
  __Pyx_GIVEREF(__pyx_int_102);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_102);
  __Pyx_INCREF(__pyx_int_40);
  __Pyx_GIVEREF(__pyx_int_40);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_40);
  __Pyx_INCREF(__pyx_int_217);
  __Pyx_GIVEREF(__pyx_int_217);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_217);
  __Pyx_INCREF(__pyx_int_36);
  __Pyx_GIVEREF(__pyx_int_36);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_36);
  __Pyx_INCREF(__pyx_int_178);
  __Pyx_GIVEREF(__pyx_int_178);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_178);
  __Pyx_INCREF(__pyx_int_118);
  __Pyx_GIVEREF(__pyx_int_118);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_118);
  __Pyx_INCREF(__pyx_int_91);
  __Pyx_GIVEREF(__pyx_int_91);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_91);
  __Pyx_INCREF(__pyx_int_162);
  __Pyx_GIVEREF(__pyx_int_162);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_162);
  __Pyx_INCREF(__pyx_int_73);
  __Pyx_GIVEREF(__pyx_int_73);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_73);
  __Pyx_INCREF(__pyx_int_109);
  __Pyx_GIVEREF(__pyx_int_109);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_109);
  __Pyx_INCREF(__pyx_int_139);
  __Pyx_GIVEREF(__pyx_int_139);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_139);
  __Pyx_INCREF(__pyx_int_209);
  __Pyx_GIVEREF(__pyx_int_209);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_209);
  __Pyx_INCREF(__pyx_int_37);
  __Pyx_GIVEREF(__pyx_int_37);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_37);
  __Pyx_INCREF(__pyx_int_114);
  __Pyx_GIVEREF(__pyx_int_114);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_114);
  __Pyx_INCREF(__pyx_int_248);
  __Pyx_GIVEREF(__pyx_int_248);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_248);
  __Pyx_INCREF(__pyx_int_246);
  __Pyx_GIVEREF(__pyx_int_246);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_246);
  __Pyx_INCREF(__pyx_int_100);
  __Pyx_GIVEREF(__pyx_int_100);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_100);
  __Pyx_INCREF(__pyx_int_134);
  __Pyx_GIVEREF(__pyx_int_134);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_134);
  __Pyx_INCREF(__pyx_int_104);
  __Pyx_GIVEREF(__pyx_int_104);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_104);
  __Pyx_INCREF(__pyx_int_152);
  __Pyx_GIVEREF(__pyx_int_152);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_152);
  __Pyx_INCREF(__pyx_int_22);
  __Pyx_GIVEREF(__pyx_int_22);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_22);
  __Pyx_INCREF(__pyx_int_212);
  __Pyx_GIVEREF(__pyx_int_212);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_212);
  __Pyx_INCREF(__pyx_int_164);
  __Pyx_GIVEREF(__pyx_int_164);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_164);
  __Pyx_INCREF(__pyx_int_92);
  __Pyx_GIVEREF(__pyx_int_92);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_92);
  __Pyx_INCREF(__pyx_int_204);
  __Pyx_GIVEREF(__pyx_int_204);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_204);
  __Pyx_INCREF(__pyx_int_93);
  __Pyx_GIVEREF(__pyx_int_93);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_93);
  __Pyx_INCREF(__pyx_int_101);
  __Pyx_GIVEREF(__pyx_int_101);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_101);
  __Pyx_INCREF(__pyx_int_182);
  __Pyx_GIVEREF(__pyx_int_182);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_182);
  __Pyx_INCREF(__pyx_int_146);
  __Pyx_GIVEREF(__pyx_int_146);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_146);
  __Pyx_INCREF(__pyx_int_108);
  __Pyx_GIVEREF(__pyx_int_108);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_108);
  __Pyx_INCREF(__pyx_int_112);
  __Pyx_GIVEREF(__pyx_int_112);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_112);
  __Pyx_INCREF(__pyx_int_72);
  __Pyx_GIVEREF(__pyx_int_72);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_72);
  __Pyx_INCREF(__pyx_int_80);
  __Pyx_GIVEREF(__pyx_int_80);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_80);
  __Pyx_INCREF(__pyx_int_253);
  __Pyx_GIVEREF(__pyx_int_253);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_253);
  __Pyx_INCREF(__pyx_int_237);
  __Pyx_GIVEREF(__pyx_int_237);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_237);
  __Pyx_INCREF(__pyx_int_185);
  __Pyx_GIVEREF(__pyx_int_185);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_185);
  __Pyx_INCREF(__pyx_int_218);
  __Pyx_GIVEREF(__pyx_int_218);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_218);
  __Pyx_INCREF(__pyx_int_94);
  __Pyx_GIVEREF(__pyx_int_94);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_94);
  __Pyx_INCREF(__pyx_int_21);
  __Pyx_GIVEREF(__pyx_int_21);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_21);
  __Pyx_INCREF(__pyx_int_70);
  __Pyx_GIVEREF(__pyx_int_70);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_70);
  __Pyx_INCREF(__pyx_int_87);
  __Pyx_GIVEREF(__pyx_int_87);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_87);
  __Pyx_INCREF(__pyx_int_167);
  __Pyx_GIVEREF(__pyx_int_167);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_167);
  __Pyx_INCREF(__pyx_int_141);
  __Pyx_GIVEREF(__pyx_int_141);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_141);
  __Pyx_INCREF(__pyx_int_157);
  __Pyx_GIVEREF(__pyx_int_157);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_157);
  __Pyx_INCREF(__pyx_int_132);
  __Pyx_GIVEREF(__pyx_int_132);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_132);
  __Pyx_INCREF(__pyx_int_144);
  __Pyx_GIVEREF(__pyx_int_144);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_144);
  __Pyx_INCREF(__pyx_int_216);
  __Pyx_GIVEREF(__pyx_int_216);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_216);
  __Pyx_INCREF(__pyx_int_171);
  __Pyx_GIVEREF(__pyx_int_171);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_171);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_140);
  __Pyx_GIVEREF(__pyx_int_140);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_140);
  __Pyx_INCREF(__pyx_int_188);
  __Pyx_GIVEREF(__pyx_int_188);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_188);
  __Pyx_INCREF(__pyx_int_211);
  __Pyx_GIVEREF(__pyx_int_211);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_211);
  __Pyx_INCREF(__pyx_int_10);
  __Pyx_GIVEREF(__pyx_int_10);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_10);
  __Pyx_INCREF(__pyx_int_247);
  __Pyx_GIVEREF(__pyx_int_247);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_247);
  __Pyx_INCREF(__pyx_int_228);
  __Pyx_GIVEREF(__pyx_int_228);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_228);
  __Pyx_INCREF(__pyx_int_88);
  __Pyx_GIVEREF(__pyx_int_88);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_88);
  __Pyx_INCREF(__pyx_int_5);
  __Pyx_GIVEREF(__pyx_int_5);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_5);
  __Pyx_INCREF(__pyx_int_184);
  __Pyx_GIVEREF(__pyx_int_184);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_184);
  __Pyx_INCREF(__pyx_int_179);
  __Pyx_GIVEREF(__pyx_int_179);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_179);
  __Pyx_INCREF(__pyx_int_69);
  __Pyx_GIVEREF(__pyx_int_69);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_69);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_208);
  __Pyx_GIVEREF(__pyx_int_208);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_208);
  __Pyx_INCREF(__pyx_int_44);
  __Pyx_GIVEREF(__pyx_int_44);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_44);
  __Pyx_INCREF(__pyx_int_30);
  __Pyx_GIVEREF(__pyx_int_30);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_30);
  __Pyx_INCREF(__pyx_int_143);
  __Pyx_GIVEREF(__pyx_int_143);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_143);
  __Pyx_INCREF(__pyx_int_202);
  __Pyx_GIVEREF(__pyx_int_202);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_202);
  __Pyx_INCREF(__pyx_int_63);
  __Pyx_GIVEREF(__pyx_int_63);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_63);
  __Pyx_INCREF(__pyx_int_15);
  __Pyx_GIVEREF(__pyx_int_15);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_15);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_2);
  __Pyx_INCREF(__pyx_int_193);
  __Pyx_GIVEREF(__pyx_int_193);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_193);
  __Pyx_INCREF(__pyx_int_175);
  __Pyx_GIVEREF(__pyx_int_175);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_175);
  __Pyx_INCREF(__pyx_int_189);
  __Pyx_GIVEREF(__pyx_int_189);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_189);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_19);
  __Pyx_GIVEREF(__pyx_int_19);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_19);
  __Pyx_INCREF(__pyx_int_138);
  __Pyx_GIVEREF(__pyx_int_138);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_138);
  __Pyx_INCREF(__pyx_int_107);
  __Pyx_GIVEREF(__pyx_int_107);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_107);
  __Pyx_INCREF(__pyx_int_58);
  __Pyx_GIVEREF(__pyx_int_58);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_58);
  __Pyx_INCREF(__pyx_int_145);
  __Pyx_GIVEREF(__pyx_int_145);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_145);
  __Pyx_INCREF(__pyx_int_17);
  __Pyx_GIVEREF(__pyx_int_17);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_17);
  __Pyx_INCREF(__pyx_int_65);
  __Pyx_GIVEREF(__pyx_int_65);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_65);
  __Pyx_INCREF(__pyx_int_79);
  __Pyx_GIVEREF(__pyx_int_79);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_79);
  __Pyx_INCREF(__pyx_int_103);
  __Pyx_GIVEREF(__pyx_int_103);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_103);
  __Pyx_INCREF(__pyx_int_220);
  __Pyx_GIVEREF(__pyx_int_220);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_220);
  __Pyx_INCREF(__pyx_int_234);
  __Pyx_GIVEREF(__pyx_int_234);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_234);
  __Pyx_INCREF(__pyx_int_151);
  __Pyx_GIVEREF(__pyx_int_151);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_151);
  __Pyx_INCREF(__pyx_int_242);
  __Pyx_GIVEREF(__pyx_int_242);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_242);
  __Pyx_INCREF(__pyx_int_207);
  __Pyx_GIVEREF(__pyx_int_207);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_207);
  __Pyx_INCREF(__pyx_int_206);
  __Pyx_GIVEREF(__pyx_int_206);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_206);
  __Pyx_INCREF(__pyx_int_240);
  __Pyx_GIVEREF(__pyx_int_240);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_240);
  __Pyx_INCREF(__pyx_int_180);
  __Pyx_GIVEREF(__pyx_int_180);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_180);
  __Pyx_INCREF(__pyx_int_230);
  __Pyx_GIVEREF(__pyx_int_230);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_230);
  __Pyx_INCREF(__pyx_int_115);
  __Pyx_GIVEREF(__pyx_int_115);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_115);
  __Pyx_INCREF(__pyx_int_150);
  __Pyx_GIVEREF(__pyx_int_150);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_150);
  __Pyx_INCREF(__pyx_int_172);
  __Pyx_GIVEREF(__pyx_int_172);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_172);
  __Pyx_INCREF(__pyx_int_116);
  __Pyx_GIVEREF(__pyx_int_116);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_116);
  __Pyx_INCREF(__pyx_int_34);
  __Pyx_GIVEREF(__pyx_int_34);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_34);
  __Pyx_INCREF(__pyx_int_231);
  __Pyx_GIVEREF(__pyx_int_231);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_231);
  __Pyx_INCREF(__pyx_int_173);
  __Pyx_GIVEREF(__pyx_int_173);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_173);
  __Pyx_INCREF(__pyx_int_53);
  __Pyx_GIVEREF(__pyx_int_53);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_53);
  __Pyx_INCREF(__pyx_int_133);
  __Pyx_GIVEREF(__pyx_int_133);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_133);
  __Pyx_INCREF(__pyx_int_226);
  __Pyx_GIVEREF(__pyx_int_226);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_226);
  __Pyx_INCREF(__pyx_int_249);
  __Pyx_GIVEREF(__pyx_int_249);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_249);
  __Pyx_INCREF(__pyx_int_55);
  __Pyx_GIVEREF(__pyx_int_55);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_55);
  __Pyx_INCREF(__pyx_int_232);
  __Pyx_GIVEREF(__pyx_int_232);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_232);
  __Pyx_INCREF(__pyx_int_28);
  __Pyx_GIVEREF(__pyx_int_28);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_28);
  __Pyx_INCREF(__pyx_int_117);
  __Pyx_GIVEREF(__pyx_int_117);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_117);
  __Pyx_INCREF(__pyx_int_223);
  __Pyx_GIVEREF(__pyx_int_223);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_223);
  __Pyx_INCREF(__pyx_int_110);
  __Pyx_GIVEREF(__pyx_int_110);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_110);
  __Pyx_INCREF(__pyx_int_71);
  __Pyx_GIVEREF(__pyx_int_71);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_71);
  __Pyx_INCREF(__pyx_int_241);
  __Pyx_GIVEREF(__pyx_int_241);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_241);
  __Pyx_INCREF(__pyx_int_26);
  __Pyx_GIVEREF(__pyx_int_26);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_26);
  __Pyx_INCREF(__pyx_int_113);
  __Pyx_GIVEREF(__pyx_int_113);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_113);
  __Pyx_INCREF(__pyx_int_29);
  __Pyx_GIVEREF(__pyx_int_29);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_29);
  __Pyx_INCREF(__pyx_int_41);
  __Pyx_GIVEREF(__pyx_int_41);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_41);
  __Pyx_INCREF(__pyx_int_197);
  __Pyx_GIVEREF(__pyx_int_197);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_197);
  __Pyx_INCREF(__pyx_int_137);
  __Pyx_GIVEREF(__pyx_int_137);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_137);
  __Pyx_INCREF(__pyx_int_111);
  __Pyx_GIVEREF(__pyx_int_111);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_111);
  __Pyx_INCREF(__pyx_int_183);
  __Pyx_GIVEREF(__pyx_int_183);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_183);
  __Pyx_INCREF(__pyx_int_98);
  __Pyx_GIVEREF(__pyx_int_98);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_98);
  __Pyx_INCREF(__pyx_int_14);
  __Pyx_GIVEREF(__pyx_int_14);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_14);
  __Pyx_INCREF(__pyx_int_170);
  __Pyx_GIVEREF(__pyx_int_170);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_170);
  __Pyx_INCREF(__pyx_int_24);
  __Pyx_GIVEREF(__pyx_int_24);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_24);
  __Pyx_INCREF(__pyx_int_190);
  __Pyx_GIVEREF(__pyx_int_190);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_190);
  __Pyx_INCREF(__pyx_int_27);
  __Pyx_GIVEREF(__pyx_int_27);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_27);
  __Pyx_INCREF(__pyx_int_252);
  __Pyx_GIVEREF(__pyx_int_252);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_252);
  __Pyx_INCREF(__pyx_int_86);
  __Pyx_GIVEREF(__pyx_int_86);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_86);
  __Pyx_INCREF(__pyx_int_62);
  __Pyx_GIVEREF(__pyx_int_62);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_62);
  __Pyx_INCREF(__pyx_int_75);
  __Pyx_GIVEREF(__pyx_int_75);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_75);
  __Pyx_INCREF(__pyx_int_198);
  __Pyx_GIVEREF(__pyx_int_198);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_198);
  __Pyx_INCREF(__pyx_int_210);
  __Pyx_GIVEREF(__pyx_int_210);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_210);
  __Pyx_INCREF(__pyx_int_121);
  __Pyx_GIVEREF(__pyx_int_121);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_121);
  __Pyx_INCREF(__pyx_int_32);
  __Pyx_GIVEREF(__pyx_int_32);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_32);
  __Pyx_INCREF(__pyx_int_154);
  __Pyx_GIVEREF(__pyx_int_154);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_154);
  __Pyx_INCREF(__pyx_int_219);
  __Pyx_GIVEREF(__pyx_int_219);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_219);
  __Pyx_INCREF(__pyx_int_192);
  __Pyx_GIVEREF(__pyx_int_192);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_192);
  __Pyx_INCREF(__pyx_int_254);
  __Pyx_GIVEREF(__pyx_int_254);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_254);
  __Pyx_INCREF(__pyx_int_120);
  __Pyx_GIVEREF(__pyx_int_120);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_120);
  __Pyx_INCREF(__pyx_int_205);
  __Pyx_GIVEREF(__pyx_int_205);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_205);
  __Pyx_INCREF(__pyx_int_90);
  __Pyx_GIVEREF(__pyx_int_90);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_90);
  __Pyx_INCREF(__pyx_int_244);
  __Pyx_GIVEREF(__pyx_int_244);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_244);
  __Pyx_INCREF(__pyx_int_31);
  __Pyx_GIVEREF(__pyx_int_31);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_31);
  __Pyx_INCREF(__pyx_int_221);
  __Pyx_GIVEREF(__pyx_int_221);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_221);
  __Pyx_INCREF(__pyx_int_168);
  __Pyx_GIVEREF(__pyx_int_168);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_168);
  __Pyx_INCREF(__pyx_int_51);
  __Pyx_GIVEREF(__pyx_int_51);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_51);
  __Pyx_INCREF(__pyx_int_136);
  __Pyx_GIVEREF(__pyx_int_136);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_136);
  __Pyx_INCREF(__pyx_int_7);
  __Pyx_GIVEREF(__pyx_int_7);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_7);
  __Pyx_INCREF(__pyx_int_199);
  __Pyx_GIVEREF(__pyx_int_199);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_199);
  __Pyx_INCREF(__pyx_int_49);
  __Pyx_GIVEREF(__pyx_int_49);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_49);
  __Pyx_INCREF(__pyx_int_177);
  __Pyx_GIVEREF(__pyx_int_177);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_177);
  __Pyx_INCREF(__pyx_int_18);
  __Pyx_GIVEREF(__pyx_int_18);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_18);
  __Pyx_INCREF(__pyx_int_16);
  __Pyx_GIVEREF(__pyx_int_16);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_16);
  __Pyx_INCREF(__pyx_int_89);
  __Pyx_GIVEREF(__pyx_int_89);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_89);
  __Pyx_INCREF(__pyx_int_39);
  __Pyx_GIVEREF(__pyx_int_39);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_39);
  __Pyx_INCREF(__pyx_int_128);
  __Pyx_GIVEREF(__pyx_int_128);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_128);
  __Pyx_INCREF(__pyx_int_236);
  __Pyx_GIVEREF(__pyx_int_236);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_236);
  __Pyx_INCREF(__pyx_int_95);
  __Pyx_GIVEREF(__pyx_int_95);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_95);
  __Pyx_INCREF(__pyx_int_96);
  __Pyx_GIVEREF(__pyx_int_96);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_96);
  __Pyx_INCREF(__pyx_int_81);
  __Pyx_GIVEREF(__pyx_int_81);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_81);
  __Pyx_INCREF(__pyx_int_127);
  __Pyx_GIVEREF(__pyx_int_127);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_127);
  __Pyx_INCREF(__pyx_int_169);
  __Pyx_GIVEREF(__pyx_int_169);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_169);
  __Pyx_INCREF(__pyx_int_25);
  __Pyx_GIVEREF(__pyx_int_25);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_25);
  __Pyx_INCREF(__pyx_int_181);
  __Pyx_GIVEREF(__pyx_int_181);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_181);
  __Pyx_INCREF(__pyx_int_74);
  __Pyx_GIVEREF(__pyx_int_74);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_74);
  __Pyx_INCREF(__pyx_int_13);
  __Pyx_GIVEREF(__pyx_int_13);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_13);
  __Pyx_INCREF(__pyx_int_45);
  __Pyx_GIVEREF(__pyx_int_45);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_45);
  __Pyx_INCREF(__pyx_int_229);
  __Pyx_GIVEREF(__pyx_int_229);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_229);
  __Pyx_INCREF(__pyx_int_122);
  __Pyx_GIVEREF(__pyx_int_122);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_122);
  __Pyx_INCREF(__pyx_int_159);
  __Pyx_GIVEREF(__pyx_int_159);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_159);
  __Pyx_INCREF(__pyx_int_147);
  __Pyx_GIVEREF(__pyx_int_147);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_147);
  __Pyx_INCREF(__pyx_int_201);
  __Pyx_GIVEREF(__pyx_int_201);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_201);
  __Pyx_INCREF(__pyx_int_156);
  __Pyx_GIVEREF(__pyx_int_156);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_156);
  __Pyx_INCREF(__pyx_int_239);
  __Pyx_GIVEREF(__pyx_int_239);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_239);
  __Pyx_INCREF(__pyx_int_160);
  __Pyx_GIVEREF(__pyx_int_160);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_160);
  __Pyx_INCREF(__pyx_int_224);
  __Pyx_GIVEREF(__pyx_int_224);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_224);
  __Pyx_INCREF(__pyx_int_59);
  __Pyx_GIVEREF(__pyx_int_59);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_59);
  __Pyx_INCREF(__pyx_int_77);
  __Pyx_GIVEREF(__pyx_int_77);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_77);
  __Pyx_INCREF(__pyx_int_174);
  __Pyx_GIVEREF(__pyx_int_174);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_174);
  __Pyx_INCREF(__pyx_int_42);
  __Pyx_GIVEREF(__pyx_int_42);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_42);
  __Pyx_INCREF(__pyx_int_245);
  __Pyx_GIVEREF(__pyx_int_245);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_245);
  __Pyx_INCREF(__pyx_int_176);
  __Pyx_GIVEREF(__pyx_int_176);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_176);
  __Pyx_INCREF(__pyx_int_200);
  __Pyx_GIVEREF(__pyx_int_200);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_200);
  __Pyx_INCREF(__pyx_int_235);
  __Pyx_GIVEREF(__pyx_int_235);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_235);
  __Pyx_INCREF(__pyx_int_187);
  __Pyx_GIVEREF(__pyx_int_187);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_187);
  __Pyx_INCREF(__pyx_int_60);
  __Pyx_GIVEREF(__pyx_int_60);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_60);
  __Pyx_INCREF(__pyx_int_131);
  __Pyx_GIVEREF(__pyx_int_131);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_131);
  __Pyx_INCREF(__pyx_int_83);
  __Pyx_GIVEREF(__pyx_int_83);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_83);
  __Pyx_INCREF(__pyx_int_153);
  __Pyx_GIVEREF(__pyx_int_153);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_153);
  __Pyx_INCREF(__pyx_int_97);
  __Pyx_GIVEREF(__pyx_int_97);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_97);
  __Pyx_INCREF(__pyx_int_23);
  __Pyx_GIVEREF(__pyx_int_23);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_23);
  __Pyx_INCREF(__pyx_int_43);
  __Pyx_GIVEREF(__pyx_int_43);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_43);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_4);
  __Pyx_INCREF(__pyx_int_126);
  __Pyx_GIVEREF(__pyx_int_126);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_126);
  __Pyx_INCREF(__pyx_int_186);
  __Pyx_GIVEREF(__pyx_int_186);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_186);
  __Pyx_INCREF(__pyx_int_119);
  __Pyx_GIVEREF(__pyx_int_119);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_119);
  __Pyx_INCREF(__pyx_int_214);
  __Pyx_GIVEREF(__pyx_int_214);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_214);
  __Pyx_INCREF(__pyx_int_38);
  __Pyx_GIVEREF(__pyx_int_38);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_38);
  __Pyx_INCREF(__pyx_int_225);
  __Pyx_GIVEREF(__pyx_int_225);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_225);
  __Pyx_INCREF(__pyx_int_105);
  __Pyx_GIVEREF(__pyx_int_105);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_105);
  __Pyx_INCREF(__pyx_int_20);
  __Pyx_GIVEREF(__pyx_int_20);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_20);
  __Pyx_INCREF(__pyx_int_99);
  __Pyx_GIVEREF(__pyx_int_99);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_99);
  __Pyx_INCREF(__pyx_int_85);
  __Pyx_GIVEREF(__pyx_int_85);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_85);
  __Pyx_INCREF(__pyx_int_33);
  __Pyx_GIVEREF(__pyx_int_33);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_33);
  __Pyx_INCREF(__pyx_int_12);
  __Pyx_GIVEREF(__pyx_int_12);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_12);
  __Pyx_INCREF(__pyx_int_125);
  __Pyx_GIVEREF(__pyx_int_125);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_125);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_Si, __pyx_t_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":68
 * 
 *     # Transformations for encryption ~
 *     T1 = [ 0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a ]             # <<<<<<<<<<<<<<
 *     T2 = [ 0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616 ]
 *     T3 = [ 0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16 ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_3328402341);
  __Pyx_GIVEREF(__pyx_int_3328402341);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_3328402341);
  __Pyx_INCREF(__pyx_int_4168907908);
  __Pyx_GIVEREF(__pyx_int_4168907908);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_4168907908);
  __Pyx_INCREF(__pyx_int_4000806809);
  __Pyx_GIVEREF(__pyx_int_4000806809);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_4000806809);
  __Pyx_INCREF(__pyx_int_4135287693);
  __Pyx_GIVEREF(__pyx_int_4135287693);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_4135287693);
  __Pyx_INCREF(__pyx_int_4294111757);
  __Pyx_GIVEREF(__pyx_int_4294111757);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_4294111757);
  __Pyx_INCREF(__pyx_int_3597364157);
  __Pyx_GIVEREF(__pyx_int_3597364157);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_3597364157);
  __Pyx_INCREF(__pyx_int_3731845041);
  __Pyx_GIVEREF(__pyx_int_3731845041);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_3731845041);
  __Pyx_INCREF(__pyx_int_2445657428);
  __Pyx_GIVEREF(__pyx_int_2445657428);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_2445657428);
  __Pyx_INCREF(__pyx_int_1613770832);
  __Pyx_GIVEREF(__pyx_int_1613770832);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1613770832);
  __Pyx_INCREF(__pyx_int_33620227);
  __Pyx_GIVEREF(__pyx_int_33620227);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_33620227);
  __Pyx_INCREF(__pyx_int_3462883241);
  __Pyx_GIVEREF(__pyx_int_3462883241);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_3462883241);
  __Pyx_INCREF(__pyx_int_1445669757);
  __Pyx_GIVEREF(__pyx_int_1445669757);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_1445669757);
  __Pyx_INCREF(__pyx_int_3892248089);
  __Pyx_GIVEREF(__pyx_int_3892248089);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_3892248089);
  __Pyx_INCREF(__pyx_int_3050821474);
  __Pyx_GIVEREF(__pyx_int_3050821474);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3050821474);
  __Pyx_INCREF(__pyx_int_1303096294);
  __Pyx_GIVEREF(__pyx_int_1303096294);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_1303096294);
  __Pyx_INCREF(__pyx_int_3967186586);
  __Pyx_GIVEREF(__pyx_int_3967186586);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_3967186586);
  __Pyx_INCREF(__pyx_int_2412431941);
  __Pyx_GIVEREF(__pyx_int_2412431941);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_2412431941);
  __Pyx_INCREF(__pyx_int_528646813);
  __Pyx_GIVEREF(__pyx_int_528646813);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_528646813);
  __Pyx_INCREF(__pyx_int_2311702848);
  __Pyx_GIVEREF(__pyx_int_2311702848);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_2311702848);
  __Pyx_INCREF(__pyx_int_4202528135);
  __Pyx_GIVEREF(__pyx_int_4202528135);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_4202528135);
  __Pyx_INCREF(__pyx_int_4026202645);
  __Pyx_GIVEREF(__pyx_int_4026202645);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_4026202645);
  __Pyx_INCREF(__pyx_int_2992200171);
  __Pyx_GIVEREF(__pyx_int_2992200171);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_2992200171);
  __Pyx_INCREF(__pyx_int_2387036105);
  __Pyx_GIVEREF(__pyx_int_2387036105);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2387036105);
  __Pyx_INCREF(__pyx_int_4226871307);
  __Pyx_GIVEREF(__pyx_int_4226871307);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_4226871307);
  __Pyx_INCREF(__pyx_int_1101901292);
  __Pyx_GIVEREF(__pyx_int_1101901292);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_1101901292);
  __Pyx_INCREF(__pyx_int_3017069671);
  __Pyx_GIVEREF(__pyx_int_3017069671);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3017069671);
  __Pyx_INCREF(__pyx_int_1604494077);
  __Pyx_GIVEREF(__pyx_int_1604494077);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_1604494077);
  __Pyx_INCREF(__pyx_int_1169141738);
  __Pyx_GIVEREF(__pyx_int_1169141738);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_1169141738);
  __Pyx_INCREF(__pyx_int_597466303);
  __Pyx_GIVEREF(__pyx_int_597466303);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_597466303);
  __Pyx_INCREF(__pyx_int_1403299063);
  __Pyx_GIVEREF(__pyx_int_1403299063);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_1403299063);
  __Pyx_INCREF(__pyx_int_3832705686);
  __Pyx_GIVEREF(__pyx_int_3832705686);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_3832705686);
  __Pyx_INCREF(__pyx_int_2613100635);
  __Pyx_GIVEREF(__pyx_int_2613100635);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_2613100635);
  __Pyx_INCREF(__pyx_int_1974974402);
  __Pyx_GIVEREF(__pyx_int_1974974402);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_1974974402);
  __Pyx_INCREF(__pyx_int_3791519004);
  __Pyx_GIVEREF(__pyx_int_3791519004);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_3791519004);
  __Pyx_INCREF(__pyx_int_1033081774);
  __Pyx_GIVEREF(__pyx_int_1033081774);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_1033081774);
  __Pyx_INCREF(__pyx_int_1277568618);
  __Pyx_GIVEREF(__pyx_int_1277568618);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_1277568618);
  __Pyx_INCREF(__pyx_int_1815492186);
  __Pyx_GIVEREF(__pyx_int_1815492186);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_1815492186);
  __Pyx_INCREF(__pyx_int_2118074177);
  __Pyx_GIVEREF(__pyx_int_2118074177);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_2118074177);
  __Pyx_INCREF(__pyx_int_4126668546);
  __Pyx_GIVEREF(__pyx_int_4126668546);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_4126668546);
  __Pyx_INCREF(__pyx_int_2211236943);
  __Pyx_GIVEREF(__pyx_int_2211236943);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_2211236943);
  __Pyx_INCREF(__pyx_int_1748251740);
  __Pyx_GIVEREF(__pyx_int_1748251740);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_1748251740);
  __Pyx_INCREF(__pyx_int_1369810420);
  __Pyx_GIVEREF(__pyx_int_1369810420);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_1369810420);
  __Pyx_INCREF(__pyx_int_3521504564);
  __Pyx_GIVEREF(__pyx_int_3521504564);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_3521504564);
  __Pyx_INCREF(__pyx_int_4193382664);
  __Pyx_GIVEREF(__pyx_int_4193382664);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_4193382664);
  __Pyx_INCREF(__pyx_int_3799085459);
  __Pyx_GIVEREF(__pyx_int_3799085459);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_3799085459);
  __Pyx_INCREF(__pyx_int_2883115123);
  __Pyx_GIVEREF(__pyx_int_2883115123);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_2883115123);
  __Pyx_INCREF(__pyx_int_1647391059);
  __Pyx_GIVEREF(__pyx_int_1647391059);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_1647391059);
  __Pyx_INCREF(__pyx_int_706024767);
  __Pyx_GIVEREF(__pyx_int_706024767);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_706024767);
  __Pyx_INCREF(__pyx_int_134480908);
  __Pyx_GIVEREF(__pyx_int_134480908);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_134480908);
  __Pyx_INCREF(__pyx_int_2512897874);
  __Pyx_GIVEREF(__pyx_int_2512897874);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_2512897874);
  __Pyx_INCREF(__pyx_int_1176707941);
  __Pyx_GIVEREF(__pyx_int_1176707941);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_1176707941);
  __Pyx_INCREF(__pyx_int_2646852446);
  __Pyx_GIVEREF(__pyx_int_2646852446);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_2646852446);
  __Pyx_INCREF(__pyx_int_806885416);
  __Pyx_GIVEREF(__pyx_int_806885416);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_806885416);
  __Pyx_INCREF(__pyx_int_932615841);
  __Pyx_GIVEREF(__pyx_int_932615841);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_932615841);
  __Pyx_INCREF(__pyx_int_168101135);
  __Pyx_GIVEREF(__pyx_int_168101135);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_168101135);
  __Pyx_INCREF(__pyx_int_798661301);
  __Pyx_GIVEREF(__pyx_int_798661301);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_798661301);
  __Pyx_INCREF(__pyx_int_235341577);
  __Pyx_GIVEREF(__pyx_int_235341577);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_235341577);
  __Pyx_INCREF(__pyx_int_605164086);
  __Pyx_GIVEREF(__pyx_int_605164086);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_605164086);
  __Pyx_INCREF(__pyx_int_461406363);
  __Pyx_GIVEREF(__pyx_int_461406363);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_461406363);
  __Pyx_INCREF(__pyx_int_3756188221);
  __Pyx_GIVEREF(__pyx_int_3756188221);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_3756188221);
  __Pyx_INCREF(__pyx_int_3454790438);
  __Pyx_GIVEREF(__pyx_int_3454790438);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_3454790438);
  __Pyx_INCREF(__pyx_int_1311188841);
  __Pyx_GIVEREF(__pyx_int_1311188841);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_1311188841);
  __Pyx_INCREF(__pyx_int_2142417613);
  __Pyx_GIVEREF(__pyx_int_2142417613);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_2142417613);
  __Pyx_INCREF(__pyx_int_3933566367);
  __Pyx_GIVEREF(__pyx_int_3933566367);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_3933566367);
  __Pyx_INCREF(__pyx_int_302582043);
  __Pyx_GIVEREF(__pyx_int_302582043);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_302582043);
  __Pyx_INCREF(__pyx_int_495158174);
  __Pyx_GIVEREF(__pyx_int_495158174);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_495158174);
  __Pyx_INCREF(__pyx_int_1479289972);
  __Pyx_GIVEREF(__pyx_int_1479289972);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_1479289972);
  __Pyx_INCREF(__pyx_int_874125870);
  __Pyx_GIVEREF(__pyx_int_874125870);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_874125870);
  __Pyx_INCREF(__pyx_int_907746093);
  __Pyx_GIVEREF(__pyx_int_907746093);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_907746093);
  __Pyx_INCREF(__pyx_int_3698224818);
  __Pyx_GIVEREF(__pyx_int_3698224818);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_3698224818);
  __Pyx_INCREF(__pyx_int_3025820398);
  __Pyx_GIVEREF(__pyx_int_3025820398);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_3025820398);
  __Pyx_INCREF(__pyx_int_1537253627);
  __Pyx_GIVEREF(__pyx_int_1537253627);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_1537253627);
  __Pyx_INCREF(__pyx_int_2756858614);
  __Pyx_GIVEREF(__pyx_int_2756858614);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_2756858614);
  __Pyx_INCREF(__pyx_int_1983593293);
  __Pyx_GIVEREF(__pyx_int_1983593293);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_1983593293);
  __Pyx_INCREF(__pyx_int_3084310113);
  __Pyx_GIVEREF(__pyx_int_3084310113);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3084310113);
  __Pyx_INCREF(__pyx_int_2108928974);
  __Pyx_GIVEREF(__pyx_int_2108928974);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_2108928974);
  __Pyx_INCREF(__pyx_int_1378429307);
  __Pyx_GIVEREF(__pyx_int_1378429307);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_1378429307);
  __Pyx_INCREF(__pyx_int_3722699582);
  __Pyx_GIVEREF(__pyx_int_3722699582);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_3722699582);
  __Pyx_INCREF(__pyx_int_1580150641);
  __Pyx_GIVEREF(__pyx_int_1580150641);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_1580150641);
  __Pyx_INCREF(__pyx_int_327451799);
  __Pyx_GIVEREF(__pyx_int_327451799);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_327451799);
  __Pyx_INCREF(__pyx_int_2790478837);
  __Pyx_GIVEREF(__pyx_int_2790478837);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_2790478837);
  __Pyx_INCREF(__pyx_int_3117535592);
  __Pyx_GIVEREF(__pyx_int_3117535592);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_3117535592);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_3253595436);
  __Pyx_GIVEREF(__pyx_int_3253595436);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_3253595436);
  __Pyx_INCREF(__pyx_int_1075847264);
  __Pyx_GIVEREF(__pyx_int_1075847264);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_1075847264);
  __Pyx_INCREF(__pyx_int_3825007647);
  __Pyx_GIVEREF(__pyx_int_3825007647);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_3825007647);
  __Pyx_INCREF(__pyx_int_2041688520);
  __Pyx_GIVEREF(__pyx_int_2041688520);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_2041688520);
  __Pyx_INCREF(__pyx_int_3059440621);
  __Pyx_GIVEREF(__pyx_int_3059440621);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_3059440621);
  __Pyx_INCREF(__pyx_int_3563743934);
  __Pyx_GIVEREF(__pyx_int_3563743934);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_3563743934);
  __Pyx_INCREF(__pyx_int_2378943302);
  __Pyx_GIVEREF(__pyx_int_2378943302);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_2378943302);
  __Pyx_INCREF(__pyx_int_1740553945);
  __Pyx_GIVEREF(__pyx_int_1740553945);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_1740553945);
  __Pyx_INCREF(__pyx_int_1916352843);
  __Pyx_GIVEREF(__pyx_int_1916352843);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_1916352843);
  __Pyx_INCREF(__pyx_int_2487896798);
  __Pyx_GIVEREF(__pyx_int_2487896798);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_2487896798);
  __Pyx_INCREF(__pyx_int_2555137236);
  __Pyx_GIVEREF(__pyx_int_2555137236);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_2555137236);
  __Pyx_INCREF(__pyx_int_2958579944);
  __Pyx_GIVEREF(__pyx_int_2958579944);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_2958579944);
  __Pyx_INCREF(__pyx_int_2244988746);
  __Pyx_GIVEREF(__pyx_int_2244988746);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_2244988746);
  __Pyx_INCREF(__pyx_int_3151024235);
  __Pyx_GIVEREF(__pyx_int_3151024235);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_3151024235);
  __Pyx_INCREF(__pyx_int_3320835882);
  __Pyx_GIVEREF(__pyx_int_3320835882);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_3320835882);
  __Pyx_INCREF(__pyx_int_1336584933);
  __Pyx_GIVEREF(__pyx_int_1336584933);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_1336584933);
  __Pyx_INCREF(__pyx_int_3992714006);
  __Pyx_GIVEREF(__pyx_int_3992714006);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_3992714006);
  __Pyx_INCREF(__pyx_int_2252555205);
  __Pyx_GIVEREF(__pyx_int_2252555205);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_2252555205);
  __Pyx_INCREF(__pyx_int_2588757463);
  __Pyx_GIVEREF(__pyx_int_2588757463);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_2588757463);
  __Pyx_INCREF(__pyx_int_1714631509);
  __Pyx_GIVEREF(__pyx_int_1714631509);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_1714631509);
  __Pyx_INCREF(__pyx_int_293963156);
  __Pyx_GIVEREF(__pyx_int_293963156);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_293963156);
  __Pyx_INCREF(__pyx_int_2319795663);
  __Pyx_GIVEREF(__pyx_int_2319795663);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_2319795663);
  __Pyx_INCREF(__pyx_int_3925473552);
  __Pyx_GIVEREF(__pyx_int_3925473552);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_3925473552);
  __Pyx_INCREF(__pyx_int_67240454);
  __Pyx_GIVEREF(__pyx_int_67240454);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_67240454);
  __Pyx_INCREF(__pyx_int_4269768577);
  __Pyx_GIVEREF(__pyx_int_4269768577);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_4269768577);
  __Pyx_INCREF(__pyx_int_2689618160);
  __Pyx_GIVEREF(__pyx_int_2689618160);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_2689618160);
  __Pyx_INCREF(__pyx_int_2017213508);
  __Pyx_GIVEREF(__pyx_int_2017213508);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_2017213508);
  __Pyx_INCREF(__pyx_int_631218106);
  __Pyx_GIVEREF(__pyx_int_631218106);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_631218106);
  __Pyx_INCREF(__pyx_int_1269344483);
  __Pyx_GIVEREF(__pyx_int_1269344483);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_1269344483);
  __Pyx_INCREF(__pyx_int_2723238387);
  __Pyx_GIVEREF(__pyx_int_2723238387);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_2723238387);
  __Pyx_INCREF(__pyx_int_1571005438);
  __Pyx_GIVEREF(__pyx_int_1571005438);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_1571005438);
  __Pyx_INCREF(__pyx_int_2151694528);
  __Pyx_GIVEREF(__pyx_int_2151694528);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_2151694528);
  __Pyx_INCREF(__pyx_int_93294474);
  __Pyx_GIVEREF(__pyx_int_93294474);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_93294474);
  __Pyx_INCREF(__pyx_int_1066570413);
  __Pyx_GIVEREF(__pyx_int_1066570413);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_1066570413);
  __Pyx_INCREF(__pyx_int_563977660);
  __Pyx_GIVEREF(__pyx_int_563977660);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_563977660);
  __Pyx_INCREF(__pyx_int_1882732616);
  __Pyx_GIVEREF(__pyx_int_1882732616);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_1882732616);
  __Pyx_INCREF(__pyx_int_4059428100);
  __Pyx_GIVEREF(__pyx_int_4059428100);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_4059428100);
  __Pyx_INCREF(__pyx_int_1673313503);
  __Pyx_GIVEREF(__pyx_int_1673313503);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_1673313503);
  __Pyx_INCREF(__pyx_int_2008463041);
  __Pyx_GIVEREF(__pyx_int_2008463041);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_2008463041);
  __Pyx_INCREF(__pyx_int_2950355573);
  __Pyx_GIVEREF(__pyx_int_2950355573);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_2950355573);
  __Pyx_INCREF(__pyx_int_1109467491);
  __Pyx_GIVEREF(__pyx_int_1109467491);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_1109467491);
  __Pyx_INCREF(__pyx_int_537923632);
  __Pyx_GIVEREF(__pyx_int_537923632);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_537923632);
  __Pyx_INCREF(__pyx_int_3858759450);
  __Pyx_GIVEREF(__pyx_int_3858759450);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_3858759450);
  __Pyx_INCREF(__pyx_int_4260623118);
  __Pyx_GIVEREF(__pyx_int_4260623118);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_4260623118);
  __Pyx_INCREF(__pyx_int_3218264685);
  __Pyx_GIVEREF(__pyx_int_3218264685);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_3218264685);
  __Pyx_INCREF(__pyx_int_2177748300);
  __Pyx_GIVEREF(__pyx_int_2177748300);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_2177748300);
  __Pyx_INCREF(__pyx_int_403442708);
  __Pyx_GIVEREF(__pyx_int_403442708);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_403442708);
  __Pyx_INCREF(__pyx_int_638784309);
  __Pyx_GIVEREF(__pyx_int_638784309);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_638784309);
  __Pyx_INCREF(__pyx_int_3287084079);
  __Pyx_GIVEREF(__pyx_int_3287084079);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_3287084079);
  __Pyx_INCREF(__pyx_int_3193921505);
  __Pyx_GIVEREF(__pyx_int_3193921505);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_3193921505);
  __Pyx_INCREF(__pyx_int_899127202);
  __Pyx_GIVEREF(__pyx_int_899127202);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_899127202);
  __Pyx_INCREF(__pyx_int_2286175436);
  __Pyx_GIVEREF(__pyx_int_2286175436);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_2286175436);
  __Pyx_INCREF(__pyx_int_773265209);
  __Pyx_GIVEREF(__pyx_int_773265209);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_773265209);
  __Pyx_INCREF(__pyx_int_2479146071);
  __Pyx_GIVEREF(__pyx_int_2479146071);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_2479146071);
  __Pyx_INCREF(__pyx_int_1437050866);
  __Pyx_GIVEREF(__pyx_int_1437050866);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_1437050866);
  __Pyx_INCREF(__pyx_int_4236148354);
  __Pyx_GIVEREF(__pyx_int_4236148354);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_4236148354);
  __Pyx_INCREF(__pyx_int_2050833735);
  __Pyx_GIVEREF(__pyx_int_2050833735);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_2050833735);
  __Pyx_INCREF(__pyx_int_3362022572);
  __Pyx_GIVEREF(__pyx_int_3362022572);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_3362022572);
  __Pyx_INCREF(__pyx_int_3126681063);
  __Pyx_GIVEREF(__pyx_int_3126681063);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_3126681063);
  __Pyx_INCREF(__pyx_int_840505643);
  __Pyx_GIVEREF(__pyx_int_840505643);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_840505643);
  __Pyx_INCREF(__pyx_int_3866325909);
  __Pyx_GIVEREF(__pyx_int_3866325909);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_3866325909);
  __Pyx_INCREF(__pyx_int_3227541664);
  __Pyx_GIVEREF(__pyx_int_3227541664);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_3227541664);
  __Pyx_INCREF(__pyx_int_427917720);
  __Pyx_GIVEREF(__pyx_int_427917720);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_427917720);
  __Pyx_INCREF(__pyx_int_2655997905);
  __Pyx_GIVEREF(__pyx_int_2655997905);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_2655997905);
  __Pyx_INCREF(__pyx_int_2749160575);
  __Pyx_GIVEREF(__pyx_int_2749160575);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_2749160575);
  __Pyx_INCREF(__pyx_int_1143087718);
  __Pyx_GIVEREF(__pyx_int_1143087718);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1143087718);
  __Pyx_INCREF(__pyx_int_1412049534);
  __Pyx_GIVEREF(__pyx_int_1412049534);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_1412049534);
  __Pyx_INCREF(__pyx_int_999329963);
  __Pyx_GIVEREF(__pyx_int_999329963);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_999329963);
  __Pyx_INCREF(__pyx_int_193497219);
  __Pyx_GIVEREF(__pyx_int_193497219);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_193497219);
  __Pyx_INCREF(__pyx_int_2353415882);
  __Pyx_GIVEREF(__pyx_int_2353415882);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_2353415882);
  __Pyx_INCREF(__pyx_int_3354324521);
  __Pyx_GIVEREF(__pyx_int_3354324521);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_3354324521);
  __Pyx_INCREF(__pyx_int_1807268051);
  __Pyx_GIVEREF(__pyx_int_1807268051);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_1807268051);
  __Pyx_INCREF(__pyx_int_672404540);
  __Pyx_GIVEREF(__pyx_int_672404540);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_672404540);
  __Pyx_INCREF(__pyx_int_2816401017);
  __Pyx_GIVEREF(__pyx_int_2816401017);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_2816401017);
  __Pyx_INCREF(__pyx_int_3160301282);
  __Pyx_GIVEREF(__pyx_int_3160301282);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_3160301282);
  __Pyx_INCREF(__pyx_int_369822493);
  __Pyx_GIVEREF(__pyx_int_369822493);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_369822493);
  __Pyx_INCREF(__pyx_int_2916866934);
  __Pyx_GIVEREF(__pyx_int_2916866934);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_2916866934);
  __Pyx_INCREF(__pyx_int_3688947771);
  __Pyx_GIVEREF(__pyx_int_3688947771);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_3688947771);
  __Pyx_INCREF(__pyx_int_1681011286);
  __Pyx_GIVEREF(__pyx_int_1681011286);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_1681011286);
  __Pyx_INCREF(__pyx_int_1949973070);
  __Pyx_GIVEREF(__pyx_int_1949973070);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_1949973070);
  __Pyx_INCREF(__pyx_int_336202270);
  __Pyx_GIVEREF(__pyx_int_336202270);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_336202270);
  __Pyx_INCREF(__pyx_int_2454276571);
  __Pyx_GIVEREF(__pyx_int_2454276571);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_2454276571);
  __Pyx_INCREF(__pyx_int_201721354);
  __Pyx_GIVEREF(__pyx_int_201721354);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_201721354);
  __Pyx_INCREF(__pyx_int_1210328172);
  __Pyx_GIVEREF(__pyx_int_1210328172);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_1210328172);
  __Pyx_INCREF(__pyx_int_3093060836);
  __Pyx_GIVEREF(__pyx_int_3093060836);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_3093060836);
  __Pyx_INCREF(__pyx_int_2680341085);
  __Pyx_GIVEREF(__pyx_int_2680341085);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_2680341085);
  __Pyx_INCREF(__pyx_int_3184776046);
  __Pyx_GIVEREF(__pyx_int_3184776046);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_3184776046);
  __Pyx_INCREF(__pyx_int_1135389935);
  __Pyx_GIVEREF(__pyx_int_1135389935);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_1135389935);
  __Pyx_INCREF(__pyx_int_3294782118);
  __Pyx_GIVEREF(__pyx_int_3294782118);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_3294782118);
  __Pyx_INCREF(__pyx_int_965841320);
  __Pyx_GIVEREF(__pyx_int_965841320);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_965841320);
  __Pyx_INCREF(__pyx_int_831886756);
  __Pyx_GIVEREF(__pyx_int_831886756);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_831886756);
  __Pyx_INCREF(__pyx_int_3554993207);
  __Pyx_GIVEREF(__pyx_int_3554993207);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_3554993207);
  __Pyx_INCREF(__pyx_int_4068047243);
  __Pyx_GIVEREF(__pyx_int_4068047243);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_4068047243);
  __Pyx_INCREF(__pyx_int_3588745010);
  __Pyx_GIVEREF(__pyx_int_3588745010);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_3588745010);
  __Pyx_INCREF(__pyx_int_2345191491);
  __Pyx_GIVEREF(__pyx_int_2345191491);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_2345191491);
  __Pyx_INCREF(__pyx_int_1849112409);
  __Pyx_GIVEREF(__pyx_int_1849112409);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_1849112409);
  __Pyx_INCREF(__pyx_int_3664604599);
  __Pyx_GIVEREF(__pyx_int_3664604599);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_3664604599);
  __Pyx_INCREF(__pyx_int_26054028);
  __Pyx_GIVEREF(__pyx_int_26054028);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_26054028);
  __Pyx_INCREF(__pyx_int_2983581028);
  __Pyx_GIVEREF(__pyx_int_2983581028);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_2983581028);
  __Pyx_INCREF(__pyx_int_2622377682);
  __Pyx_GIVEREF(__pyx_int_2622377682);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_2622377682);
  __Pyx_INCREF(__pyx_int_1235855840);
  __Pyx_GIVEREF(__pyx_int_1235855840);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_1235855840);
  __Pyx_INCREF(__pyx_int_3630984372);
  __Pyx_GIVEREF(__pyx_int_3630984372);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_3630984372);
  __Pyx_INCREF(__pyx_int_2891339514);
  __Pyx_GIVEREF(__pyx_int_2891339514);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_2891339514);
  __Pyx_INCREF(__pyx_int_4092916743);
  __Pyx_GIVEREF(__pyx_int_4092916743);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_4092916743);
  __Pyx_INCREF(__pyx_int_3488279077);
  __Pyx_GIVEREF(__pyx_int_3488279077);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_3488279077);
  __Pyx_INCREF(__pyx_int_3395642799);
  __Pyx_GIVEREF(__pyx_int_3395642799);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_3395642799);
  __Pyx_INCREF(__pyx_int_4101667470);
  __Pyx_GIVEREF(__pyx_int_4101667470);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_4101667470);
  __Pyx_INCREF(__pyx_int_1202630377);
  __Pyx_GIVEREF(__pyx_int_1202630377);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_1202630377);
  __Pyx_INCREF(__pyx_int_268961816);
  __Pyx_GIVEREF(__pyx_int_268961816);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_268961816);
  __Pyx_INCREF(__pyx_int_1874508501);
  __Pyx_GIVEREF(__pyx_int_1874508501);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_1874508501);
  __Pyx_INCREF(__pyx_int_4034427016);
  __Pyx_GIVEREF(__pyx_int_4034427016);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_4034427016);
  __Pyx_INCREF(__pyx_int_1243948399);
  __Pyx_GIVEREF(__pyx_int_1243948399);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_1243948399);
  __Pyx_INCREF(__pyx_int_1546530418);
  __Pyx_GIVEREF(__pyx_int_1546530418);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_1546530418);
  __Pyx_INCREF(__pyx_int_941366308);
  __Pyx_GIVEREF(__pyx_int_941366308);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_941366308);
  __Pyx_INCREF(__pyx_int_1470539505);
  __Pyx_GIVEREF(__pyx_int_1470539505);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_1470539505);
  __Pyx_INCREF(__pyx_int_1941222599);
  __Pyx_GIVEREF(__pyx_int_1941222599);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_1941222599);
  __Pyx_INCREF(__pyx_int_2546386513);
  __Pyx_GIVEREF(__pyx_int_2546386513);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_2546386513);
  __Pyx_INCREF(__pyx_int_3421038627);
  __Pyx_GIVEREF(__pyx_int_3421038627);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3421038627);
  __Pyx_INCREF(__pyx_int_2715671932);
  __Pyx_GIVEREF(__pyx_int_2715671932);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_2715671932);
  __Pyx_INCREF(__pyx_int_3899946140);
  __Pyx_GIVEREF(__pyx_int_3899946140);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_3899946140);
  __Pyx_INCREF(__pyx_int_1042226977);
  __Pyx_GIVEREF(__pyx_int_1042226977);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_1042226977);
  __Pyx_INCREF(__pyx_int_2521517021);
  __Pyx_GIVEREF(__pyx_int_2521517021);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_2521517021);
  __Pyx_INCREF(__pyx_int_1639824860);
  __Pyx_GIVEREF(__pyx_int_1639824860);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_1639824860);
  __Pyx_INCREF(__pyx_int_227249030);
  __Pyx_GIVEREF(__pyx_int_227249030);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_227249030);
  __Pyx_INCREF(__pyx_int_260737669);
  __Pyx_GIVEREF(__pyx_int_260737669);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_260737669);
  __Pyx_INCREF(__pyx_int_3765465232);
  __Pyx_GIVEREF(__pyx_int_3765465232);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_3765465232);
  __Pyx_INCREF(__pyx_int_2084453954);
  __Pyx_GIVEREF(__pyx_int_2084453954);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_2084453954);
  __Pyx_INCREF(__pyx_int_1907733956);
  __Pyx_GIVEREF(__pyx_int_1907733956);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_1907733956);
  __Pyx_INCREF(__pyx_int_3429263018);
  __Pyx_GIVEREF(__pyx_int_3429263018);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_3429263018);
  __Pyx_INCREF(__pyx_int_2420656344);
  __Pyx_GIVEREF(__pyx_int_2420656344);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_2420656344);
  __Pyx_INCREF(__pyx_int_100860677);
  __Pyx_GIVEREF(__pyx_int_100860677);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_100860677);
  __Pyx_INCREF(__pyx_int_4160157185);
  __Pyx_GIVEREF(__pyx_int_4160157185);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_4160157185);
  __Pyx_INCREF(__pyx_int_470683154);
  __Pyx_GIVEREF(__pyx_int_470683154);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_470683154);
  __Pyx_INCREF(__pyx_int_3261161891);
  __Pyx_GIVEREF(__pyx_int_3261161891);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_3261161891);
  __Pyx_INCREF(__pyx_int_1781871967);
  __Pyx_GIVEREF(__pyx_int_1781871967);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_1781871967);
  __Pyx_INCREF(__pyx_int_2924959737);
  __Pyx_GIVEREF(__pyx_int_2924959737);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_2924959737);
  __Pyx_INCREF(__pyx_int_1773779408);
  __Pyx_GIVEREF(__pyx_int_1773779408);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_1773779408);
  __Pyx_INCREF(__pyx_int_394692241);
  __Pyx_GIVEREF(__pyx_int_394692241);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_394692241);
  __Pyx_INCREF(__pyx_int_2579611992);
  __Pyx_GIVEREF(__pyx_int_2579611992);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_2579611992);
  __Pyx_INCREF(__pyx_int_974986535);
  __Pyx_GIVEREF(__pyx_int_974986535);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_974986535);
  __Pyx_INCREF(__pyx_int_664706745);
  __Pyx_GIVEREF(__pyx_int_664706745);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_664706745);
  __Pyx_INCREF(__pyx_int_3655459128);
  __Pyx_GIVEREF(__pyx_int_3655459128);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_3655459128);
  __Pyx_INCREF(__pyx_int_3958962195);
  __Pyx_GIVEREF(__pyx_int_3958962195);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_3958962195);
  __Pyx_INCREF(__pyx_int_731420851);
  __Pyx_GIVEREF(__pyx_int_731420851);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_731420851);
  __Pyx_INCREF(__pyx_int_571543859);
  __Pyx_GIVEREF(__pyx_int_571543859);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_571543859);
  __Pyx_INCREF(__pyx_int_3530123707);
  __Pyx_GIVEREF(__pyx_int_3530123707);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_3530123707);
  __Pyx_INCREF(__pyx_int_2849626480);
  __Pyx_GIVEREF(__pyx_int_2849626480);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_2849626480);
  __Pyx_INCREF(__pyx_int_126783113);
  __Pyx_GIVEREF(__pyx_int_126783113);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_126783113);
  __Pyx_INCREF(__pyx_int_865375399);
  __Pyx_GIVEREF(__pyx_int_865375399);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_865375399);
  __Pyx_INCREF(__pyx_int_765172662);
  __Pyx_GIVEREF(__pyx_int_765172662);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_765172662);
  __Pyx_INCREF(__pyx_int_1008606754);
  __Pyx_GIVEREF(__pyx_int_1008606754);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1008606754);
  __Pyx_INCREF(__pyx_int_361203602);
  __Pyx_GIVEREF(__pyx_int_361203602);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_361203602);
  __Pyx_INCREF(__pyx_int_3387549984);
  __Pyx_GIVEREF(__pyx_int_3387549984);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_3387549984);
  __Pyx_INCREF(__pyx_int_2278477385);
  __Pyx_GIVEREF(__pyx_int_2278477385);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_2278477385);
  __Pyx_INCREF(__pyx_int_2857719295);
  __Pyx_GIVEREF(__pyx_int_2857719295);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_2857719295);
  __Pyx_INCREF(__pyx_int_1344809080);
  __Pyx_GIVEREF(__pyx_int_1344809080);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_1344809080);
  __Pyx_INCREF(__pyx_int_2782912378);
  __Pyx_GIVEREF(__pyx_int_2782912378);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_2782912378);
  __Pyx_INCREF(__pyx_int_59542671);
  __Pyx_GIVEREF(__pyx_int_59542671);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_59542671);
  __Pyx_INCREF(__pyx_int_1503764984);
  __Pyx_GIVEREF(__pyx_int_1503764984);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_1503764984);
  __Pyx_INCREF(__pyx_int_160008576);
  __Pyx_GIVEREF(__pyx_int_160008576);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_160008576);
  __Pyx_INCREF(__pyx_int_437062935);
  __Pyx_GIVEREF(__pyx_int_437062935);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_437062935);
  __Pyx_INCREF(__pyx_int_1707065306);
  __Pyx_GIVEREF(__pyx_int_1707065306);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_1707065306);
  __Pyx_INCREF(__pyx_int_3622233649);
  __Pyx_GIVEREF(__pyx_int_3622233649);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3622233649);
  __Pyx_INCREF(__pyx_int_2218934982);
  __Pyx_GIVEREF(__pyx_int_2218934982);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_2218934982);
  __Pyx_INCREF(__pyx_int_3496503480);
  __Pyx_GIVEREF(__pyx_int_3496503480);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_3496503480);
  __Pyx_INCREF(__pyx_int_2185314755);
  __Pyx_GIVEREF(__pyx_int_2185314755);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_2185314755);
  __Pyx_INCREF(__pyx_int_697932208);
  __Pyx_GIVEREF(__pyx_int_697932208);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_697932208);
  __Pyx_INCREF(__pyx_int_1512910199);
  __Pyx_GIVEREF(__pyx_int_1512910199);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_1512910199);
  __Pyx_INCREF(__pyx_int_504303377);
  __Pyx_GIVEREF(__pyx_int_504303377);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_504303377);
  __Pyx_INCREF(__pyx_int_2075177163);
  __Pyx_GIVEREF(__pyx_int_2075177163);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2075177163);
  __Pyx_INCREF(__pyx_int_2824099068);
  __Pyx_GIVEREF(__pyx_int_2824099068);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_2824099068);
  __Pyx_INCREF(__pyx_int_1841019862);
  __Pyx_GIVEREF(__pyx_int_1841019862);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1841019862);
  __Pyx_INCREF(__pyx_int_739644986);
  __Pyx_GIVEREF(__pyx_int_739644986);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_739644986);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T1, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":69
 *     # Transformations for encryption ~
 *     T1 = [ 0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a ]
 *     T2 = [ 0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616 ]             # <<<<<<<<<<<<<<
 *     T3 = [ 0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16 ]
 *     T4 = [ 0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_2781242211);
  __Pyx_GIVEREF(__pyx_int_2781242211);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_2781242211);
  __Pyx_INCREF(__pyx_int_2230877308);
  __Pyx_GIVEREF(__pyx_int_2230877308);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2230877308);
  __Pyx_INCREF(__pyx_int_2582542199);
  __Pyx_GIVEREF(__pyx_int_2582542199);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2582542199);
  __Pyx_INCREF(__pyx_int_2381740923);
  __Pyx_GIVEREF(__pyx_int_2381740923);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_2381740923);
  __Pyx_INCREF(__pyx_int_234877682);
  __Pyx_GIVEREF(__pyx_int_234877682);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_234877682);
  __Pyx_INCREF(__pyx_int_3184946027);
  __Pyx_GIVEREF(__pyx_int_3184946027);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_3184946027);
  __Pyx_INCREF(__pyx_int_2984144751);
  __Pyx_GIVEREF(__pyx_int_2984144751);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_2984144751);
  __Pyx_INCREF(__pyx_int_1418839493);
  __Pyx_GIVEREF(__pyx_int_1418839493);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_1418839493);
  __Pyx_INCREF(__pyx_int_1348481072);
  __Pyx_GIVEREF(__pyx_int_1348481072);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1348481072);
  __Pyx_INCREF(__pyx_int_50462977);
  __Pyx_GIVEREF(__pyx_int_50462977);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_50462977);
  __Pyx_INCREF(__pyx_int_2848876391);
  __Pyx_GIVEREF(__pyx_int_2848876391);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_2848876391);
  __Pyx_INCREF(__pyx_int_2102799147);
  __Pyx_GIVEREF(__pyx_int_2102799147);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_2102799147);
  __Pyx_INCREF(__pyx_int_434634494);
  __Pyx_GIVEREF(__pyx_int_434634494);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_434634494);
  __Pyx_INCREF(__pyx_int_1656084439);
  __Pyx_GIVEREF(__pyx_int_1656084439);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_1656084439);
  __Pyx_INCREF(__pyx_int_3863849899);
  __Pyx_GIVEREF(__pyx_int_3863849899);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_3863849899);
  __Pyx_INCREF(__pyx_int_2599188086);
  __Pyx_GIVEREF(__pyx_int_2599188086);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_2599188086);
  __Pyx_INCREF(__pyx_int_1167051466);
  __Pyx_GIVEREF(__pyx_int_1167051466);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_1167051466);
  __Pyx_INCREF(__pyx_int_2636087938);
  __Pyx_GIVEREF(__pyx_int_2636087938);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_2636087938);
  __Pyx_INCREF(__pyx_int_1082771913);
  __Pyx_GIVEREF(__pyx_int_1082771913);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_1082771913);
  __Pyx_INCREF(__pyx_int_2281340285);
  __Pyx_GIVEREF(__pyx_int_2281340285);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_2281340285);
  __Pyx_INCREF(__pyx_int_368048890);
  __Pyx_GIVEREF(__pyx_int_368048890);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_368048890);
  __Pyx_INCREF(__pyx_int_3954334041);
  __Pyx_GIVEREF(__pyx_int_3954334041);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_3954334041);
  __Pyx_INCREF(__pyx_int_3381544775);
  __Pyx_GIVEREF(__pyx_int_3381544775);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_3381544775);
  __Pyx_INCREF(__pyx_int_201060592);
  __Pyx_GIVEREF(__pyx_int_201060592);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_201060592);
  __Pyx_INCREF(__pyx_int_3963727277);
  __Pyx_GIVEREF(__pyx_int_3963727277);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_3963727277);
  __Pyx_INCREF(__pyx_int_1739838676);
  __Pyx_GIVEREF(__pyx_int_1739838676);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_1739838676);
  __Pyx_INCREF(__pyx_int_4250903202);
  __Pyx_GIVEREF(__pyx_int_4250903202);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_4250903202);
  __Pyx_INCREF(__pyx_int_3930435503);
  __Pyx_GIVEREF(__pyx_int_3930435503);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_3930435503);
  __Pyx_INCREF(__pyx_int_3206782108);
  __Pyx_GIVEREF(__pyx_int_3206782108);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_3206782108);
  __Pyx_INCREF(__pyx_int_4149453988);
  __Pyx_GIVEREF(__pyx_int_4149453988);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_4149453988);
  __Pyx_INCREF(__pyx_int_2531553906);
  __Pyx_GIVEREF(__pyx_int_2531553906);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_2531553906);
  __Pyx_INCREF(__pyx_int_1536934080);
  __Pyx_GIVEREF(__pyx_int_1536934080);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_1536934080);
  __Pyx_INCREF(__pyx_int_3262494647);
  __Pyx_GIVEREF(__pyx_int_3262494647);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3262494647);
  __Pyx_INCREF(__pyx_int_484572669);
  __Pyx_GIVEREF(__pyx_int_484572669);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_484572669);
  __Pyx_INCREF(__pyx_int_2923271059);
  __Pyx_GIVEREF(__pyx_int_2923271059);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_2923271059);
  __Pyx_INCREF(__pyx_int_1783375398);
  __Pyx_GIVEREF(__pyx_int_1783375398);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_1783375398);
  __Pyx_INCREF(__pyx_int_1517041206);
  __Pyx_GIVEREF(__pyx_int_1517041206);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_1517041206);
  __Pyx_INCREF(__pyx_int_1098792767);
  __Pyx_GIVEREF(__pyx_int_1098792767);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_1098792767);
  __Pyx_INCREF(__pyx_int_49674231);
  __Pyx_GIVEREF(__pyx_int_49674231);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_49674231);
  __Pyx_INCREF(__pyx_int_1334037708);
  __Pyx_GIVEREF(__pyx_int_1334037708);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_1334037708);
  __Pyx_INCREF(__pyx_int_1550332980);
  __Pyx_GIVEREF(__pyx_int_1550332980);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_1550332980);
  __Pyx_INCREF(__pyx_int_4098991525);
  __Pyx_GIVEREF(__pyx_int_4098991525);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_4098991525);
  __Pyx_INCREF(__pyx_int_886171109);
  __Pyx_GIVEREF(__pyx_int_886171109);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_886171109);
  __Pyx_INCREF(__pyx_int_150598129);
  __Pyx_GIVEREF(__pyx_int_150598129);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_150598129);
  __Pyx_INCREF(__pyx_int_2481090929);
  __Pyx_GIVEREF(__pyx_int_2481090929);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_2481090929);
  __Pyx_INCREF(__pyx_int_1940642008);
  __Pyx_GIVEREF(__pyx_int_1940642008);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_1940642008);
  __Pyx_INCREF(__pyx_int_1398944049);
  __Pyx_GIVEREF(__pyx_int_1398944049);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_1398944049);
  __Pyx_INCREF(__pyx_int_1059722517);
  __Pyx_GIVEREF(__pyx_int_1059722517);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_1059722517);
  __Pyx_INCREF(__pyx_int_201851908);
  __Pyx_GIVEREF(__pyx_int_201851908);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_201851908);
  __Pyx_INCREF(__pyx_int_1385547719);
  __Pyx_GIVEREF(__pyx_int_1385547719);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_1385547719);
  __Pyx_INCREF(__pyx_int_1699095331);
  __Pyx_GIVEREF(__pyx_int_1699095331);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_1699095331);
  __Pyx_INCREF(__pyx_int_1587397571);
  __Pyx_GIVEREF(__pyx_int_1587397571);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_1587397571);
  __Pyx_INCREF(__pyx_int_674240536);
  __Pyx_GIVEREF(__pyx_int_674240536);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_674240536);
  __Pyx_INCREF(__pyx_int_2704774806);
  __Pyx_GIVEREF(__pyx_int_2704774806);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_2704774806);
  __Pyx_INCREF(__pyx_int_252314885);
  __Pyx_GIVEREF(__pyx_int_252314885);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_252314885);
  __Pyx_INCREF(__pyx_int_3039795866);
  __Pyx_GIVEREF(__pyx_int_3039795866);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_3039795866);
  __Pyx_INCREF(__pyx_int_151914247);
  __Pyx_GIVEREF(__pyx_int_151914247);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_151914247);
  __Pyx_INCREF(__pyx_int_908333586);
  __Pyx_GIVEREF(__pyx_int_908333586);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_908333586);
  __Pyx_INCREF(__pyx_int_2602270848);
  __Pyx_GIVEREF(__pyx_int_2602270848);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2602270848);
  __Pyx_INCREF(__pyx_int_1038082786);
  __Pyx_GIVEREF(__pyx_int_1038082786);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_1038082786);
  __Pyx_INCREF(__pyx_int_651029483);
  __Pyx_GIVEREF(__pyx_int_651029483);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_651029483);
  __Pyx_INCREF(__pyx_int_1766729511);
  __Pyx_GIVEREF(__pyx_int_1766729511);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_1766729511);
  __Pyx_INCREF(__pyx_int_3447698098);
  __Pyx_GIVEREF(__pyx_int_3447698098);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_3447698098);
  __Pyx_INCREF(__pyx_int_2682942837);
  __Pyx_GIVEREF(__pyx_int_2682942837);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_2682942837);
  __Pyx_INCREF(__pyx_int_454166793);
  __Pyx_GIVEREF(__pyx_int_454166793);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_454166793);
  __Pyx_INCREF(__pyx_int_2652734339);
  __Pyx_GIVEREF(__pyx_int_2652734339);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2652734339);
  __Pyx_INCREF(__pyx_int_1951935532);
  __Pyx_GIVEREF(__pyx_int_1951935532);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_1951935532);
  __Pyx_INCREF(__pyx_int_775166490);
  __Pyx_GIVEREF(__pyx_int_775166490);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_775166490);
  __Pyx_INCREF(__pyx_int_758520603);
  __Pyx_GIVEREF(__pyx_int_758520603);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_758520603);
  __Pyx_INCREF(__pyx_int_3000790638);
  __Pyx_GIVEREF(__pyx_int_3000790638);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_3000790638);
  __Pyx_INCREF(__pyx_int_4004797018);
  __Pyx_GIVEREF(__pyx_int_4004797018);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_4004797018);
  __Pyx_INCREF(__pyx_int_4217086112);
  __Pyx_GIVEREF(__pyx_int_4217086112);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_4217086112);
  __Pyx_INCREF(__pyx_int_4137964114);
  __Pyx_GIVEREF(__pyx_int_4137964114);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_4137964114);
  __Pyx_INCREF(__pyx_int_1299594043);
  __Pyx_GIVEREF(__pyx_int_1299594043);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_1299594043);
  __Pyx_INCREF(__pyx_int_1639438038);
  __Pyx_GIVEREF(__pyx_int_1639438038);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_1639438038);
  __Pyx_INCREF(__pyx_int_3464344499);
  __Pyx_GIVEREF(__pyx_int_3464344499);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3464344499);
  __Pyx_INCREF(__pyx_int_2068982057);
  __Pyx_GIVEREF(__pyx_int_2068982057);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_2068982057);
  __Pyx_INCREF(__pyx_int_1054729187);
  __Pyx_GIVEREF(__pyx_int_1054729187);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_1054729187);
  __Pyx_INCREF(__pyx_int_1901997871);
  __Pyx_GIVEREF(__pyx_int_1901997871);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_1901997871);
  __Pyx_INCREF(__pyx_int_2534638724);
  __Pyx_GIVEREF(__pyx_int_2534638724);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_2534638724);
  __Pyx_INCREF(__pyx_int_4121318227);
  __Pyx_GIVEREF(__pyx_int_4121318227);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_4121318227);
  __Pyx_INCREF(__pyx_int_1757008337);
  __Pyx_GIVEREF(__pyx_int_1757008337);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_1757008337);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_750906861);
  __Pyx_GIVEREF(__pyx_int_750906861);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_750906861);
  __Pyx_INCREF(__pyx_int_1614815264);
  __Pyx_GIVEREF(__pyx_int_1614815264);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_1614815264);
  __Pyx_INCREF(__pyx_int_535035132);
  __Pyx_GIVEREF(__pyx_int_535035132);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_535035132);
  __Pyx_INCREF(__pyx_int_3363418545);
  __Pyx_GIVEREF(__pyx_int_3363418545);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_3363418545);
  __Pyx_INCREF(__pyx_int_3988151131);
  __Pyx_GIVEREF(__pyx_int_3988151131);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_3988151131);
  __Pyx_INCREF(__pyx_int_3201591914);
  __Pyx_GIVEREF(__pyx_int_3201591914);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_3201591914);
  __Pyx_INCREF(__pyx_int_1183697867);
  __Pyx_GIVEREF(__pyx_int_1183697867);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_1183697867);
  __Pyx_INCREF(__pyx_int_3647454910);
  __Pyx_GIVEREF(__pyx_int_3647454910);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3647454910);
  __Pyx_INCREF(__pyx_int_1265776953);
  __Pyx_GIVEREF(__pyx_int_1265776953);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_1265776953);
  __Pyx_INCREF(__pyx_int_3734260298);
  __Pyx_GIVEREF(__pyx_int_3734260298);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_3734260298);
  __Pyx_INCREF(__pyx_int_3566750796);
  __Pyx_GIVEREF(__pyx_int_3566750796);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_3566750796);
  __Pyx_INCREF(__pyx_int_3903871064);
  __Pyx_GIVEREF(__pyx_int_3903871064);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_3903871064);
  __Pyx_INCREF(__pyx_int_1250283471);
  __Pyx_GIVEREF(__pyx_int_1250283471);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_1250283471);
  __Pyx_INCREF(__pyx_int_1807470800);
  __Pyx_GIVEREF(__pyx_int_1807470800);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_1807470800);
  __Pyx_INCREF(__pyx_int_717615087);
  __Pyx_GIVEREF(__pyx_int_717615087);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_717615087);
  __Pyx_INCREF(__pyx_int_3847203498);
  __Pyx_GIVEREF(__pyx_int_3847203498);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_3847203498);
  __Pyx_INCREF(__pyx_int_384695291);
  __Pyx_GIVEREF(__pyx_int_384695291);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_384695291);
  __Pyx_INCREF(__pyx_int_3313910595);
  __Pyx_GIVEREF(__pyx_int_3313910595);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_3313910595);
  __Pyx_INCREF(__pyx_int_3617213773);
  __Pyx_GIVEREF(__pyx_int_3617213773);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_3617213773);
  __Pyx_INCREF(__pyx_int_1432761139);
  __Pyx_GIVEREF(__pyx_int_1432761139);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_1432761139);
  __Pyx_INCREF(__pyx_int_2484176261);
  __Pyx_GIVEREF(__pyx_int_2484176261);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_2484176261);
  __Pyx_INCREF(__pyx_int_3481945413);
  __Pyx_GIVEREF(__pyx_int_3481945413);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_3481945413);
  __Pyx_INCREF(__pyx_int_283769337);
  __Pyx_GIVEREF(__pyx_int_283769337);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_283769337);
  __Pyx_INCREF(__pyx_int_100925954);
  __Pyx_GIVEREF(__pyx_int_100925954);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_100925954);
  __Pyx_INCREF(__pyx_int_2180939647);
  __Pyx_GIVEREF(__pyx_int_2180939647);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_2180939647);
  __Pyx_INCREF(__pyx_int_4037038160);
  __Pyx_GIVEREF(__pyx_int_4037038160);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_4037038160);
  __Pyx_INCREF(__pyx_int_1148730428);
  __Pyx_GIVEREF(__pyx_int_1148730428);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_1148730428);
  __Pyx_INCREF(__pyx_int_3123027871);
  __Pyx_GIVEREF(__pyx_int_3123027871);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_3123027871);
  __Pyx_INCREF(__pyx_int_3813386408);
  __Pyx_GIVEREF(__pyx_int_3813386408);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_3813386408);
  __Pyx_INCREF(__pyx_int_4087501137);
  __Pyx_GIVEREF(__pyx_int_4087501137);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_4087501137);
  __Pyx_INCREF(__pyx_int_4267549603);
  __Pyx_GIVEREF(__pyx_int_4267549603);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_4267549603);
  __Pyx_INCREF(__pyx_int_3229630528);
  __Pyx_GIVEREF(__pyx_int_3229630528);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_3229630528);
  __Pyx_INCREF(__pyx_int_2315620239);
  __Pyx_GIVEREF(__pyx_int_2315620239);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2315620239);
  __Pyx_INCREF(__pyx_int_2906624658);
  __Pyx_GIVEREF(__pyx_int_2906624658);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_2906624658);
  __Pyx_INCREF(__pyx_int_3156319645);
  __Pyx_GIVEREF(__pyx_int_3156319645);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_3156319645);
  __Pyx_INCREF(__pyx_int_1215313976);
  __Pyx_GIVEREF(__pyx_int_1215313976);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_1215313976);
  __Pyx_INCREF(__pyx_int_82966005);
  __Pyx_GIVEREF(__pyx_int_82966005);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_82966005);
  __Pyx_INCREF(__pyx_int_3747855548);
  __Pyx_GIVEREF(__pyx_int_3747855548);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3747855548);
  __Pyx_INCREF(__pyx_int_3245848246);
  __Pyx_GIVEREF(__pyx_int_3245848246);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3245848246);
  __Pyx_INCREF(__pyx_int_1974459098);
  __Pyx_GIVEREF(__pyx_int_1974459098);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_1974459098);
  __Pyx_INCREF(__pyx_int_1665278241);
  __Pyx_GIVEREF(__pyx_int_1665278241);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_1665278241);
  __Pyx_INCREF(__pyx_int_807407632);
  __Pyx_GIVEREF(__pyx_int_807407632);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_807407632);
  __Pyx_INCREF(__pyx_int_451280895);
  __Pyx_GIVEREF(__pyx_int_451280895);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_451280895);
  __Pyx_INCREF(__pyx_int_251524083);
  __Pyx_GIVEREF(__pyx_int_251524083);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_251524083);
  __Pyx_INCREF(__pyx_int_1841287890);
  __Pyx_GIVEREF(__pyx_int_1841287890);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_1841287890);
  __Pyx_INCREF(__pyx_int_1283575245);
  __Pyx_GIVEREF(__pyx_int_1283575245);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_1283575245);
  __Pyx_INCREF(__pyx_int_337120268);
  __Pyx_GIVEREF(__pyx_int_337120268);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_337120268);
  __Pyx_INCREF(__pyx_int_891687699);
  __Pyx_GIVEREF(__pyx_int_891687699);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_891687699);
  __Pyx_INCREF(__pyx_int_801369324);
  __Pyx_GIVEREF(__pyx_int_801369324);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_801369324);
  __Pyx_INCREF(__pyx_int_3787349855);
  __Pyx_GIVEREF(__pyx_int_3787349855);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_3787349855);
  __Pyx_INCREF(__pyx_int_2721421207);
  __Pyx_GIVEREF(__pyx_int_2721421207);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_2721421207);
  __Pyx_INCREF(__pyx_int_3431482436);
  __Pyx_GIVEREF(__pyx_int_3431482436);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_3431482436);
  __Pyx_INCREF(__pyx_int_959321879);
  __Pyx_GIVEREF(__pyx_int_959321879);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_959321879);
  __Pyx_INCREF(__pyx_int_1469301956);
  __Pyx_GIVEREF(__pyx_int_1469301956);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_1469301956);
  __Pyx_INCREF(__pyx_int_4065699751);
  __Pyx_GIVEREF(__pyx_int_4065699751);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_4065699751);
  __Pyx_INCREF(__pyx_int_2197585534);
  __Pyx_GIVEREF(__pyx_int_2197585534);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_2197585534);
  __Pyx_INCREF(__pyx_int_1199193405);
  __Pyx_GIVEREF(__pyx_int_1199193405);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_1199193405);
  __Pyx_INCREF(__pyx_int_2898814052);
  __Pyx_GIVEREF(__pyx_int_2898814052);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_2898814052);
  __Pyx_INCREF(__pyx_int_3887750493);
  __Pyx_GIVEREF(__pyx_int_3887750493);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_3887750493);
  __Pyx_INCREF(__pyx_int_724703513);
  __Pyx_GIVEREF(__pyx_int_724703513);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_724703513);
  __Pyx_INCREF(__pyx_int_2514908019);
  __Pyx_GIVEREF(__pyx_int_2514908019);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_2514908019);
  __Pyx_INCREF(__pyx_int_2696962144);
  __Pyx_GIVEREF(__pyx_int_2696962144);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_2696962144);
  __Pyx_INCREF(__pyx_int_2551808385);
  __Pyx_GIVEREF(__pyx_int_2551808385);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_2551808385);
  __Pyx_INCREF(__pyx_int_3516813135);
  __Pyx_GIVEREF(__pyx_int_3516813135);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_3516813135);
  __Pyx_INCREF(__pyx_int_2141445340);
  __Pyx_GIVEREF(__pyx_int_2141445340);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_2141445340);
  __Pyx_INCREF(__pyx_int_1715741218);
  __Pyx_GIVEREF(__pyx_int_1715741218);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1715741218);
  __Pyx_INCREF(__pyx_int_2119445034);
  __Pyx_GIVEREF(__pyx_int_2119445034);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_2119445034);
  __Pyx_INCREF(__pyx_int_2872807568);
  __Pyx_GIVEREF(__pyx_int_2872807568);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2872807568);
  __Pyx_INCREF(__pyx_int_2198571144);
  __Pyx_GIVEREF(__pyx_int_2198571144);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_2198571144);
  __Pyx_INCREF(__pyx_int_3398190662);
  __Pyx_GIVEREF(__pyx_int_3398190662);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_3398190662);
  __Pyx_INCREF(__pyx_int_700968686);
  __Pyx_GIVEREF(__pyx_int_700968686);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_700968686);
  __Pyx_INCREF(__pyx_int_3547052216);
  __Pyx_GIVEREF(__pyx_int_3547052216);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_3547052216);
  __Pyx_INCREF(__pyx_int_1009259540);
  __Pyx_GIVEREF(__pyx_int_1009259540);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_1009259540);
  __Pyx_INCREF(__pyx_int_2041044702);
  __Pyx_GIVEREF(__pyx_int_2041044702);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_2041044702);
  __Pyx_INCREF(__pyx_int_3803995742);
  __Pyx_GIVEREF(__pyx_int_3803995742);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_3803995742);
  __Pyx_INCREF(__pyx_int_487983883);
  __Pyx_GIVEREF(__pyx_int_487983883);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_487983883);
  __Pyx_INCREF(__pyx_int_1991105499);
  __Pyx_GIVEREF(__pyx_int_1991105499);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_1991105499);
  __Pyx_INCREF(__pyx_int_1004265696);
  __Pyx_GIVEREF(__pyx_int_1004265696);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_1004265696);
  __Pyx_INCREF(__pyx_int_1449407026);
  __Pyx_GIVEREF(__pyx_int_1449407026);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_1449407026);
  __Pyx_INCREF(__pyx_int_1316239930);
  __Pyx_GIVEREF(__pyx_int_1316239930);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_1316239930);
  __Pyx_INCREF(__pyx_int_504629770);
  __Pyx_GIVEREF(__pyx_int_504629770);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_504629770);
  __Pyx_INCREF(__pyx_int_3683797321);
  __Pyx_GIVEREF(__pyx_int_3683797321);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_3683797321);
  __Pyx_INCREF(__pyx_int_168560134);
  __Pyx_GIVEREF(__pyx_int_168560134);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_168560134);
  __Pyx_INCREF(__pyx_int_1816667172);
  __Pyx_GIVEREF(__pyx_int_1816667172);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_1816667172);
  __Pyx_INCREF(__pyx_int_3837287516);
  __Pyx_GIVEREF(__pyx_int_3837287516);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_3837287516);
  __Pyx_INCREF(__pyx_int_1570751170);
  __Pyx_GIVEREF(__pyx_int_1570751170);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_1570751170);
  __Pyx_INCREF(__pyx_int_1857934291);
  __Pyx_GIVEREF(__pyx_int_1857934291);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_1857934291);
  __Pyx_INCREF(__pyx_int_4014189740);
  __Pyx_GIVEREF(__pyx_int_4014189740);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_4014189740);
  __Pyx_INCREF(__pyx_int_2797888098);
  __Pyx_GIVEREF(__pyx_int_2797888098);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_2797888098);
  __Pyx_INCREF(__pyx_int_2822345105);
  __Pyx_GIVEREF(__pyx_int_2822345105);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_2822345105);
  __Pyx_INCREF(__pyx_int_2754712981);
  __Pyx_GIVEREF(__pyx_int_2754712981);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_2754712981);
  __Pyx_INCREF(__pyx_int_936633572);
  __Pyx_GIVEREF(__pyx_int_936633572);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_936633572);
  __Pyx_INCREF(__pyx_int_2347923833);
  __Pyx_GIVEREF(__pyx_int_2347923833);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2347923833);
  __Pyx_INCREF(__pyx_int_852879335);
  __Pyx_GIVEREF(__pyx_int_852879335);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_852879335);
  __Pyx_INCREF(__pyx_int_1133234376);
  __Pyx_GIVEREF(__pyx_int_1133234376);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_1133234376);
  __Pyx_INCREF(__pyx_int_1500395319);
  __Pyx_GIVEREF(__pyx_int_1500395319);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_1500395319);
  __Pyx_INCREF(__pyx_int_3084545389);
  __Pyx_GIVEREF(__pyx_int_3084545389);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_3084545389);
  __Pyx_INCREF(__pyx_int_2348912013);
  __Pyx_GIVEREF(__pyx_int_2348912013);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2348912013);
  __Pyx_INCREF(__pyx_int_1689376213);
  __Pyx_GIVEREF(__pyx_int_1689376213);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_1689376213);
  __Pyx_INCREF(__pyx_int_3533459022);
  __Pyx_GIVEREF(__pyx_int_3533459022);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_3533459022);
  __Pyx_INCREF(__pyx_int_3762923945);
  __Pyx_GIVEREF(__pyx_int_3762923945);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_3762923945);
  __Pyx_INCREF(__pyx_int_3034082412);
  __Pyx_GIVEREF(__pyx_int_3034082412);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_3034082412);
  __Pyx_INCREF(__pyx_int_4205598294);
  __Pyx_GIVEREF(__pyx_int_4205598294);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_4205598294);
  __Pyx_INCREF(__pyx_int_133428468);
  __Pyx_GIVEREF(__pyx_int_133428468);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_133428468);
  __Pyx_INCREF(__pyx_int_634383082);
  __Pyx_GIVEREF(__pyx_int_634383082);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_634383082);
  __Pyx_INCREF(__pyx_int_2949277029);
  __Pyx_GIVEREF(__pyx_int_2949277029);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_2949277029);
  __Pyx_INCREF(__pyx_int_2398386810);
  __Pyx_GIVEREF(__pyx_int_2398386810);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_2398386810);
  __Pyx_INCREF(__pyx_int_3913789102);
  __Pyx_GIVEREF(__pyx_int_3913789102);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_3913789102);
  __Pyx_INCREF(__pyx_int_403703816);
  __Pyx_GIVEREF(__pyx_int_403703816);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_403703816);
  __Pyx_INCREF(__pyx_int_3580869306);
  __Pyx_GIVEREF(__pyx_int_3580869306);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3580869306);
  __Pyx_INCREF(__pyx_int_2297460856);
  __Pyx_GIVEREF(__pyx_int_2297460856);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_2297460856);
  __Pyx_INCREF(__pyx_int_1867130149);
  __Pyx_GIVEREF(__pyx_int_1867130149);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_1867130149);
  __Pyx_INCREF(__pyx_int_1918643758);
  __Pyx_GIVEREF(__pyx_int_1918643758);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_1918643758);
  __Pyx_INCREF(__pyx_int_607656988);
  __Pyx_GIVEREF(__pyx_int_607656988);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_607656988);
  __Pyx_INCREF(__pyx_int_4049053350);
  __Pyx_GIVEREF(__pyx_int_4049053350);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_4049053350);
  __Pyx_INCREF(__pyx_int_3346248884);
  __Pyx_GIVEREF(__pyx_int_3346248884);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_3346248884);
  __Pyx_INCREF(__pyx_int_1368901318);
  __Pyx_GIVEREF(__pyx_int_1368901318);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_1368901318);
  __Pyx_INCREF(__pyx_int_600565992);
  __Pyx_GIVEREF(__pyx_int_600565992);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_600565992);
  __Pyx_INCREF(__pyx_int_2090982877);
  __Pyx_GIVEREF(__pyx_int_2090982877);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_2090982877);
  __Pyx_INCREF(__pyx_int_2632479860);
  __Pyx_GIVEREF(__pyx_int_2632479860);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_2632479860);
  __Pyx_INCREF(__pyx_int_557719327);
  __Pyx_GIVEREF(__pyx_int_557719327);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_557719327);
  __Pyx_INCREF(__pyx_int_3717614411);
  __Pyx_GIVEREF(__pyx_int_3717614411);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_3717614411);
  __Pyx_INCREF(__pyx_int_3697393085);
  __Pyx_GIVEREF(__pyx_int_3697393085);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3697393085);
  __Pyx_INCREF(__pyx_int_2249034635);
  __Pyx_GIVEREF(__pyx_int_2249034635);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_2249034635);
  __Pyx_INCREF(__pyx_int_2232388234);
  __Pyx_GIVEREF(__pyx_int_2232388234);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_2232388234);
  __Pyx_INCREF(__pyx_int_2430627952);
  __Pyx_GIVEREF(__pyx_int_2430627952);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_2430627952);
  __Pyx_INCREF(__pyx_int_1115438654);
  __Pyx_GIVEREF(__pyx_int_1115438654);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1115438654);
  __Pyx_INCREF(__pyx_int_3295786421);
  __Pyx_GIVEREF(__pyx_int_3295786421);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_3295786421);
  __Pyx_INCREF(__pyx_int_2865522278);
  __Pyx_GIVEREF(__pyx_int_2865522278);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_2865522278);
  __Pyx_INCREF(__pyx_int_3633334344);
  __Pyx_GIVEREF(__pyx_int_3633334344);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_3633334344);
  __Pyx_INCREF(__pyx_int_84280067);
  __Pyx_GIVEREF(__pyx_int_84280067);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_84280067);
  __Pyx_INCREF(__pyx_int_33027830);
  __Pyx_GIVEREF(__pyx_int_33027830);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_33027830);
  __Pyx_INCREF(__pyx_int_303828494);
  __Pyx_GIVEREF(__pyx_int_303828494);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_303828494);
  __Pyx_INCREF(__pyx_int_2747425121);
  __Pyx_GIVEREF(__pyx_int_2747425121);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_2747425121);
  __Pyx_INCREF(__pyx_int_1600795957);
  __Pyx_GIVEREF(__pyx_int_1600795957);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_1600795957);
  __Pyx_INCREF(__pyx_int_4188952407);
  __Pyx_GIVEREF(__pyx_int_4188952407);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_4188952407);
  __Pyx_INCREF(__pyx_int_3496589753);
  __Pyx_GIVEREF(__pyx_int_3496589753);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_3496589753);
  __Pyx_INCREF(__pyx_int_2434238086);
  __Pyx_GIVEREF(__pyx_int_2434238086);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_2434238086);
  __Pyx_INCREF(__pyx_int_1486471617);
  __Pyx_GIVEREF(__pyx_int_1486471617);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_1486471617);
  __Pyx_INCREF(__pyx_int_658119965);
  __Pyx_GIVEREF(__pyx_int_658119965);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_658119965);
  __Pyx_INCREF(__pyx_int_3106381470);
  __Pyx_GIVEREF(__pyx_int_3106381470);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_3106381470);
  __Pyx_INCREF(__pyx_int_953803233);
  __Pyx_GIVEREF(__pyx_int_953803233);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_953803233);
  __Pyx_INCREF(__pyx_int_334231800);
  __Pyx_GIVEREF(__pyx_int_334231800);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_334231800);
  __Pyx_INCREF(__pyx_int_3005978776);
  __Pyx_GIVEREF(__pyx_int_3005978776);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_3005978776);
  __Pyx_INCREF(__pyx_int_857870609);
  __Pyx_GIVEREF(__pyx_int_857870609);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_857870609);
  __Pyx_INCREF(__pyx_int_3151128937);
  __Pyx_GIVEREF(__pyx_int_3151128937);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_3151128937);
  __Pyx_INCREF(__pyx_int_1890179545);
  __Pyx_GIVEREF(__pyx_int_1890179545);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_1890179545);
  __Pyx_INCREF(__pyx_int_2298973838);
  __Pyx_GIVEREF(__pyx_int_2298973838);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_2298973838);
  __Pyx_INCREF(__pyx_int_2805175444);
  __Pyx_GIVEREF(__pyx_int_2805175444);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2805175444);
  __Pyx_INCREF(__pyx_int_3056442267);
  __Pyx_GIVEREF(__pyx_int_3056442267);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_3056442267);
  __Pyx_INCREF(__pyx_int_574365214);
  __Pyx_GIVEREF(__pyx_int_574365214);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_574365214);
  __Pyx_INCREF(__pyx_int_2450884487);
  __Pyx_GIVEREF(__pyx_int_2450884487);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_2450884487);
  __Pyx_INCREF(__pyx_int_550103529);
  __Pyx_GIVEREF(__pyx_int_550103529);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_550103529);
  __Pyx_INCREF(__pyx_int_1233637070);
  __Pyx_GIVEREF(__pyx_int_1233637070);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_1233637070);
  __Pyx_INCREF(__pyx_int_4289353045);
  __Pyx_GIVEREF(__pyx_int_4289353045);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_4289353045);
  __Pyx_INCREF(__pyx_int_2018519080);
  __Pyx_GIVEREF(__pyx_int_2018519080);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_2018519080);
  __Pyx_INCREF(__pyx_int_2057691103);
  __Pyx_GIVEREF(__pyx_int_2057691103);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_2057691103);
  __Pyx_INCREF(__pyx_int_2399374476);
  __Pyx_GIVEREF(__pyx_int_2399374476);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_2399374476);
  __Pyx_INCREF(__pyx_int_4166623649);
  __Pyx_GIVEREF(__pyx_int_4166623649);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_4166623649);
  __Pyx_INCREF(__pyx_int_2148108681);
  __Pyx_GIVEREF(__pyx_int_2148108681);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_2148108681);
  __Pyx_INCREF(__pyx_int_387583245);
  __Pyx_GIVEREF(__pyx_int_387583245);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_387583245);
  __Pyx_INCREF(__pyx_int_3664101311);
  __Pyx_GIVEREF(__pyx_int_3664101311);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3664101311);
  __Pyx_INCREF(__pyx_int_836232934);
  __Pyx_GIVEREF(__pyx_int_836232934);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_836232934);
  __Pyx_INCREF(__pyx_int_3330556482);
  __Pyx_GIVEREF(__pyx_int_3330556482);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_3330556482);
  __Pyx_INCREF(__pyx_int_3100665960);
  __Pyx_GIVEREF(__pyx_int_3100665960);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_3100665960);
  __Pyx_INCREF(__pyx_int_3280093505);
  __Pyx_GIVEREF(__pyx_int_3280093505);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_3280093505);
  __Pyx_INCREF(__pyx_int_2955516313);
  __Pyx_GIVEREF(__pyx_int_2955516313);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_2955516313);
  __Pyx_INCREF(__pyx_int_2002398509);
  __Pyx_GIVEREF(__pyx_int_2002398509);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_2002398509);
  __Pyx_INCREF(__pyx_int_287182607);
  __Pyx_GIVEREF(__pyx_int_287182607);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_287182607);
  __Pyx_INCREF(__pyx_int_3413881008);
  __Pyx_GIVEREF(__pyx_int_3413881008);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_3413881008);
  __Pyx_INCREF(__pyx_int_4238890068);
  __Pyx_GIVEREF(__pyx_int_4238890068);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_4238890068);
  __Pyx_INCREF(__pyx_int_3597515707);
  __Pyx_GIVEREF(__pyx_int_3597515707);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_3597515707);
  __Pyx_INCREF(__pyx_int_975967766);
  __Pyx_GIVEREF(__pyx_int_975967766);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_975967766);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T2, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":70
 *     T1 = [ 0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a ]
 *     T2 = [ 0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616 ]
 *     T3 = [ 0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16 ]             # <<<<<<<<<<<<<<
 *     T4 = [ 0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c ]
 * 
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1671808611);
  __Pyx_GIVEREF(__pyx_int_1671808611);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1671808611);
  __Pyx_INCREF(__pyx_int_2089089148);
  __Pyx_GIVEREF(__pyx_int_2089089148);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2089089148);
  __Pyx_INCREF(__pyx_int_2006576759);
  __Pyx_GIVEREF(__pyx_int_2006576759);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2006576759);
  __Pyx_INCREF(__pyx_int_2072901243);
  __Pyx_GIVEREF(__pyx_int_2072901243);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_2072901243);
  __Pyx_INCREF(__pyx_int_4061003762);
  __Pyx_GIVEREF(__pyx_int_4061003762);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_4061003762);
  __Pyx_INCREF(__pyx_int_1807603307);
  __Pyx_GIVEREF(__pyx_int_1807603307);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_1807603307);
  __Pyx_INCREF(__pyx_int_1873927791);
  __Pyx_GIVEREF(__pyx_int_1873927791);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_1873927791);
  __Pyx_INCREF(__pyx_int_3310653893);
  __Pyx_GIVEREF(__pyx_int_3310653893);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_3310653893);
  __Pyx_INCREF(__pyx_int_810573872);
  __Pyx_GIVEREF(__pyx_int_810573872);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_810573872);
  __Pyx_INCREF(__pyx_int_16974337);
  __Pyx_GIVEREF(__pyx_int_16974337);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_16974337);
  __Pyx_INCREF(__pyx_int_1739181671);
  __Pyx_GIVEREF(__pyx_int_1739181671);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1739181671);
  __Pyx_INCREF(__pyx_int_729634347);
  __Pyx_GIVEREF(__pyx_int_729634347);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_729634347);
  __Pyx_INCREF(__pyx_int_4263110654);
  __Pyx_GIVEREF(__pyx_int_4263110654);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_4263110654);
  __Pyx_INCREF(__pyx_int_3613570519);
  __Pyx_GIVEREF(__pyx_int_3613570519);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3613570519);
  __Pyx_INCREF(__pyx_int_2883997099);
  __Pyx_GIVEREF(__pyx_int_2883997099);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_2883997099);
  __Pyx_INCREF(__pyx_int_1989864566);
  __Pyx_GIVEREF(__pyx_int_1989864566);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1989864566);
  __Pyx_INCREF(__pyx_int_3393556426);
  __Pyx_GIVEREF(__pyx_int_3393556426);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_3393556426);
  __Pyx_INCREF(__pyx_int_2191335298);
  __Pyx_GIVEREF(__pyx_int_2191335298);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_2191335298);
  __Pyx_INCREF(__pyx_int_3376449993);
  __Pyx_GIVEREF(__pyx_int_3376449993);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_3376449993);
  __Pyx_INCREF(__pyx_int_2106063485);
  __Pyx_GIVEREF(__pyx_int_2106063485);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_2106063485);
  __Pyx_INCREF(__pyx_int_4195741690);
  __Pyx_GIVEREF(__pyx_int_4195741690);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_4195741690);
  __Pyx_INCREF(__pyx_int_1508618841);
  __Pyx_GIVEREF(__pyx_int_1508618841);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_1508618841);
  __Pyx_INCREF(__pyx_int_1204391495);
  __Pyx_GIVEREF(__pyx_int_1204391495);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_1204391495);
  __Pyx_INCREF(__pyx_int_4027317232);
  __Pyx_GIVEREF(__pyx_int_4027317232);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_4027317232);
  __Pyx_INCREF(__pyx_int_2917941677);
  __Pyx_GIVEREF(__pyx_int_2917941677);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_2917941677);
  __Pyx_INCREF(__pyx_int_3563566036);
  __Pyx_GIVEREF(__pyx_int_3563566036);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3563566036);
  __Pyx_INCREF(__pyx_int_2734514082);
  __Pyx_GIVEREF(__pyx_int_2734514082);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_2734514082);
  __Pyx_INCREF(__pyx_int_2951366063);
  __Pyx_GIVEREF(__pyx_int_2951366063);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_2951366063);
  __Pyx_INCREF(__pyx_int_2629772188);
  __Pyx_GIVEREF(__pyx_int_2629772188);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_2629772188);
  __Pyx_INCREF(__pyx_int_2767672228);
  __Pyx_GIVEREF(__pyx_int_2767672228);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_2767672228);
  __Pyx_INCREF(__pyx_int_1922491506);
  __Pyx_GIVEREF(__pyx_int_1922491506);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_1922491506);
  __Pyx_INCREF(__pyx_int_3227229120);
  __Pyx_GIVEREF(__pyx_int_3227229120);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3227229120);
  __Pyx_INCREF(__pyx_int_3082974647);
  __Pyx_GIVEREF(__pyx_int_3082974647);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3082974647);
  __Pyx_INCREF(__pyx_int_4246528509);
  __Pyx_GIVEREF(__pyx_int_4246528509);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_4246528509);
  __Pyx_INCREF(__pyx_int_2477669779);
  __Pyx_GIVEREF(__pyx_int_2477669779);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_2477669779);
  __Pyx_INCREF(__pyx_int_644500518);
  __Pyx_GIVEREF(__pyx_int_644500518);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_644500518);
  __Pyx_INCREF(__pyx_int_911895606);
  __Pyx_GIVEREF(__pyx_int_911895606);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_911895606);
  __Pyx_INCREF(__pyx_int_1061256767);
  __Pyx_GIVEREF(__pyx_int_1061256767);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_1061256767);
  __Pyx_INCREF(__pyx_int_4144166391);
  __Pyx_GIVEREF(__pyx_int_4144166391);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_4144166391);
  __Pyx_INCREF(__pyx_int_3427763148);
  __Pyx_GIVEREF(__pyx_int_3427763148);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_3427763148);
  __Pyx_INCREF(__pyx_int_878471220);
  __Pyx_GIVEREF(__pyx_int_878471220);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_878471220);
  __Pyx_INCREF(__pyx_int_2784252325);
  __Pyx_GIVEREF(__pyx_int_2784252325);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_2784252325);
  __Pyx_INCREF(__pyx_int_3845444069);
  __Pyx_GIVEREF(__pyx_int_3845444069);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_3845444069);
  __Pyx_INCREF(__pyx_int_4043897329);
  __Pyx_GIVEREF(__pyx_int_4043897329);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_4043897329);
  __Pyx_INCREF(__pyx_int_1905517169);
  __Pyx_GIVEREF(__pyx_int_1905517169);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_1905517169);
  __Pyx_INCREF(__pyx_int_3631459288);
  __Pyx_GIVEREF(__pyx_int_3631459288);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_3631459288);
  __Pyx_INCREF(__pyx_int_827548209);
  __Pyx_GIVEREF(__pyx_int_827548209);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_827548209);
  __Pyx_INCREF(__pyx_int_356461077);
  __Pyx_GIVEREF(__pyx_int_356461077);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_356461077);
  __Pyx_INCREF(__pyx_int_67897348);
  __Pyx_GIVEREF(__pyx_int_67897348);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_67897348);
  __Pyx_INCREF(__pyx_int_3344078279);
  __Pyx_GIVEREF(__pyx_int_3344078279);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_3344078279);
  __Pyx_INCREF(__pyx_int_593839651);
  __Pyx_GIVEREF(__pyx_int_593839651);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_593839651);
  __Pyx_INCREF(__pyx_int_3277757891);
  __Pyx_GIVEREF(__pyx_int_3277757891);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_3277757891);
  __Pyx_INCREF(__pyx_int_405286936);
  __Pyx_GIVEREF(__pyx_int_405286936);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_405286936);
  __Pyx_INCREF(__pyx_int_2527147926);
  __Pyx_GIVEREF(__pyx_int_2527147926);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_2527147926);
  __Pyx_INCREF(__pyx_int_84871685);
  __Pyx_GIVEREF(__pyx_int_84871685);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_84871685);
  __Pyx_INCREF(__pyx_int_2595565466);
  __Pyx_GIVEREF(__pyx_int_2595565466);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_2595565466);
  __Pyx_INCREF(__pyx_int_118033927);
  __Pyx_GIVEREF(__pyx_int_118033927);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_118033927);
  __Pyx_INCREF(__pyx_int_305538066);
  __Pyx_GIVEREF(__pyx_int_305538066);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_305538066);
  __Pyx_INCREF(__pyx_int_2157648768);
  __Pyx_GIVEREF(__pyx_int_2157648768);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2157648768);
  __Pyx_INCREF(__pyx_int_3795705826);
  __Pyx_GIVEREF(__pyx_int_3795705826);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_3795705826);
  __Pyx_INCREF(__pyx_int_3945188843);
  __Pyx_GIVEREF(__pyx_int_3945188843);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_3945188843);
  __Pyx_INCREF(__pyx_int_661212711);
  __Pyx_GIVEREF(__pyx_int_661212711);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_661212711);
  __Pyx_INCREF(__pyx_int_2999812018);
  __Pyx_GIVEREF(__pyx_int_2999812018);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_2999812018);
  __Pyx_INCREF(__pyx_int_1973414517);
  __Pyx_GIVEREF(__pyx_int_1973414517);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_1973414517);
  __Pyx_INCREF(__pyx_int_152769033);
  __Pyx_GIVEREF(__pyx_int_152769033);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_152769033);
  __Pyx_INCREF(__pyx_int_2208177539);
  __Pyx_GIVEREF(__pyx_int_2208177539);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2208177539);
  __Pyx_INCREF(__pyx_int_745822252);
  __Pyx_GIVEREF(__pyx_int_745822252);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_745822252);
  __Pyx_INCREF(__pyx_int_439235610);
  __Pyx_GIVEREF(__pyx_int_439235610);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_439235610);
  __Pyx_INCREF(__pyx_int_455947803);
  __Pyx_GIVEREF(__pyx_int_455947803);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_455947803);
  __Pyx_INCREF(__pyx_int_1857215598);
  __Pyx_GIVEREF(__pyx_int_1857215598);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_1857215598);
  __Pyx_INCREF(__pyx_int_1525593178);
  __Pyx_GIVEREF(__pyx_int_1525593178);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_1525593178);
  __Pyx_INCREF(__pyx_int_2700827552);
  __Pyx_GIVEREF(__pyx_int_2700827552);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_2700827552);
  __Pyx_INCREF(__pyx_int_1391895634);
  __Pyx_GIVEREF(__pyx_int_1391895634);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_1391895634);
  __Pyx_INCREF(__pyx_int_994932283);
  __Pyx_GIVEREF(__pyx_int_994932283);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_994932283);
  __Pyx_INCREF(__pyx_int_3596728278);
  __Pyx_GIVEREF(__pyx_int_3596728278);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3596728278);
  __Pyx_INCREF(__pyx_int_3016654259);
  __Pyx_GIVEREF(__pyx_int_3016654259);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3016654259);
  __Pyx_INCREF(__pyx_int_695947817);
  __Pyx_GIVEREF(__pyx_int_695947817);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_695947817);
  __Pyx_INCREF(__pyx_int_3812548067);
  __Pyx_GIVEREF(__pyx_int_3812548067);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_3812548067);
  __Pyx_INCREF(__pyx_int_795958831);
  __Pyx_GIVEREF(__pyx_int_795958831);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_795958831);
  __Pyx_INCREF(__pyx_int_2224493444);
  __Pyx_GIVEREF(__pyx_int_2224493444);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_2224493444);
  __Pyx_INCREF(__pyx_int_1408607827);
  __Pyx_GIVEREF(__pyx_int_1408607827);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_1408607827);
  __Pyx_INCREF(__pyx_int_3513301457);
  __Pyx_GIVEREF(__pyx_int_3513301457);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_3513301457);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_3979133421);
  __Pyx_GIVEREF(__pyx_int_3979133421);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_3979133421);
  __Pyx_INCREF(__pyx_int_543178784);
  __Pyx_GIVEREF(__pyx_int_543178784);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_543178784);
  __Pyx_INCREF(__pyx_int_4229948412);
  __Pyx_GIVEREF(__pyx_int_4229948412);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_4229948412);
  __Pyx_INCREF(__pyx_int_2982705585);
  __Pyx_GIVEREF(__pyx_int_2982705585);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_2982705585);
  __Pyx_INCREF(__pyx_int_1542305371);
  __Pyx_GIVEREF(__pyx_int_1542305371);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_1542305371);
  __Pyx_INCREF(__pyx_int_1790891114);
  __Pyx_GIVEREF(__pyx_int_1790891114);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_1790891114);
  __Pyx_INCREF(__pyx_int_3410398667);
  __Pyx_GIVEREF(__pyx_int_3410398667);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3410398667);
  __Pyx_INCREF(__pyx_int_3201918910);
  __Pyx_GIVEREF(__pyx_int_3201918910);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3201918910);
  __Pyx_INCREF(__pyx_int_961245753);
  __Pyx_GIVEREF(__pyx_int_961245753);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_961245753);
  __Pyx_INCREF(__pyx_int_1256100938);
  __Pyx_GIVEREF(__pyx_int_1256100938);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_1256100938);
  __Pyx_INCREF(__pyx_int_1289001036);
  __Pyx_GIVEREF(__pyx_int_1289001036);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_1289001036);
  __Pyx_INCREF(__pyx_int_1491644504);
  __Pyx_GIVEREF(__pyx_int_1491644504);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_1491644504);
  __Pyx_INCREF(__pyx_int_3477767631);
  __Pyx_GIVEREF(__pyx_int_3477767631);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_3477767631);
  __Pyx_INCREF(__pyx_int_3496721360);
  __Pyx_GIVEREF(__pyx_int_3496721360);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_3496721360);
  __Pyx_INCREF(__pyx_int_4012557807);
  __Pyx_GIVEREF(__pyx_int_4012557807);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_4012557807);
  __Pyx_INCREF(__pyx_int_2867154858);
  __Pyx_GIVEREF(__pyx_int_2867154858);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_2867154858);
  __Pyx_INCREF(__pyx_int_4212583931);
  __Pyx_GIVEREF(__pyx_int_4212583931);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_4212583931);
  __Pyx_INCREF(__pyx_int_1137018435);
  __Pyx_GIVEREF(__pyx_int_1137018435);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_1137018435);
  __Pyx_INCREF(__pyx_int_1305975373);
  __Pyx_GIVEREF(__pyx_int_1305975373);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_1305975373);
  __Pyx_INCREF(__pyx_int_861234739);
  __Pyx_GIVEREF(__pyx_int_861234739);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_861234739);
  __Pyx_INCREF(__pyx_int_2241073541);
  __Pyx_GIVEREF(__pyx_int_2241073541);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_2241073541);
  __Pyx_INCREF(__pyx_int_1171229253);
  __Pyx_GIVEREF(__pyx_int_1171229253);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_1171229253);
  __Pyx_INCREF(__pyx_int_4178635257);
  __Pyx_GIVEREF(__pyx_int_4178635257);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_4178635257);
  __Pyx_INCREF(__pyx_int_33948674);
  __Pyx_GIVEREF(__pyx_int_33948674);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_33948674);
  __Pyx_INCREF(__pyx_int_2139225727);
  __Pyx_GIVEREF(__pyx_int_2139225727);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_2139225727);
  __Pyx_INCREF(__pyx_int_1357946960);
  __Pyx_GIVEREF(__pyx_int_1357946960);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_1357946960);
  __Pyx_INCREF(__pyx_int_1011120188);
  __Pyx_GIVEREF(__pyx_int_1011120188);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_1011120188);
  __Pyx_INCREF(__pyx_int_2679776671);
  __Pyx_GIVEREF(__pyx_int_2679776671);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_2679776671);
  __Pyx_INCREF(__pyx_int_2833468328);
  __Pyx_GIVEREF(__pyx_int_2833468328);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_2833468328);
  __Pyx_INCREF(__pyx_int_1374921297);
  __Pyx_GIVEREF(__pyx_int_1374921297);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_1374921297);
  __Pyx_INCREF(__pyx_int_2751356323);
  __Pyx_GIVEREF(__pyx_int_2751356323);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_2751356323);
  __Pyx_INCREF(__pyx_int_1086357568);
  __Pyx_GIVEREF(__pyx_int_1086357568);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_1086357568);
  __Pyx_INCREF(__pyx_int_2408187279);
  __Pyx_GIVEREF(__pyx_int_2408187279);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2408187279);
  __Pyx_INCREF(__pyx_int_2460827538);
  __Pyx_GIVEREF(__pyx_int_2460827538);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_2460827538);
  __Pyx_INCREF(__pyx_int_2646352285);
  __Pyx_GIVEREF(__pyx_int_2646352285);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_2646352285);
  __Pyx_INCREF(__pyx_int_944271416);
  __Pyx_GIVEREF(__pyx_int_944271416);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_944271416);
  __Pyx_INCREF(__pyx_int_4110742005);
  __Pyx_GIVEREF(__pyx_int_4110742005);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_4110742005);
  __Pyx_INCREF(__pyx_int_3168756668);
  __Pyx_GIVEREF(__pyx_int_3168756668);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3168756668);
  __Pyx_INCREF(__pyx_int_3066132406);
  __Pyx_GIVEREF(__pyx_int_3066132406);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3066132406);
  __Pyx_INCREF(__pyx_int_3665145818);
  __Pyx_GIVEREF(__pyx_int_3665145818);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_3665145818);
  __Pyx_INCREF(__pyx_int_560153121);
  __Pyx_GIVEREF(__pyx_int_560153121);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_560153121);
  __Pyx_INCREF(__pyx_int_271589392);
  __Pyx_GIVEREF(__pyx_int_271589392);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_271589392);
  __Pyx_INCREF(__pyx_int_4279952895);
  __Pyx_GIVEREF(__pyx_int_4279952895);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_4279952895);
  __Pyx_INCREF(__pyx_int_4077846003);
  __Pyx_GIVEREF(__pyx_int_4077846003);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_4077846003);
  __Pyx_INCREF(__pyx_int_3530407890);
  __Pyx_GIVEREF(__pyx_int_3530407890);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_3530407890);
  __Pyx_INCREF(__pyx_int_3444343245);
  __Pyx_GIVEREF(__pyx_int_3444343245);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_3444343245);
  __Pyx_INCREF(__pyx_int_202643468);
  __Pyx_GIVEREF(__pyx_int_202643468);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_202643468);
  __Pyx_INCREF(__pyx_int_322250259);
  __Pyx_GIVEREF(__pyx_int_322250259);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_322250259);
  __Pyx_INCREF(__pyx_int_3962553324);
  __Pyx_GIVEREF(__pyx_int_3962553324);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_3962553324);
  __Pyx_INCREF(__pyx_int_1608629855);
  __Pyx_GIVEREF(__pyx_int_1608629855);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_1608629855);
  __Pyx_INCREF(__pyx_int_2543990167);
  __Pyx_GIVEREF(__pyx_int_2543990167);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_2543990167);
  __Pyx_INCREF(__pyx_int_1154254916);
  __Pyx_GIVEREF(__pyx_int_1154254916);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1154254916);
  __Pyx_INCREF(__pyx_int_389623319);
  __Pyx_GIVEREF(__pyx_int_389623319);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_389623319);
  __Pyx_INCREF(__pyx_int_3294073796);
  __Pyx_GIVEREF(__pyx_int_3294073796);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_3294073796);
  __Pyx_INCREF(__pyx_int_2817676711);
  __Pyx_GIVEREF(__pyx_int_2817676711);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_2817676711);
  __Pyx_INCREF(__pyx_int_2122513534);
  __Pyx_GIVEREF(__pyx_int_2122513534);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_2122513534);
  __Pyx_INCREF(__pyx_int_1028094525);
  __Pyx_GIVEREF(__pyx_int_1028094525);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_1028094525);
  __Pyx_INCREF(__pyx_int_1689045092);
  __Pyx_GIVEREF(__pyx_int_1689045092);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_1689045092);
  __Pyx_INCREF(__pyx_int_1575467613);
  __Pyx_GIVEREF(__pyx_int_1575467613);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_1575467613);
  __Pyx_INCREF(__pyx_int_422261273);
  __Pyx_GIVEREF(__pyx_int_422261273);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_422261273);
  __Pyx_INCREF(__pyx_int_1939203699);
  __Pyx_GIVEREF(__pyx_int_1939203699);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_1939203699);
  __Pyx_INCREF(__pyx_int_1621147744);
  __Pyx_GIVEREF(__pyx_int_1621147744);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_1621147744);
  __Pyx_INCREF(__pyx_int_2174228865);
  __Pyx_GIVEREF(__pyx_int_2174228865);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_2174228865);
  __Pyx_INCREF(__pyx_int_1339137615);
  __Pyx_GIVEREF(__pyx_int_1339137615);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_1339137615);
  __Pyx_INCREF(__pyx_int_3699352540);
  __Pyx_GIVEREF(__pyx_int_3699352540);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_3699352540);
  __Pyx_INCREF(__pyx_int_577127458);
  __Pyx_GIVEREF(__pyx_int_577127458);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_577127458);
  __Pyx_INCREF(__pyx_int_712922154);
  __Pyx_GIVEREF(__pyx_int_712922154);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_712922154);
  __Pyx_INCREF(__pyx_int_2427141008);
  __Pyx_GIVEREF(__pyx_int_2427141008);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2427141008);
  __Pyx_INCREF(__pyx_int_2290289544);
  __Pyx_GIVEREF(__pyx_int_2290289544);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_2290289544);
  __Pyx_INCREF(__pyx_int_1187679302);
  __Pyx_GIVEREF(__pyx_int_1187679302);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_1187679302);
  __Pyx_INCREF(__pyx_int_3995715566);
  __Pyx_GIVEREF(__pyx_int_3995715566);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_3995715566);
  __Pyx_INCREF(__pyx_int_3100863416);
  __Pyx_GIVEREF(__pyx_int_3100863416);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_3100863416);
  __Pyx_INCREF(__pyx_int_339486740);
  __Pyx_GIVEREF(__pyx_int_339486740);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_339486740);
  __Pyx_INCREF(__pyx_int_3732514782);
  __Pyx_GIVEREF(__pyx_int_3732514782);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_3732514782);
  __Pyx_INCREF(__pyx_int_1591917662);
  __Pyx_GIVEREF(__pyx_int_1591917662);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_1591917662);
  __Pyx_INCREF(__pyx_int_186455563);
  __Pyx_GIVEREF(__pyx_int_186455563);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_186455563);
  __Pyx_INCREF(__pyx_int_3681988059);
  __Pyx_GIVEREF(__pyx_int_3681988059);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_3681988059);
  __Pyx_INCREF(__pyx_int_3762019296);
  __Pyx_GIVEREF(__pyx_int_3762019296);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_3762019296);
  __Pyx_INCREF(__pyx_int_844522546);
  __Pyx_GIVEREF(__pyx_int_844522546);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_844522546);
  __Pyx_INCREF(__pyx_int_978220090);
  __Pyx_GIVEREF(__pyx_int_978220090);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_978220090);
  __Pyx_INCREF(__pyx_int_169743370);
  __Pyx_GIVEREF(__pyx_int_169743370);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_169743370);
  __Pyx_INCREF(__pyx_int_1239126601);
  __Pyx_GIVEREF(__pyx_int_1239126601);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_1239126601);
  __Pyx_INCREF(__pyx_int_101321734);
  __Pyx_GIVEREF(__pyx_int_101321734);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_101321734);
  __Pyx_INCREF(__pyx_int_611076132);
  __Pyx_GIVEREF(__pyx_int_611076132);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_611076132);
  __Pyx_INCREF(__pyx_int_1558493276);
  __Pyx_GIVEREF(__pyx_int_1558493276);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_1558493276);
  __Pyx_INCREF(__pyx_int_3260915650);
  __Pyx_GIVEREF(__pyx_int_3260915650);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_3260915650);
  __Pyx_INCREF(__pyx_int_3547250131);
  __Pyx_GIVEREF(__pyx_int_3547250131);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_3547250131);
  __Pyx_INCREF(__pyx_int_2901361580);
  __Pyx_GIVEREF(__pyx_int_2901361580);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_2901361580);
  __Pyx_INCREF(__pyx_int_1655096418);
  __Pyx_GIVEREF(__pyx_int_1655096418);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_1655096418);
  __Pyx_INCREF(__pyx_int_2443721105);
  __Pyx_GIVEREF(__pyx_int_2443721105);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_2443721105);
  __Pyx_INCREF(__pyx_int_2510565781);
  __Pyx_GIVEREF(__pyx_int_2510565781);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_2510565781);
  __Pyx_INCREF(__pyx_int_3828863972);
  __Pyx_GIVEREF(__pyx_int_3828863972);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_3828863972);
  __Pyx_INCREF(__pyx_int_2039214713);
  __Pyx_GIVEREF(__pyx_int_2039214713);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2039214713);
  __Pyx_INCREF(__pyx_int_3878868455);
  __Pyx_GIVEREF(__pyx_int_3878868455);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_3878868455);
  __Pyx_INCREF(__pyx_int_3359869896);
  __Pyx_GIVEREF(__pyx_int_3359869896);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_3359869896);
  __Pyx_INCREF(__pyx_int_928607799);
  __Pyx_GIVEREF(__pyx_int_928607799);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_928607799);
  __Pyx_INCREF(__pyx_int_1840765549);
  __Pyx_GIVEREF(__pyx_int_1840765549);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_1840765549);
  __Pyx_INCREF(__pyx_int_2374762893);
  __Pyx_GIVEREF(__pyx_int_2374762893);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2374762893);
  __Pyx_INCREF(__pyx_int_3580146133);
  __Pyx_GIVEREF(__pyx_int_3580146133);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_3580146133);
  __Pyx_INCREF(__pyx_int_1322425422);
  __Pyx_GIVEREF(__pyx_int_1322425422);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1322425422);
  __Pyx_INCREF(__pyx_int_2850048425);
  __Pyx_GIVEREF(__pyx_int_2850048425);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_2850048425);
  __Pyx_INCREF(__pyx_int_1823791212);
  __Pyx_GIVEREF(__pyx_int_1823791212);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_1823791212);
  __Pyx_INCREF(__pyx_int_1459268694);
  __Pyx_GIVEREF(__pyx_int_1459268694);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_1459268694);
  __Pyx_INCREF(__pyx_int_4094161908);
  __Pyx_GIVEREF(__pyx_int_4094161908);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_4094161908);
  __Pyx_INCREF(__pyx_int_3928346602);
  __Pyx_GIVEREF(__pyx_int_3928346602);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_3928346602);
  __Pyx_INCREF(__pyx_int_1706019429);
  __Pyx_GIVEREF(__pyx_int_1706019429);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_1706019429);
  __Pyx_INCREF(__pyx_int_2056189050);
  __Pyx_GIVEREF(__pyx_int_2056189050);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_2056189050);
  __Pyx_INCREF(__pyx_int_2934523822);
  __Pyx_GIVEREF(__pyx_int_2934523822);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_2934523822);
  __Pyx_INCREF(__pyx_int_135794696);
  __Pyx_GIVEREF(__pyx_int_135794696);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_135794696);
  __Pyx_INCREF(__pyx_int_3134549946);
  __Pyx_GIVEREF(__pyx_int_3134549946);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3134549946);
  __Pyx_INCREF(__pyx_int_2022240376);
  __Pyx_GIVEREF(__pyx_int_2022240376);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_2022240376);
  __Pyx_INCREF(__pyx_int_628050469);
  __Pyx_GIVEREF(__pyx_int_628050469);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_628050469);
  __Pyx_INCREF(__pyx_int_779246638);
  __Pyx_GIVEREF(__pyx_int_779246638);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_779246638);
  __Pyx_INCREF(__pyx_int_472135708);
  __Pyx_GIVEREF(__pyx_int_472135708);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_472135708);
  __Pyx_INCREF(__pyx_int_2800834470);
  __Pyx_GIVEREF(__pyx_int_2800834470);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_2800834470);
  __Pyx_INCREF(__pyx_int_3032970164);
  __Pyx_GIVEREF(__pyx_int_3032970164);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_3032970164);
  __Pyx_INCREF(__pyx_int_3327236038);
  __Pyx_GIVEREF(__pyx_int_3327236038);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_3327236038);
  __Pyx_INCREF(__pyx_int_3894660072);
  __Pyx_GIVEREF(__pyx_int_3894660072);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3894660072);
  __Pyx_INCREF(__pyx_int_3715932637);
  __Pyx_GIVEREF(__pyx_int_3715932637);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_3715932637);
  __Pyx_INCREF(__pyx_int_1956440180);
  __Pyx_GIVEREF(__pyx_int_1956440180);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_1956440180);
  __Pyx_INCREF(__pyx_int_522272287);
  __Pyx_GIVEREF(__pyx_int_522272287);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_522272287);
  __Pyx_INCREF(__pyx_int_1272813131);
  __Pyx_GIVEREF(__pyx_int_1272813131);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_1272813131);
  __Pyx_INCREF(__pyx_int_3185336765);
  __Pyx_GIVEREF(__pyx_int_3185336765);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3185336765);
  __Pyx_INCREF(__pyx_int_2340818315);
  __Pyx_GIVEREF(__pyx_int_2340818315);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_2340818315);
  __Pyx_INCREF(__pyx_int_2323976074);
  __Pyx_GIVEREF(__pyx_int_2323976074);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_2323976074);
  __Pyx_INCREF(__pyx_int_1888542832);
  __Pyx_GIVEREF(__pyx_int_1888542832);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_1888542832);
  __Pyx_INCREF(__pyx_int_1044544574);
  __Pyx_GIVEREF(__pyx_int_1044544574);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1044544574);
  __Pyx_INCREF(__pyx_int_3049550261);
  __Pyx_GIVEREF(__pyx_int_3049550261);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_3049550261);
  __Pyx_INCREF(__pyx_int_1722469478);
  __Pyx_GIVEREF(__pyx_int_1722469478);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_1722469478);
  __Pyx_INCREF(__pyx_int_1222152264);
  __Pyx_GIVEREF(__pyx_int_1222152264);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_1222152264);
  __Pyx_INCREF(__pyx_int_50660867);
  __Pyx_GIVEREF(__pyx_int_50660867);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_50660867);
  __Pyx_INCREF(__pyx_int_4127324150);
  __Pyx_GIVEREF(__pyx_int_4127324150);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_4127324150);
  __Pyx_INCREF(__pyx_int_236067854);
  __Pyx_GIVEREF(__pyx_int_236067854);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_236067854);
  __Pyx_INCREF(__pyx_int_1638122081);
  __Pyx_GIVEREF(__pyx_int_1638122081);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_1638122081);
  __Pyx_INCREF(__pyx_int_895445557);
  __Pyx_GIVEREF(__pyx_int_895445557);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_895445557);
  __Pyx_INCREF(__pyx_int_1475980887);
  __Pyx_GIVEREF(__pyx_int_1475980887);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1475980887);
  __Pyx_INCREF(__pyx_int_3117443513);
  __Pyx_GIVEREF(__pyx_int_3117443513);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_3117443513);
  __Pyx_INCREF(__pyx_int_2257655686);
  __Pyx_GIVEREF(__pyx_int_2257655686);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_2257655686);
  __Pyx_INCREF(__pyx_int_3243809217);
  __Pyx_GIVEREF(__pyx_int_3243809217);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_3243809217);
  __Pyx_INCREF(__pyx_int_489110045);
  __Pyx_GIVEREF(__pyx_int_489110045);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_489110045);
  __Pyx_INCREF(__pyx_int_2662934430);
  __Pyx_GIVEREF(__pyx_int_2662934430);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_2662934430);
  __Pyx_INCREF(__pyx_int_3778599393);
  __Pyx_GIVEREF(__pyx_int_3778599393);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_3778599393);
  __Pyx_INCREF(__pyx_int_4162055160);
  __Pyx_GIVEREF(__pyx_int_4162055160);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_4162055160);
  __Pyx_INCREF(__pyx_int_2561878936);
  __Pyx_GIVEREF(__pyx_int_2561878936);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_2561878936);
  __Pyx_INCREF(__pyx_int_288563729);
  __Pyx_GIVEREF(__pyx_int_288563729);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_288563729);
  __Pyx_INCREF(__pyx_int_1773916777);
  __Pyx_GIVEREF(__pyx_int_1773916777);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_1773916777);
  __Pyx_INCREF(__pyx_int_3648039385);
  __Pyx_GIVEREF(__pyx_int_3648039385);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_3648039385);
  __Pyx_INCREF(__pyx_int_2391345038);
  __Pyx_GIVEREF(__pyx_int_2391345038);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_2391345038);
  __Pyx_INCREF(__pyx_int_2493985684);
  __Pyx_GIVEREF(__pyx_int_2493985684);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2493985684);
  __Pyx_INCREF(__pyx_int_2612407707);
  __Pyx_GIVEREF(__pyx_int_2612407707);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_2612407707);
  __Pyx_INCREF(__pyx_int_505560094);
  __Pyx_GIVEREF(__pyx_int_505560094);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_505560094);
  __Pyx_INCREF(__pyx_int_2274497927);
  __Pyx_GIVEREF(__pyx_int_2274497927);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_2274497927);
  __Pyx_INCREF(__pyx_int_3911240169);
  __Pyx_GIVEREF(__pyx_int_3911240169);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_3911240169);
  __Pyx_INCREF(__pyx_int_3460925390);
  __Pyx_GIVEREF(__pyx_int_3460925390);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_3460925390);
  __Pyx_INCREF(__pyx_int_1442818645);
  __Pyx_GIVEREF(__pyx_int_1442818645);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1442818645);
  __Pyx_INCREF(__pyx_int_678973480);
  __Pyx_GIVEREF(__pyx_int_678973480);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_678973480);
  __Pyx_INCREF(__pyx_int_3749357023);
  __Pyx_GIVEREF(__pyx_int_3749357023);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_3749357023);
  __Pyx_INCREF(__pyx_int_2358182796);
  __Pyx_GIVEREF(__pyx_int_2358182796);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_2358182796);
  __Pyx_INCREF(__pyx_int_2717407649);
  __Pyx_GIVEREF(__pyx_int_2717407649);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_2717407649);
  __Pyx_INCREF(__pyx_int_2306869641);
  __Pyx_GIVEREF(__pyx_int_2306869641);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_2306869641);
  __Pyx_INCREF(__pyx_int_219617805);
  __Pyx_GIVEREF(__pyx_int_219617805);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_219617805);
  __Pyx_INCREF(__pyx_int_3218761151);
  __Pyx_GIVEREF(__pyx_int_3218761151);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3218761151);
  __Pyx_INCREF(__pyx_int_3862026214);
  __Pyx_GIVEREF(__pyx_int_3862026214);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3862026214);
  __Pyx_INCREF(__pyx_int_1120306242);
  __Pyx_GIVEREF(__pyx_int_1120306242);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_1120306242);
  __Pyx_INCREF(__pyx_int_1756942440);
  __Pyx_GIVEREF(__pyx_int_1756942440);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_1756942440);
  __Pyx_INCREF(__pyx_int_1103331905);
  __Pyx_GIVEREF(__pyx_int_1103331905);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_1103331905);
  __Pyx_INCREF(__pyx_int_2578459033);
  __Pyx_GIVEREF(__pyx_int_2578459033);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_2578459033);
  __Pyx_INCREF(__pyx_int_762796589);
  __Pyx_GIVEREF(__pyx_int_762796589);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_762796589);
  __Pyx_INCREF(__pyx_int_252780047);
  __Pyx_GIVEREF(__pyx_int_252780047);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_252780047);
  __Pyx_INCREF(__pyx_int_2966125488);
  __Pyx_GIVEREF(__pyx_int_2966125488);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2966125488);
  __Pyx_INCREF(__pyx_int_1425844308);
  __Pyx_GIVEREF(__pyx_int_1425844308);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_1425844308);
  __Pyx_INCREF(__pyx_int_3151392187);
  __Pyx_GIVEREF(__pyx_int_3151392187);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_3151392187);
  __Pyx_INCREF(__pyx_int_372911126);
  __Pyx_GIVEREF(__pyx_int_372911126);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_372911126);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T3, __pyx_t_1) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":71
 *     T2 = [ 0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616 ]
 *     T3 = [ 0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16 ]
 *     T4 = [ 0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c ]             # <<<<<<<<<<<<<<
 * 
 *     # Transformations for decryption ~
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1667474886);
  __Pyx_GIVEREF(__pyx_int_1667474886);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1667474886);
  __Pyx_INCREF(__pyx_int_2088535288);
  __Pyx_GIVEREF(__pyx_int_2088535288);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2088535288);
  __Pyx_INCREF(__pyx_int_2004326894);
  __Pyx_GIVEREF(__pyx_int_2004326894);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2004326894);
  __Pyx_INCREF(__pyx_int_2071694838);
  __Pyx_GIVEREF(__pyx_int_2071694838);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_2071694838);
  __Pyx_INCREF(__pyx_int_4075949567);
  __Pyx_GIVEREF(__pyx_int_4075949567);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_4075949567);
  __Pyx_INCREF(__pyx_int_1802223062);
  __Pyx_GIVEREF(__pyx_int_1802223062);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_1802223062);
  __Pyx_INCREF(__pyx_int_1869591006);
  __Pyx_GIVEREF(__pyx_int_1869591006);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_1869591006);
  __Pyx_INCREF(__pyx_int_3318043793);
  __Pyx_GIVEREF(__pyx_int_3318043793);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_3318043793);
  __Pyx_INCREF(__pyx_int_808472672);
  __Pyx_GIVEREF(__pyx_int_808472672);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_808472672);
  __Pyx_INCREF(__pyx_int_16843522);
  __Pyx_GIVEREF(__pyx_int_16843522);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_16843522);
  __Pyx_INCREF(__pyx_int_1734846926);
  __Pyx_GIVEREF(__pyx_int_1734846926);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1734846926);
  __Pyx_INCREF(__pyx_int_724270422);
  __Pyx_GIVEREF(__pyx_int_724270422);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_724270422);
  __Pyx_INCREF(__pyx_int_4278065639);
  __Pyx_GIVEREF(__pyx_int_4278065639);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_4278065639);
  __Pyx_INCREF(__pyx_int_3621216949);
  __Pyx_GIVEREF(__pyx_int_3621216949);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3621216949);
  __Pyx_INCREF(__pyx_int_2880169549);
  __Pyx_GIVEREF(__pyx_int_2880169549);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_2880169549);
  __Pyx_INCREF(__pyx_int_1987484396);
  __Pyx_GIVEREF(__pyx_int_1987484396);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1987484396);
  __Pyx_INCREF(__pyx_int_3402253711);
  __Pyx_GIVEREF(__pyx_int_3402253711);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_3402253711);
  __Pyx_INCREF(__pyx_int_2189597983);
  __Pyx_GIVEREF(__pyx_int_2189597983);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_2189597983);
  __Pyx_INCREF(__pyx_int_3385409673);
  __Pyx_GIVEREF(__pyx_int_3385409673);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_3385409673);
  __Pyx_INCREF(__pyx_int_2105378810);
  __Pyx_GIVEREF(__pyx_int_2105378810);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_2105378810);
  __Pyx_INCREF(__pyx_int_4210693615);
  __Pyx_GIVEREF(__pyx_int_4210693615);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_4210693615);
  __Pyx_INCREF(__pyx_int_1499065266);
  __Pyx_GIVEREF(__pyx_int_1499065266);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_1499065266);
  __Pyx_INCREF(__pyx_int_1195886990);
  __Pyx_GIVEREF(__pyx_int_1195886990);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_1195886990);
  __Pyx_INCREF(__pyx_int_4042263547);
  __Pyx_GIVEREF(__pyx_int_4042263547);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_4042263547);
  __Pyx_INCREF(__pyx_int_2913856577);
  __Pyx_GIVEREF(__pyx_int_2913856577);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_2913856577);
  __Pyx_INCREF(__pyx_int_3570689971);
  __Pyx_GIVEREF(__pyx_int_3570689971);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3570689971);
  __Pyx_INCREF(__pyx_int_2728590687);
  __Pyx_GIVEREF(__pyx_int_2728590687);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_2728590687);
  __Pyx_INCREF(__pyx_int_2947541573);
  __Pyx_GIVEREF(__pyx_int_2947541573);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_2947541573);
  __Pyx_INCREF(__pyx_int_2627518243);
  __Pyx_GIVEREF(__pyx_int_2627518243);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_2627518243);
  __Pyx_INCREF(__pyx_int_2762274643);
  __Pyx_GIVEREF(__pyx_int_2762274643);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_2762274643);
  __Pyx_INCREF(__pyx_int_1920112356);
  __Pyx_GIVEREF(__pyx_int_1920112356);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_1920112356);
  __Pyx_INCREF(__pyx_int_3233831835);
  __Pyx_GIVEREF(__pyx_int_3233831835);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3233831835);
  __Pyx_INCREF(__pyx_int_3082273397);
  __Pyx_GIVEREF(__pyx_int_3082273397);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3082273397);
  __Pyx_INCREF(__pyx_int_4261223649);
  __Pyx_GIVEREF(__pyx_int_4261223649);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_4261223649);
  __Pyx_INCREF(__pyx_int_2475929149);
  __Pyx_GIVEREF(__pyx_int_2475929149);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_2475929149);
  __Pyx_INCREF(__pyx_int_640051788);
  __Pyx_GIVEREF(__pyx_int_640051788);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_640051788);
  __Pyx_INCREF(__pyx_int_909531756);
  __Pyx_GIVEREF(__pyx_int_909531756);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_909531756);
  __Pyx_INCREF(__pyx_int_1061110142);
  __Pyx_GIVEREF(__pyx_int_1061110142);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_1061110142);
  __Pyx_INCREF(__pyx_int_4160160501);
  __Pyx_GIVEREF(__pyx_int_4160160501);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_4160160501);
  __Pyx_INCREF(__pyx_int_3435941763);
  __Pyx_GIVEREF(__pyx_int_3435941763);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_3435941763);
  __Pyx_INCREF(__pyx_int_875846760);
  __Pyx_GIVEREF(__pyx_int_875846760);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_875846760);
  __Pyx_INCREF(__pyx_int_2779116625);
  __Pyx_GIVEREF(__pyx_int_2779116625);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_2779116625);
  __Pyx_INCREF(__pyx_int_3857003729);
  __Pyx_GIVEREF(__pyx_int_3857003729);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_3857003729);
  __Pyx_INCREF(__pyx_int_4059105529);
  __Pyx_GIVEREF(__pyx_int_4059105529);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_4059105529);
  __Pyx_INCREF(__pyx_int_1903268834);
  __Pyx_GIVEREF(__pyx_int_1903268834);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_1903268834);
  __Pyx_INCREF(__pyx_int_3638064043);
  __Pyx_GIVEREF(__pyx_int_3638064043);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_3638064043);
  __Pyx_INCREF(__pyx_int_825316194);
  __Pyx_GIVEREF(__pyx_int_825316194);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_825316194);
  __Pyx_INCREF(__pyx_int_353713962);
  __Pyx_GIVEREF(__pyx_int_353713962);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_353713962);
  __Pyx_INCREF(__pyx_int_67374088);
  __Pyx_GIVEREF(__pyx_int_67374088);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_67374088);
  __Pyx_INCREF(__pyx_int_3351728789);
  __Pyx_GIVEREF(__pyx_int_3351728789);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_3351728789);
  __Pyx_INCREF(__pyx_int_589522246);
  __Pyx_GIVEREF(__pyx_int_589522246);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_589522246);
  __Pyx_INCREF(__pyx_int_3284360861);
  __Pyx_GIVEREF(__pyx_int_3284360861);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_3284360861);
  __Pyx_INCREF(__pyx_int_404236336);
  __Pyx_GIVEREF(__pyx_int_404236336);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_404236336);
  __Pyx_INCREF(__pyx_int_2526454071);
  __Pyx_GIVEREF(__pyx_int_2526454071);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_2526454071);
  __Pyx_INCREF(__pyx_int_84217610);
  __Pyx_GIVEREF(__pyx_int_84217610);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_84217610);
  __Pyx_INCREF(__pyx_int_2593830191);
  __Pyx_GIVEREF(__pyx_int_2593830191);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_2593830191);
  __Pyx_INCREF(__pyx_int_117901582);
  __Pyx_GIVEREF(__pyx_int_117901582);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_117901582);
  __Pyx_INCREF(__pyx_int_303183396);
  __Pyx_GIVEREF(__pyx_int_303183396);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_303183396);
  __Pyx_INCREF(__pyx_int_2155911963);
  __Pyx_GIVEREF(__pyx_int_2155911963);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2155911963);
  __Pyx_INCREF(__pyx_int_3806477791);
  __Pyx_GIVEREF(__pyx_int_3806477791);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_3806477791);
  __Pyx_INCREF(__pyx_int_3958056653);
  __Pyx_GIVEREF(__pyx_int_3958056653);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_3958056653);
  __Pyx_INCREF(__pyx_int_656894286);
  __Pyx_GIVEREF(__pyx_int_656894286);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_656894286);
  __Pyx_INCREF(__pyx_int_2998062463);
  __Pyx_GIVEREF(__pyx_int_2998062463);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_2998062463);
  __Pyx_INCREF(__pyx_int_1970642922);
  __Pyx_GIVEREF(__pyx_int_1970642922);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_1970642922);
  __Pyx_INCREF(__pyx_int_151591698);
  __Pyx_GIVEREF(__pyx_int_151591698);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_151591698);
  __Pyx_INCREF(__pyx_int_2206440989);
  __Pyx_GIVEREF(__pyx_int_2206440989);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2206440989);
  __Pyx_INCREF(__pyx_int_741110872);
  __Pyx_GIVEREF(__pyx_int_741110872);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_741110872);
  __Pyx_INCREF(__pyx_int_437923380);
  __Pyx_GIVEREF(__pyx_int_437923380);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_437923380);
  __Pyx_INCREF(__pyx_int_454765878);
  __Pyx_GIVEREF(__pyx_int_454765878);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_454765878);
  __Pyx_INCREF(__pyx_int_1852748508);
  __Pyx_GIVEREF(__pyx_int_1852748508);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_1852748508);
  __Pyx_INCREF(__pyx_int_1515908788);
  __Pyx_GIVEREF(__pyx_int_1515908788);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_1515908788);
  __Pyx_INCREF(__pyx_int_2694904667);
  __Pyx_GIVEREF(__pyx_int_2694904667);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_2694904667);
  __Pyx_INCREF(__pyx_int_1381168804);
  __Pyx_GIVEREF(__pyx_int_1381168804);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_1381168804);
  __Pyx_INCREF(__pyx_int_993742198);
  __Pyx_GIVEREF(__pyx_int_993742198);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_993742198);
  __Pyx_INCREF(__pyx_int_3604373943);
  __Pyx_GIVEREF(__pyx_int_3604373943);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3604373943);
  __Pyx_INCREF(__pyx_int_3014905469);
  __Pyx_GIVEREF(__pyx_int_3014905469);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3014905469);
  __Pyx_INCREF(__pyx_int_690584402);
  __Pyx_GIVEREF(__pyx_int_690584402);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_690584402);
  __Pyx_INCREF(__pyx_int_3823320797);
  __Pyx_GIVEREF(__pyx_int_3823320797);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_3823320797);
  __Pyx_INCREF(__pyx_int_791638366);
  __Pyx_GIVEREF(__pyx_int_791638366);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_791638366);
  __Pyx_INCREF(__pyx_int_2223281939);
  __Pyx_GIVEREF(__pyx_int_2223281939);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_2223281939);
  __Pyx_INCREF(__pyx_int_1398011302);
  __Pyx_GIVEREF(__pyx_int_1398011302);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_1398011302);
  __Pyx_INCREF(__pyx_int_3520161977);
  __Pyx_GIVEREF(__pyx_int_3520161977);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_3520161977);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_3991743681);
  __Pyx_GIVEREF(__pyx_int_3991743681);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_3991743681);
  __Pyx_INCREF(__pyx_int_538992704);
  __Pyx_GIVEREF(__pyx_int_538992704);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_538992704);
  __Pyx_INCREF(__pyx_int_4244381667);
  __Pyx_GIVEREF(__pyx_int_4244381667);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_4244381667);
  __Pyx_INCREF(__pyx_int_2981218425);
  __Pyx_GIVEREF(__pyx_int_2981218425);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_2981218425);
  __Pyx_INCREF(__pyx_int_1532751286);
  __Pyx_GIVEREF(__pyx_int_1532751286);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_1532751286);
  __Pyx_INCREF(__pyx_int_1785380564);
  __Pyx_GIVEREF(__pyx_int_1785380564);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_1785380564);
  __Pyx_INCREF(__pyx_int_3419096717);
  __Pyx_GIVEREF(__pyx_int_3419096717);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3419096717);
  __Pyx_INCREF(__pyx_int_3200178535);
  __Pyx_GIVEREF(__pyx_int_3200178535);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3200178535);
  __Pyx_INCREF(__pyx_int_960056178);
  __Pyx_GIVEREF(__pyx_int_960056178);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_960056178);
  __Pyx_INCREF(__pyx_int_1246420628);
  __Pyx_GIVEREF(__pyx_int_1246420628);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_1246420628);
  __Pyx_INCREF(__pyx_int_1280103576);
  __Pyx_GIVEREF(__pyx_int_1280103576);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_1280103576);
  __Pyx_INCREF(__pyx_int_1482221744);
  __Pyx_GIVEREF(__pyx_int_1482221744);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_1482221744);
  __Pyx_INCREF(__pyx_int_3486468741);
  __Pyx_GIVEREF(__pyx_int_3486468741);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_3486468741);
  __Pyx_INCREF(__pyx_int_3503319995);
  __Pyx_GIVEREF(__pyx_int_3503319995);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_3503319995);
  __Pyx_INCREF(__pyx_int_4025428677);
  __Pyx_GIVEREF(__pyx_int_4025428677);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_4025428677);
  __Pyx_INCREF(__pyx_int_2863326543);
  __Pyx_GIVEREF(__pyx_int_2863326543);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_2863326543);
  __Pyx_INCREF(__pyx_int_4227536621);
  __Pyx_GIVEREF(__pyx_int_4227536621);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_4227536621);
  __Pyx_INCREF(__pyx_int_1128514950);
  __Pyx_GIVEREF(__pyx_int_1128514950);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_1128514950);
  __Pyx_INCREF(__pyx_int_1296947098);
  __Pyx_GIVEREF(__pyx_int_1296947098);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_1296947098);
  __Pyx_INCREF(__pyx_int_859002214);
  __Pyx_GIVEREF(__pyx_int_859002214);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_859002214);
  __Pyx_INCREF(__pyx_int_2240123921);
  __Pyx_GIVEREF(__pyx_int_2240123921);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_2240123921);
  __Pyx_INCREF(__pyx_int_1162203018);
  __Pyx_GIVEREF(__pyx_int_1162203018);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_1162203018);
  __Pyx_INCREF(__pyx_int_4193849577);
  __Pyx_GIVEREF(__pyx_int_4193849577);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_4193849577);
  __Pyx_INCREF(__pyx_int_33687044);
  __Pyx_GIVEREF(__pyx_int_33687044);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_33687044);
  __Pyx_INCREF(__pyx_int_2139062782);
  __Pyx_GIVEREF(__pyx_int_2139062782);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_2139062782);
  __Pyx_INCREF(__pyx_int_1347481760);
  __Pyx_GIVEREF(__pyx_int_1347481760);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_1347481760);
  __Pyx_INCREF(__pyx_int_1010582648);
  __Pyx_GIVEREF(__pyx_int_1010582648);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_1010582648);
  __Pyx_INCREF(__pyx_int_2678045221);
  __Pyx_GIVEREF(__pyx_int_2678045221);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_2678045221);
  __Pyx_INCREF(__pyx_int_2829640523);
  __Pyx_GIVEREF(__pyx_int_2829640523);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_2829640523);
  __Pyx_INCREF(__pyx_int_1364325282);
  __Pyx_GIVEREF(__pyx_int_1364325282);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_1364325282);
  __Pyx_INCREF(__pyx_int_2745433693);
  __Pyx_GIVEREF(__pyx_int_2745433693);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_2745433693);
  __Pyx_INCREF(__pyx_int_1077985408);
  __Pyx_GIVEREF(__pyx_int_1077985408);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_1077985408);
  __Pyx_INCREF(__pyx_int_2408548869);
  __Pyx_GIVEREF(__pyx_int_2408548869);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2408548869);
  __Pyx_INCREF(__pyx_int_2459086143);
  __Pyx_GIVEREF(__pyx_int_2459086143);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_2459086143);
  __Pyx_INCREF(__pyx_int_2644360225);
  __Pyx_GIVEREF(__pyx_int_2644360225);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_2644360225);
  __Pyx_INCREF(__pyx_int_943212656);
  __Pyx_GIVEREF(__pyx_int_943212656);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_943212656);
  __Pyx_INCREF(__pyx_int_4126475505);
  __Pyx_GIVEREF(__pyx_int_4126475505);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_4126475505);
  __Pyx_INCREF(__pyx_int_3166494563);
  __Pyx_GIVEREF(__pyx_int_3166494563);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3166494563);
  __Pyx_INCREF(__pyx_int_3065430391);
  __Pyx_GIVEREF(__pyx_int_3065430391);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3065430391);
  __Pyx_INCREF(__pyx_int_3671750063);
  __Pyx_GIVEREF(__pyx_int_3671750063);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_3671750063);
  __Pyx_INCREF(__pyx_int_555836226);
  __Pyx_GIVEREF(__pyx_int_555836226);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_555836226);
  __Pyx_INCREF(__pyx_int_269496352);
  __Pyx_GIVEREF(__pyx_int_269496352);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_269496352);
  __Pyx_INCREF(__pyx_int_4294908645);
  __Pyx_GIVEREF(__pyx_int_4294908645);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_4294908645);
  __Pyx_INCREF(__pyx_int_4092792573);
  __Pyx_GIVEREF(__pyx_int_4092792573);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_4092792573);
  __Pyx_INCREF(__pyx_int_3537006015);
  __Pyx_GIVEREF(__pyx_int_3537006015);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_3537006015);
  __Pyx_INCREF(__pyx_int_3452783745);
  __Pyx_GIVEREF(__pyx_int_3452783745);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_3452783745);
  __Pyx_INCREF(__pyx_int_202118168);
  __Pyx_GIVEREF(__pyx_int_202118168);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_202118168);
  __Pyx_INCREF(__pyx_int_320025894);
  __Pyx_GIVEREF(__pyx_int_320025894);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_320025894);
  __Pyx_INCREF(__pyx_int_3974901699);
  __Pyx_GIVEREF(__pyx_int_3974901699);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_3974901699);
  __Pyx_INCREF(__pyx_int_1600119230);
  __Pyx_GIVEREF(__pyx_int_1600119230);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_1600119230);
  __Pyx_INCREF(__pyx_int_2543297077);
  __Pyx_GIVEREF(__pyx_int_2543297077);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_2543297077);
  __Pyx_INCREF(__pyx_int_1145359496);
  __Pyx_GIVEREF(__pyx_int_1145359496);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1145359496);
  __Pyx_INCREF(__pyx_int_387397934);
  __Pyx_GIVEREF(__pyx_int_387397934);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_387397934);
  __Pyx_INCREF(__pyx_int_3301201811);
  __Pyx_GIVEREF(__pyx_int_3301201811);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_3301201811);
  __Pyx_INCREF(__pyx_int_2812801621);
  __Pyx_GIVEREF(__pyx_int_2812801621);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_2812801621);
  __Pyx_INCREF(__pyx_int_2122220284);
  __Pyx_GIVEREF(__pyx_int_2122220284);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_2122220284);
  __Pyx_INCREF(__pyx_int_1027426170);
  __Pyx_GIVEREF(__pyx_int_1027426170);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_1027426170);
  __Pyx_INCREF(__pyx_int_1684319432);
  __Pyx_GIVEREF(__pyx_int_1684319432);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_1684319432);
  __Pyx_INCREF(__pyx_int_1566435258);
  __Pyx_GIVEREF(__pyx_int_1566435258);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_1566435258);
  __Pyx_INCREF(__pyx_int_421079858);
  __Pyx_GIVEREF(__pyx_int_421079858);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_421079858);
  __Pyx_INCREF(__pyx_int_1936954854);
  __Pyx_GIVEREF(__pyx_int_1936954854);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_1936954854);
  __Pyx_INCREF(__pyx_int_1616945344);
  __Pyx_GIVEREF(__pyx_int_1616945344);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_1616945344);
  __Pyx_INCREF(__pyx_int_2172753945);
  __Pyx_GIVEREF(__pyx_int_2172753945);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_2172753945);
  __Pyx_INCREF(__pyx_int_1330631070);
  __Pyx_GIVEREF(__pyx_int_1330631070);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_1330631070);
  __Pyx_INCREF(__pyx_int_3705438115);
  __Pyx_GIVEREF(__pyx_int_3705438115);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_3705438115);
  __Pyx_INCREF(__pyx_int_572679748);
  __Pyx_GIVEREF(__pyx_int_572679748);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_572679748);
  __Pyx_INCREF(__pyx_int_707427924);
  __Pyx_GIVEREF(__pyx_int_707427924);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_707427924);
  __Pyx_INCREF(__pyx_int_2425400123);
  __Pyx_GIVEREF(__pyx_int_2425400123);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2425400123);
  __Pyx_INCREF(__pyx_int_2290647819);
  __Pyx_GIVEREF(__pyx_int_2290647819);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_2290647819);
  __Pyx_INCREF(__pyx_int_1179044492);
  __Pyx_GIVEREF(__pyx_int_1179044492);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_1179044492);
  __Pyx_INCREF(__pyx_int_4008585671);
  __Pyx_GIVEREF(__pyx_int_4008585671);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_4008585671);
  __Pyx_INCREF(__pyx_int_3099120491);
  __Pyx_GIVEREF(__pyx_int_3099120491);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_3099120491);
  __Pyx_INCREF(__pyx_int_336870440);
  __Pyx_GIVEREF(__pyx_int_336870440);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_336870440);
  __Pyx_INCREF(__pyx_int_3739122087);
  __Pyx_GIVEREF(__pyx_int_3739122087);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_3739122087);
  __Pyx_INCREF(__pyx_int_1583276732);
  __Pyx_GIVEREF(__pyx_int_1583276732);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_1583276732);
  __Pyx_INCREF(__pyx_int_185277718);
  __Pyx_GIVEREF(__pyx_int_185277718);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_185277718);
  __Pyx_INCREF(__pyx_int_3688593069);
  __Pyx_GIVEREF(__pyx_int_3688593069);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_3688593069);
  __Pyx_INCREF(__pyx_int_3772791771);
  __Pyx_GIVEREF(__pyx_int_3772791771);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_3772791771);
  __Pyx_INCREF(__pyx_int_842159716);
  __Pyx_GIVEREF(__pyx_int_842159716);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_842159716);
  __Pyx_INCREF(__pyx_int_976899700);
  __Pyx_GIVEREF(__pyx_int_976899700);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_976899700);
  __Pyx_INCREF(__pyx_int_168435220);
  __Pyx_GIVEREF(__pyx_int_168435220);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_168435220);
  __Pyx_INCREF(__pyx_int_1229577106);
  __Pyx_GIVEREF(__pyx_int_1229577106);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_1229577106);
  __Pyx_INCREF(__pyx_int_101059084);
  __Pyx_GIVEREF(__pyx_int_101059084);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_101059084);
  __Pyx_INCREF(__pyx_int_606366792);
  __Pyx_GIVEREF(__pyx_int_606366792);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_606366792);
  __Pyx_INCREF(__pyx_int_1549591736);
  __Pyx_GIVEREF(__pyx_int_1549591736);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_1549591736);
  __Pyx_INCREF(__pyx_int_3267517855);
  __Pyx_GIVEREF(__pyx_int_3267517855);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_3267517855);
  __Pyx_INCREF(__pyx_int_3553849021);
  __Pyx_GIVEREF(__pyx_int_3553849021);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_3553849021);
  __Pyx_INCREF(__pyx_int_2897014595);
  __Pyx_GIVEREF(__pyx_int_2897014595);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_2897014595);
  __Pyx_INCREF(__pyx_int_1650632388);
  __Pyx_GIVEREF(__pyx_int_1650632388);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_1650632388);
  __Pyx_INCREF(__pyx_int_2442242105);
  __Pyx_GIVEREF(__pyx_int_2442242105);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_2442242105);
  __Pyx_INCREF(__pyx_int_2509612081);
  __Pyx_GIVEREF(__pyx_int_2509612081);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_2509612081);
  __Pyx_INCREF(__pyx_int_3840161747);
  __Pyx_GIVEREF(__pyx_int_3840161747);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_3840161747);
  __Pyx_INCREF(__pyx_int_2038008818);
  __Pyx_GIVEREF(__pyx_int_2038008818);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2038008818);
  __Pyx_INCREF(__pyx_int_3890688725);
  __Pyx_GIVEREF(__pyx_int_3890688725);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_3890688725);
  __Pyx_INCREF(__pyx_int_3368567691);
  __Pyx_GIVEREF(__pyx_int_3368567691);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_3368567691);
  __Pyx_INCREF(__pyx_int_926374254);
  __Pyx_GIVEREF(__pyx_int_926374254);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_926374254);
  __Pyx_INCREF(__pyx_int_1835907034);
  __Pyx_GIVEREF(__pyx_int_1835907034);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_1835907034);
  __Pyx_INCREF(__pyx_int_2374863873);
  __Pyx_GIVEREF(__pyx_int_2374863873);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2374863873);
  __Pyx_INCREF(__pyx_int_3587531953);
  __Pyx_GIVEREF(__pyx_int_3587531953);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_3587531953);
  __Pyx_INCREF(__pyx_int_1313788572);
  __Pyx_GIVEREF(__pyx_int_1313788572);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1313788572);
  __Pyx_INCREF(__pyx_int_2846482505);
  __Pyx_GIVEREF(__pyx_int_2846482505);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_2846482505);
  __Pyx_INCREF(__pyx_int_1819063512);
  __Pyx_GIVEREF(__pyx_int_1819063512);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_1819063512);
  __Pyx_INCREF(__pyx_int_1448540844);
  __Pyx_GIVEREF(__pyx_int_1448540844);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_1448540844);
  __Pyx_INCREF(__pyx_int_4109633523);
  __Pyx_GIVEREF(__pyx_int_4109633523);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_4109633523);
  __Pyx_INCREF(__pyx_int_3941213647);
  __Pyx_GIVEREF(__pyx_int_3941213647);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_3941213647);
  __Pyx_INCREF(__pyx_int_1701162954);
  __Pyx_GIVEREF(__pyx_int_1701162954);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_1701162954);
  __Pyx_INCREF(__pyx_int_2054852340);
  __Pyx_GIVEREF(__pyx_int_2054852340);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_2054852340);
  __Pyx_INCREF(__pyx_int_2930698567);
  __Pyx_GIVEREF(__pyx_int_2930698567);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_2930698567);
  __Pyx_INCREF(__pyx_int_134748176);
  __Pyx_GIVEREF(__pyx_int_134748176);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_134748176);
  __Pyx_INCREF(__pyx_int_3132806511);
  __Pyx_GIVEREF(__pyx_int_3132806511);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3132806511);
  __Pyx_INCREF(__pyx_int_2021165296);
  __Pyx_GIVEREF(__pyx_int_2021165296);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_2021165296);
  __Pyx_INCREF(__pyx_int_623210314);
  __Pyx_GIVEREF(__pyx_int_623210314);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_623210314);
  __Pyx_INCREF(__pyx_int_774795868);
  __Pyx_GIVEREF(__pyx_int_774795868);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_774795868);
  __Pyx_INCREF(__pyx_int_471606328);
  __Pyx_GIVEREF(__pyx_int_471606328);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_471606328);
  __Pyx_INCREF(__pyx_int_2795958615);
  __Pyx_GIVEREF(__pyx_int_2795958615);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_2795958615);
  __Pyx_INCREF(__pyx_int_3031746419);
  __Pyx_GIVEREF(__pyx_int_3031746419);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_3031746419);
  __Pyx_INCREF(__pyx_int_3334885783);
  __Pyx_GIVEREF(__pyx_int_3334885783);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_3334885783);
  __Pyx_INCREF(__pyx_int_3907527627);
  __Pyx_GIVEREF(__pyx_int_3907527627);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3907527627);
  __Pyx_INCREF(__pyx_int_3722280097);
  __Pyx_GIVEREF(__pyx_int_3722280097);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_3722280097);
  __Pyx_INCREF(__pyx_int_1953799400);
  __Pyx_GIVEREF(__pyx_int_1953799400);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_1953799400);
  __Pyx_INCREF(__pyx_int_522133822);
  __Pyx_GIVEREF(__pyx_int_522133822);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_522133822);
  __Pyx_INCREF(__pyx_int_1263263126);
  __Pyx_GIVEREF(__pyx_int_1263263126);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_1263263126);
  __Pyx_INCREF(__pyx_int_3183336545);
  __Pyx_GIVEREF(__pyx_int_3183336545);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3183336545);
  __Pyx_INCREF(__pyx_int_2341176845);
  __Pyx_GIVEREF(__pyx_int_2341176845);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_2341176845);
  __Pyx_INCREF(__pyx_int_2324333839);
  __Pyx_GIVEREF(__pyx_int_2324333839);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_2324333839);
  __Pyx_INCREF(__pyx_int_1886425312);
  __Pyx_GIVEREF(__pyx_int_1886425312);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_1886425312);
  __Pyx_INCREF(__pyx_int_1044267644);
  __Pyx_GIVEREF(__pyx_int_1044267644);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1044267644);
  __Pyx_INCREF(__pyx_int_3048588401);
  __Pyx_GIVEREF(__pyx_int_3048588401);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_3048588401);
  __Pyx_INCREF(__pyx_int_1718004428);
  __Pyx_GIVEREF(__pyx_int_1718004428);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_1718004428);
  __Pyx_INCREF(__pyx_int_1212733584);
  __Pyx_GIVEREF(__pyx_int_1212733584);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_1212733584);
  __Pyx_INCREF(__pyx_int_50529542);
  __Pyx_GIVEREF(__pyx_int_50529542);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_50529542);
  __Pyx_INCREF(__pyx_int_4143317495);
  __Pyx_GIVEREF(__pyx_int_4143317495);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_4143317495);
  __Pyx_INCREF(__pyx_int_235803164);
  __Pyx_GIVEREF(__pyx_int_235803164);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_235803164);
  __Pyx_INCREF(__pyx_int_1633788866);
  __Pyx_GIVEREF(__pyx_int_1633788866);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_1633788866);
  __Pyx_INCREF(__pyx_int_892690282);
  __Pyx_GIVEREF(__pyx_int_892690282);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_892690282);
  __Pyx_INCREF(__pyx_int_1465383342);
  __Pyx_GIVEREF(__pyx_int_1465383342);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1465383342);
  __Pyx_INCREF(__pyx_int_3115962473);
  __Pyx_GIVEREF(__pyx_int_3115962473);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_3115962473);
  __Pyx_INCREF(__pyx_int_2256965911);
  __Pyx_GIVEREF(__pyx_int_2256965911);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_2256965911);
  __Pyx_INCREF(__pyx_int_3250673817);
  __Pyx_GIVEREF(__pyx_int_3250673817);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_3250673817);
  __Pyx_INCREF(__pyx_int_488449850);
  __Pyx_GIVEREF(__pyx_int_488449850);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_488449850);
  __Pyx_INCREF(__pyx_int_2661202215);
  __Pyx_GIVEREF(__pyx_int_2661202215);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_2661202215);
  __Pyx_INCREF(__pyx_int_3789633753);
  __Pyx_GIVEREF(__pyx_int_3789633753);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_3789633753);
  __Pyx_INCREF(__pyx_int_4177007595);
  __Pyx_GIVEREF(__pyx_int_4177007595);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_4177007595);
  __Pyx_INCREF(__pyx_int_2560144171);
  __Pyx_GIVEREF(__pyx_int_2560144171);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_2560144171);
  __Pyx_INCREF(__pyx_int_286339874);
  __Pyx_GIVEREF(__pyx_int_286339874);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_286339874);
  __Pyx_INCREF(__pyx_int_1768537042);
  __Pyx_GIVEREF(__pyx_int_1768537042);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_1768537042);
  __Pyx_INCREF(__pyx_int_3654906025);
  __Pyx_GIVEREF(__pyx_int_3654906025);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_3654906025);
  __Pyx_INCREF(__pyx_int_2391705863);
  __Pyx_GIVEREF(__pyx_int_2391705863);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_2391705863);
  __Pyx_INCREF(__pyx_int_2492770099);
  __Pyx_GIVEREF(__pyx_int_2492770099);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2492770099);
  __Pyx_INCREF(__pyx_int_2610673197);
  __Pyx_GIVEREF(__pyx_int_2610673197);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_2610673197);
  __Pyx_INCREF(__pyx_int_505291324);
  __Pyx_GIVEREF(__pyx_int_505291324);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_505291324);
  __Pyx_INCREF(__pyx_int_2273808917);
  __Pyx_GIVEREF(__pyx_int_2273808917);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_2273808917);
  __Pyx_INCREF(__pyx_int_3924369609);
  __Pyx_GIVEREF(__pyx_int_3924369609);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_3924369609);
  __Pyx_INCREF(__pyx_int_3469625735);
  __Pyx_GIVEREF(__pyx_int_3469625735);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_3469625735);
  __Pyx_INCREF(__pyx_int_1431699370);
  __Pyx_GIVEREF(__pyx_int_1431699370);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1431699370);
  __Pyx_INCREF(__pyx_int_673740880);
  __Pyx_GIVEREF(__pyx_int_673740880);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_673740880);
  __Pyx_INCREF(__pyx_int_3755965093);
  __Pyx_GIVEREF(__pyx_int_3755965093);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_3755965093);
  __Pyx_INCREF(__pyx_int_2358021891);
  __Pyx_GIVEREF(__pyx_int_2358021891);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_2358021891);
  __Pyx_INCREF(__pyx_int_2711746649);
  __Pyx_GIVEREF(__pyx_int_2711746649);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_2711746649);
  __Pyx_INCREF(__pyx_int_2307489801);
  __Pyx_GIVEREF(__pyx_int_2307489801);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_2307489801);
  __Pyx_INCREF(__pyx_int_218961690);
  __Pyx_GIVEREF(__pyx_int_218961690);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_218961690);
  __Pyx_INCREF(__pyx_int_3217021541);
  __Pyx_GIVEREF(__pyx_int_3217021541);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3217021541);
  __Pyx_INCREF(__pyx_int_3873845719);
  __Pyx_GIVEREF(__pyx_int_3873845719);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3873845719);
  __Pyx_INCREF(__pyx_int_1111672452);
  __Pyx_GIVEREF(__pyx_int_1111672452);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_1111672452);
  __Pyx_INCREF(__pyx_int_1751693520);
  __Pyx_GIVEREF(__pyx_int_1751693520);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_1751693520);
  __Pyx_INCREF(__pyx_int_1094828930);
  __Pyx_GIVEREF(__pyx_int_1094828930);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_1094828930);
  __Pyx_INCREF(__pyx_int_2576986153);
  __Pyx_GIVEREF(__pyx_int_2576986153);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_2576986153);
  __Pyx_INCREF(__pyx_int_757954394);
  __Pyx_GIVEREF(__pyx_int_757954394);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_757954394);
  __Pyx_INCREF(__pyx_int_252645662);
  __Pyx_GIVEREF(__pyx_int_252645662);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_252645662);
  __Pyx_INCREF(__pyx_int_2964376443);
  __Pyx_GIVEREF(__pyx_int_2964376443);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2964376443);
  __Pyx_INCREF(__pyx_int_1414855848);
  __Pyx_GIVEREF(__pyx_int_1414855848);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_1414855848);
  __Pyx_INCREF(__pyx_int_3149649517);
  __Pyx_GIVEREF(__pyx_int_3149649517);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_3149649517);
  __Pyx_INCREF(__pyx_int_370555436);
  __Pyx_GIVEREF(__pyx_int_370555436);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_370555436);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T4, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":74
 * 
 *     # Transformations for decryption ~
 *     T5 = [ 0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742 ]             # <<<<<<<<<<<<<<
 *     T6 = [ 0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857 ]
 *     T7 = [ 0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8 ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1374988112);
  __Pyx_GIVEREF(__pyx_int_1374988112);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1374988112);
  __Pyx_INCREF(__pyx_int_2118214995);
  __Pyx_GIVEREF(__pyx_int_2118214995);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2118214995);
  __Pyx_INCREF(__pyx_int_437757123);
  __Pyx_GIVEREF(__pyx_int_437757123);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_437757123);
  __Pyx_INCREF(__pyx_int_975658646);
  __Pyx_GIVEREF(__pyx_int_975658646);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_975658646);
  __Pyx_INCREF(__pyx_int_1001089995);
  __Pyx_GIVEREF(__pyx_int_1001089995);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_1001089995);
  __Pyx_INCREF(__pyx_int_530400753);
  __Pyx_GIVEREF(__pyx_int_530400753);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_530400753);
  __Pyx_INCREF(__pyx_int_2902087851);
  __Pyx_GIVEREF(__pyx_int_2902087851);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_2902087851);
  __Pyx_INCREF(__pyx_int_1273168787);
  __Pyx_GIVEREF(__pyx_int_1273168787);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_1273168787);
  __Pyx_INCREF(__pyx_int_540080725);
  __Pyx_GIVEREF(__pyx_int_540080725);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_540080725);
  __Pyx_INCREF(__pyx_int_2910219766);
  __Pyx_GIVEREF(__pyx_int_2910219766);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_2910219766);
  __Pyx_INCREF(__pyx_int_2295101073);
  __Pyx_GIVEREF(__pyx_int_2295101073);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_2295101073);
  __Pyx_INCREF(__pyx_int_4110568485);
  __Pyx_GIVEREF(__pyx_int_4110568485);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_4110568485);
  __Pyx_INCREF(__pyx_int_1340463100);
  __Pyx_GIVEREF(__pyx_int_1340463100);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_1340463100);
  __Pyx_INCREF(__pyx_int_3307916247);
  __Pyx_GIVEREF(__pyx_int_3307916247);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3307916247);
  __Pyx_INCREF(__pyx_int_641025152);
  __Pyx_GIVEREF(__pyx_int_641025152);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_641025152);
  __Pyx_INCREF(__pyx_int_3043140495);
  __Pyx_GIVEREF(__pyx_int_3043140495);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_3043140495);
  __Pyx_INCREF(__pyx_int_3736164937);
  __Pyx_GIVEREF(__pyx_int_3736164937);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_3736164937);
  __Pyx_INCREF(__pyx_int_632953703);
  __Pyx_GIVEREF(__pyx_int_632953703);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_632953703);
  __Pyx_INCREF(__pyx_int_1172967064);
  __Pyx_GIVEREF(__pyx_int_1172967064);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_1172967064);
  __Pyx_INCREF(__pyx_int_1576976609);
  __Pyx_GIVEREF(__pyx_int_1576976609);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_1576976609);
  __Pyx_INCREF(__pyx_int_3274667266);
  __Pyx_GIVEREF(__pyx_int_3274667266);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_3274667266);
  __Pyx_INCREF(__pyx_int_2169303058);
  __Pyx_GIVEREF(__pyx_int_2169303058);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_2169303058);
  __Pyx_INCREF(__pyx_int_2370213795);
  __Pyx_GIVEREF(__pyx_int_2370213795);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2370213795);
  __Pyx_INCREF(__pyx_int_1809054150);
  __Pyx_GIVEREF(__pyx_int_1809054150);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_1809054150);
  __Pyx_INCREF(__pyx_int_59727847);
  __Pyx_GIVEREF(__pyx_int_59727847);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_59727847);
  __Pyx_INCREF(__pyx_int_361929877);
  __Pyx_GIVEREF(__pyx_int_361929877);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_361929877);
  __Pyx_INCREF(__pyx_int_3211623147);
  __Pyx_GIVEREF(__pyx_int_3211623147);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_3211623147);
  __Pyx_INCREF(__pyx_int_2505202138);
  __Pyx_GIVEREF(__pyx_int_2505202138);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_2505202138);
  __Pyx_INCREF(__pyx_int_3569255213);
  __Pyx_GIVEREF(__pyx_int_3569255213);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_3569255213);
  __Pyx_INCREF(__pyx_int_1484005843);
  __Pyx_GIVEREF(__pyx_int_1484005843);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_1484005843);
  __Pyx_INCREF(__pyx_int_1239443753);
  __Pyx_GIVEREF(__pyx_int_1239443753);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_1239443753);
  __Pyx_INCREF(__pyx_int_2395588676);
  __Pyx_GIVEREF(__pyx_int_2395588676);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_2395588676);
  __Pyx_INCREF(__pyx_int_1975683434);
  __Pyx_GIVEREF(__pyx_int_1975683434);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_1975683434);
  __Pyx_INCREF(__pyx_int_4102977912);
  __Pyx_GIVEREF(__pyx_int_4102977912);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_4102977912);
  __Pyx_INCREF(__pyx_int_2572697195);
  __Pyx_GIVEREF(__pyx_int_2572697195);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_2572697195);
  __Pyx_INCREF(__pyx_int_666464733);
  __Pyx_GIVEREF(__pyx_int_666464733);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_666464733);
  __Pyx_INCREF(__pyx_int_3202437046);
  __Pyx_GIVEREF(__pyx_int_3202437046);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_3202437046);
  __Pyx_INCREF(__pyx_int_4035489047);
  __Pyx_GIVEREF(__pyx_int_4035489047);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_4035489047);
  __Pyx_INCREF(__pyx_int_3374361702);
  __Pyx_GIVEREF(__pyx_int_3374361702);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_3374361702);
  __Pyx_INCREF(__pyx_int_2110667444);
  __Pyx_GIVEREF(__pyx_int_2110667444);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_2110667444);
  __Pyx_INCREF(__pyx_int_1675577880);
  __Pyx_GIVEREF(__pyx_int_1675577880);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_1675577880);
  __Pyx_INCREF(__pyx_int_3843699074);
  __Pyx_GIVEREF(__pyx_int_3843699074);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_3843699074);
  __Pyx_INCREF(__pyx_int_2538681184);
  __Pyx_GIVEREF(__pyx_int_2538681184);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_2538681184);
  __Pyx_INCREF(__pyx_int_1649639237);
  __Pyx_GIVEREF(__pyx_int_1649639237);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_1649639237);
  __Pyx_INCREF(__pyx_int_2976151520);
  __Pyx_GIVEREF(__pyx_int_2976151520);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_2976151520);
  __Pyx_INCREF(__pyx_int_3144396420);
  __Pyx_GIVEREF(__pyx_int_3144396420);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_3144396420);
  __Pyx_INCREF(__pyx_int_4269907996);
  __Pyx_GIVEREF(__pyx_int_4269907996);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_4269907996);
  __Pyx_INCREF(__pyx_int_4178062228);
  __Pyx_GIVEREF(__pyx_int_4178062228);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_4178062228);
  __Pyx_INCREF(__pyx_int_1883793496);
  __Pyx_GIVEREF(__pyx_int_1883793496);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1883793496);
  __Pyx_INCREF(__pyx_int_2403728665);
  __Pyx_GIVEREF(__pyx_int_2403728665);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_2403728665);
  __Pyx_INCREF(__pyx_int_2497604743);
  __Pyx_GIVEREF(__pyx_int_2497604743);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_2497604743);
  __Pyx_INCREF(__pyx_int_1383856311);
  __Pyx_GIVEREF(__pyx_int_1383856311);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_1383856311);
  __Pyx_INCREF(__pyx_int_2876494627);
  __Pyx_GIVEREF(__pyx_int_2876494627);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_2876494627);
  __Pyx_INCREF(__pyx_int_1917518562);
  __Pyx_GIVEREF(__pyx_int_1917518562);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_1917518562);
  __Pyx_INCREF(__pyx_int_3810496343);
  __Pyx_GIVEREF(__pyx_int_3810496343);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_3810496343);
  __Pyx_INCREF(__pyx_int_1716890410);
  __Pyx_GIVEREF(__pyx_int_1716890410);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_1716890410);
  __Pyx_INCREF(__pyx_int_3001755655);
  __Pyx_GIVEREF(__pyx_int_3001755655);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_3001755655);
  __Pyx_INCREF(__pyx_int_800440835);
  __Pyx_GIVEREF(__pyx_int_800440835);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_800440835);
  __Pyx_INCREF(__pyx_int_2261089178);
  __Pyx_GIVEREF(__pyx_int_2261089178);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2261089178);
  __Pyx_INCREF(__pyx_int_3543599269);
  __Pyx_GIVEREF(__pyx_int_3543599269);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_3543599269);
  __Pyx_INCREF(__pyx_int_807962610);
  __Pyx_GIVEREF(__pyx_int_807962610);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_807962610);
  __Pyx_INCREF(__pyx_int_599762354);
  __Pyx_GIVEREF(__pyx_int_599762354);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_599762354);
  __Pyx_INCREF(__pyx_int_33778362);
  __Pyx_GIVEREF(__pyx_int_33778362);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_33778362);
  __Pyx_INCREF(__pyx_int_3977675356);
  __Pyx_GIVEREF(__pyx_int_3977675356);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_3977675356);
  __Pyx_INCREF(__pyx_int_2328828971);
  __Pyx_GIVEREF(__pyx_int_2328828971);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_2328828971);
  __Pyx_INCREF(__pyx_int_2809771154);
  __Pyx_GIVEREF(__pyx_int_2809771154);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2809771154);
  __Pyx_INCREF(__pyx_int_4077384432);
  __Pyx_GIVEREF(__pyx_int_4077384432);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_4077384432);
  __Pyx_INCREF(__pyx_int_1315562145);
  __Pyx_GIVEREF(__pyx_int_1315562145);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_1315562145);
  __Pyx_INCREF(__pyx_int_1708848333);
  __Pyx_GIVEREF(__pyx_int_1708848333);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_1708848333);
  __Pyx_INCREF(__pyx_int_101039829);
  __Pyx_GIVEREF(__pyx_int_101039829);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_101039829);
  __Pyx_INCREF(__pyx_int_3509871135);
  __Pyx_GIVEREF(__pyx_int_3509871135);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_3509871135);
  __Pyx_INCREF(__pyx_int_3299278474);
  __Pyx_GIVEREF(__pyx_int_3299278474);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_3299278474);
  __Pyx_INCREF(__pyx_int_875451293);
  __Pyx_GIVEREF(__pyx_int_875451293);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_875451293);
  __Pyx_INCREF(__pyx_int_2733856160);
  __Pyx_GIVEREF(__pyx_int_2733856160);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_2733856160);
  __Pyx_INCREF(__pyx_int_92987698);
  __Pyx_GIVEREF(__pyx_int_92987698);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_92987698);
  __Pyx_INCREF(__pyx_int_2767645557);
  __Pyx_GIVEREF(__pyx_int_2767645557);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_2767645557);
  __Pyx_INCREF(__pyx_int_193195065);
  __Pyx_GIVEREF(__pyx_int_193195065);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_193195065);
  __Pyx_INCREF(__pyx_int_1080094634);
  __Pyx_GIVEREF(__pyx_int_1080094634);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_1080094634);
  __Pyx_INCREF(__pyx_int_1584504582);
  __Pyx_GIVEREF(__pyx_int_1584504582);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_1584504582);
  __Pyx_INCREF(__pyx_int_3178106961);
  __Pyx_GIVEREF(__pyx_int_3178106961);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_3178106961);
  __Pyx_INCREF(__pyx_int_1042385657);
  __Pyx_GIVEREF(__pyx_int_1042385657);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_1042385657);
  __Pyx_INCREF(__pyx_int_2531067453);
  __Pyx_GIVEREF(__pyx_int_2531067453);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_2531067453);
  __Pyx_INCREF(__pyx_int_3711829422);
  __Pyx_GIVEREF(__pyx_int_3711829422);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_3711829422);
  __Pyx_INCREF(__pyx_int_1306967366);
  __Pyx_GIVEREF(__pyx_int_1306967366);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_1306967366);
  __Pyx_INCREF(__pyx_int_2438237621);
  __Pyx_GIVEREF(__pyx_int_2438237621);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_2438237621);
  __Pyx_INCREF(__pyx_int_1908694277);
  __Pyx_GIVEREF(__pyx_int_1908694277);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_1908694277);
  __Pyx_INCREF(__pyx_int_67556463);
  __Pyx_GIVEREF(__pyx_int_67556463);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_67556463);
  __Pyx_INCREF(__pyx_int_1615861247);
  __Pyx_GIVEREF(__pyx_int_1615861247);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_1615861247);
  __Pyx_INCREF(__pyx_int_429456164);
  __Pyx_GIVEREF(__pyx_int_429456164);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_429456164);
  __Pyx_INCREF(__pyx_int_3602770327);
  __Pyx_GIVEREF(__pyx_int_3602770327);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3602770327);
  __Pyx_INCREF(__pyx_int_2302690252);
  __Pyx_GIVEREF(__pyx_int_2302690252);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_2302690252);
  __Pyx_INCREF(__pyx_int_1742315127);
  __Pyx_GIVEREF(__pyx_int_1742315127);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_1742315127);
  __Pyx_INCREF(__pyx_int_2968011453);
  __Pyx_GIVEREF(__pyx_int_2968011453);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_2968011453);
  __Pyx_INCREF(__pyx_int_126454664);
  __Pyx_GIVEREF(__pyx_int_126454664);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_126454664);
  __Pyx_INCREF(__pyx_int_3877198648);
  __Pyx_GIVEREF(__pyx_int_3877198648);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_3877198648);
  __Pyx_INCREF(__pyx_int_2043211483);
  __Pyx_GIVEREF(__pyx_int_2043211483);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_2043211483);
  __Pyx_INCREF(__pyx_int_2709260871);
  __Pyx_GIVEREF(__pyx_int_2709260871);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_2709260871);
  __Pyx_INCREF(__pyx_int_2084704233);
  __Pyx_GIVEREF(__pyx_int_2084704233);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_2084704233);
  __Pyx_INCREF(__pyx_int_4169408201);
  __Pyx_GIVEREF(__pyx_int_4169408201);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_4169408201);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_159417987);
  __Pyx_GIVEREF(__pyx_int_159417987);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_159417987);
  __Pyx_INCREF(__pyx_int_841739592);
  __Pyx_GIVEREF(__pyx_int_841739592);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_841739592);
  __Pyx_INCREF(__pyx_int_504459436);
  __Pyx_GIVEREF(__pyx_int_504459436);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_504459436);
  __Pyx_INCREF(__pyx_int_1817866830);
  __Pyx_GIVEREF(__pyx_int_1817866830);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1817866830);
  __Pyx_INCREF(__pyx_int_4245618683);
  __Pyx_GIVEREF(__pyx_int_4245618683);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_4245618683);
  __Pyx_INCREF(__pyx_int_260388950);
  __Pyx_GIVEREF(__pyx_int_260388950);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_260388950);
  __Pyx_INCREF(__pyx_int_1034867998);
  __Pyx_GIVEREF(__pyx_int_1034867998);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_1034867998);
  __Pyx_INCREF(__pyx_int_908933415);
  __Pyx_GIVEREF(__pyx_int_908933415);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_908933415);
  __Pyx_INCREF(__pyx_int_168810852);
  __Pyx_GIVEREF(__pyx_int_168810852);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_168810852);
  __Pyx_INCREF(__pyx_int_1750902305);
  __Pyx_GIVEREF(__pyx_int_1750902305);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_1750902305);
  __Pyx_INCREF(__pyx_int_2606453969);
  __Pyx_GIVEREF(__pyx_int_2606453969);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_2606453969);
  __Pyx_INCREF(__pyx_int_607530554);
  __Pyx_GIVEREF(__pyx_int_607530554);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_607530554);
  __Pyx_INCREF(__pyx_int_202008497);
  __Pyx_GIVEREF(__pyx_int_202008497);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_202008497);
  __Pyx_INCREF(__pyx_int_2472011535);
  __Pyx_GIVEREF(__pyx_int_2472011535);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_2472011535);
  __Pyx_INCREF(__pyx_int_3035535058);
  __Pyx_GIVEREF(__pyx_int_3035535058);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_3035535058);
  __Pyx_INCREF(__pyx_int_463180190);
  __Pyx_GIVEREF(__pyx_int_463180190);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_463180190);
  __Pyx_INCREF(__pyx_int_2160117071);
  __Pyx_GIVEREF(__pyx_int_2160117071);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_2160117071);
  __Pyx_INCREF(__pyx_int_1641816226);
  __Pyx_GIVEREF(__pyx_int_1641816226);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_1641816226);
  __Pyx_INCREF(__pyx_int_1517767529);
  __Pyx_GIVEREF(__pyx_int_1517767529);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_1517767529);
  __Pyx_INCREF(__pyx_int_470948374);
  __Pyx_GIVEREF(__pyx_int_470948374);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_470948374);
  __Pyx_INCREF(__pyx_int_3801332234);
  __Pyx_GIVEREF(__pyx_int_3801332234);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3801332234);
  __Pyx_INCREF(__pyx_int_3231722213);
  __Pyx_GIVEREF(__pyx_int_3231722213);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3231722213);
  __Pyx_INCREF(__pyx_int_1008918595);
  __Pyx_GIVEREF(__pyx_int_1008918595);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_1008918595);
  __Pyx_INCREF(__pyx_int_303765277);
  __Pyx_GIVEREF(__pyx_int_303765277);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_303765277);
  __Pyx_INCREF(__pyx_int_235474187);
  __Pyx_GIVEREF(__pyx_int_235474187);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_235474187);
  __Pyx_INCREF(__pyx_int_4069246893);
  __Pyx_GIVEREF(__pyx_int_4069246893);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_4069246893);
  __Pyx_INCREF(__pyx_int_766945465);
  __Pyx_GIVEREF(__pyx_int_766945465);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_766945465);
  __Pyx_INCREF(__pyx_int_337553864);
  __Pyx_GIVEREF(__pyx_int_337553864);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_337553864);
  __Pyx_INCREF(__pyx_int_1475418501);
  __Pyx_GIVEREF(__pyx_int_1475418501);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_1475418501);
  __Pyx_INCREF(__pyx_int_2943682380);
  __Pyx_GIVEREF(__pyx_int_2943682380);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_2943682380);
  __Pyx_INCREF(__pyx_int_4003061179);
  __Pyx_GIVEREF(__pyx_int_4003061179);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_4003061179);
  __Pyx_INCREF(__pyx_int_2743034109);
  __Pyx_GIVEREF(__pyx_int_2743034109);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_2743034109);
  __Pyx_INCREF(__pyx_int_4144047775);
  __Pyx_GIVEREF(__pyx_int_4144047775);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_4144047775);
  __Pyx_INCREF(__pyx_int_1551037884);
  __Pyx_GIVEREF(__pyx_int_1551037884);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_1551037884);
  __Pyx_INCREF(__pyx_int_1147550661);
  __Pyx_GIVEREF(__pyx_int_1147550661);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1147550661);
  __Pyx_INCREF(__pyx_int_1543208500);
  __Pyx_GIVEREF(__pyx_int_1543208500);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_1543208500);
  __Pyx_INCREF(__pyx_int_2336434550);
  __Pyx_GIVEREF(__pyx_int_2336434550);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_2336434550);
  __Pyx_INCREF(__pyx_int_3408119516);
  __Pyx_GIVEREF(__pyx_int_3408119516);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_3408119516);
  __Pyx_INCREF(__pyx_int_3069049960);
  __Pyx_GIVEREF(__pyx_int_3069049960);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_3069049960);
  __Pyx_INCREF(__pyx_int_3102011747);
  __Pyx_GIVEREF(__pyx_int_3102011747);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_3102011747);
  __Pyx_INCREF(__pyx_int_3610369226);
  __Pyx_GIVEREF(__pyx_int_3610369226);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_3610369226);
  __Pyx_INCREF(__pyx_int_1113818384);
  __Pyx_GIVEREF(__pyx_int_1113818384);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_1113818384);
  __Pyx_INCREF(__pyx_int_328671808);
  __Pyx_GIVEREF(__pyx_int_328671808);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_328671808);
  __Pyx_INCREF(__pyx_int_2227573024);
  __Pyx_GIVEREF(__pyx_int_2227573024);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_2227573024);
  __Pyx_INCREF(__pyx_int_2236228733);
  __Pyx_GIVEREF(__pyx_int_2236228733);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_2236228733);
  __Pyx_INCREF(__pyx_int_3535486456);
  __Pyx_GIVEREF(__pyx_int_3535486456);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_3535486456);
  __Pyx_INCREF(__pyx_int_2935566865);
  __Pyx_GIVEREF(__pyx_int_2935566865);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_2935566865);
  __Pyx_INCREF(__pyx_int_3341394285);
  __Pyx_GIVEREF(__pyx_int_3341394285);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_3341394285);
  __Pyx_INCREF(__pyx_int_496906059);
  __Pyx_GIVEREF(__pyx_int_496906059);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_496906059);
  __Pyx_INCREF(__pyx_int_3702665459);
  __Pyx_GIVEREF(__pyx_int_3702665459);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_3702665459);
  __Pyx_INCREF(__pyx_int_226906860);
  __Pyx_GIVEREF(__pyx_int_226906860);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_226906860);
  __Pyx_INCREF(__pyx_int_2009195472);
  __Pyx_GIVEREF(__pyx_int_2009195472);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_2009195472);
  __Pyx_INCREF(__pyx_int_733156972);
  __Pyx_GIVEREF(__pyx_int_733156972);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_733156972);
  __Pyx_INCREF(__pyx_int_2842737049);
  __Pyx_GIVEREF(__pyx_int_2842737049);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_2842737049);
  __Pyx_INCREF(__pyx_int_294930682);
  __Pyx_GIVEREF(__pyx_int_294930682);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_294930682);
  __Pyx_INCREF(__pyx_int_1206477858);
  __Pyx_GIVEREF(__pyx_int_1206477858);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_1206477858);
  __Pyx_INCREF(__pyx_int_2835123396);
  __Pyx_GIVEREF(__pyx_int_2835123396);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_2835123396);
  __Pyx_INCREF(__pyx_int_2700099354);
  __Pyx_GIVEREF(__pyx_int_2700099354);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_2700099354);
  __Pyx_INCREF(__pyx_int_1451044056);
  __Pyx_GIVEREF(__pyx_int_1451044056);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_1451044056);
  __Pyx_INCREF(__pyx_int_573804783);
  __Pyx_GIVEREF(__pyx_int_573804783);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_573804783);
  __Pyx_INCREF(__pyx_int_2269728455);
  __Pyx_GIVEREF(__pyx_int_2269728455);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_2269728455);
  __Pyx_INCREF(__pyx_int_3644379585);
  __Pyx_GIVEREF(__pyx_int_3644379585);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_3644379585);
  __Pyx_INCREF(__pyx_int_2362090238);
  __Pyx_GIVEREF(__pyx_int_2362090238);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_2362090238);
  __Pyx_INCREF(__pyx_int_2564033334);
  __Pyx_GIVEREF(__pyx_int_2564033334);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_2564033334);
  __Pyx_INCREF(__pyx_int_2801107407);
  __Pyx_GIVEREF(__pyx_int_2801107407);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_2801107407);
  __Pyx_INCREF(__pyx_int_2776292904);
  __Pyx_GIVEREF(__pyx_int_2776292904);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_2776292904);
  __Pyx_INCREF(__pyx_int_3669462566);
  __Pyx_GIVEREF(__pyx_int_3669462566);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_3669462566);
  __Pyx_INCREF(__pyx_int_1068351396);
  __Pyx_GIVEREF(__pyx_int_1068351396);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_1068351396);
  __Pyx_INCREF(__pyx_int_742039012);
  __Pyx_GIVEREF(__pyx_int_742039012);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_742039012);
  __Pyx_INCREF(__pyx_int_1350078989);
  __Pyx_GIVEREF(__pyx_int_1350078989);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_1350078989);
  __Pyx_INCREF(__pyx_int_1784663195);
  __Pyx_GIVEREF(__pyx_int_1784663195);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_1784663195);
  __Pyx_INCREF(__pyx_int_1417561698);
  __Pyx_GIVEREF(__pyx_int_1417561698);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_1417561698);
  __Pyx_INCREF(__pyx_int_4136440770);
  __Pyx_GIVEREF(__pyx_int_4136440770);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_4136440770);
  __Pyx_INCREF(__pyx_int_2430122216);
  __Pyx_GIVEREF(__pyx_int_2430122216);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_2430122216);
  __Pyx_INCREF(__pyx_int_775550814);
  __Pyx_GIVEREF(__pyx_int_775550814);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_775550814);
  __Pyx_INCREF(__pyx_int_2193862645);
  __Pyx_GIVEREF(__pyx_int_2193862645);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2193862645);
  __Pyx_INCREF(__pyx_int_2673705150);
  __Pyx_GIVEREF(__pyx_int_2673705150);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_2673705150);
  __Pyx_INCREF(__pyx_int_1775276924);
  __Pyx_GIVEREF(__pyx_int_1775276924);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_1775276924);
  __Pyx_INCREF(__pyx_int_1876241833);
  __Pyx_GIVEREF(__pyx_int_1876241833);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_1876241833);
  __Pyx_INCREF(__pyx_int_3475313331);
  __Pyx_GIVEREF(__pyx_int_3475313331);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_3475313331);
  __Pyx_INCREF(__pyx_int_3366754619);
  __Pyx_GIVEREF(__pyx_int_3366754619);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_3366754619);
  __Pyx_INCREF(__pyx_int_270040487);
  __Pyx_GIVEREF(__pyx_int_270040487);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_270040487);
  __Pyx_INCREF(__pyx_int_3902563182);
  __Pyx_GIVEREF(__pyx_int_3902563182);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_3902563182);
  __Pyx_INCREF(__pyx_int_3678124923);
  __Pyx_GIVEREF(__pyx_int_3678124923);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_3678124923);
  __Pyx_INCREF(__pyx_int_3441850377);
  __Pyx_GIVEREF(__pyx_int_3441850377);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_3441850377);
  __Pyx_INCREF(__pyx_int_1851332852);
  __Pyx_GIVEREF(__pyx_int_1851332852);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_1851332852);
  __Pyx_INCREF(__pyx_int_3969562369);
  __Pyx_GIVEREF(__pyx_int_3969562369);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_3969562369);
  __Pyx_INCREF(__pyx_int_2203032232);
  __Pyx_GIVEREF(__pyx_int_2203032232);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_2203032232);
  __Pyx_INCREF(__pyx_int_3868552805);
  __Pyx_GIVEREF(__pyx_int_3868552805);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_3868552805);
  __Pyx_INCREF(__pyx_int_2868897406);
  __Pyx_GIVEREF(__pyx_int_2868897406);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_2868897406);
  __Pyx_INCREF(__pyx_int_566021896);
  __Pyx_GIVEREF(__pyx_int_566021896);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_566021896);
  __Pyx_INCREF(__pyx_int_4011190502);
  __Pyx_GIVEREF(__pyx_int_4011190502);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_4011190502);
  __Pyx_INCREF(__pyx_int_3135740889);
  __Pyx_GIVEREF(__pyx_int_3135740889);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3135740889);
  __Pyx_INCREF(__pyx_int_1248802510);
  __Pyx_GIVEREF(__pyx_int_1248802510);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_1248802510);
  __Pyx_INCREF(__pyx_int_3936291284);
  __Pyx_GIVEREF(__pyx_int_3936291284);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_3936291284);
  __Pyx_INCREF(__pyx_int_699432150);
  __Pyx_GIVEREF(__pyx_int_699432150);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_699432150);
  __Pyx_INCREF(__pyx_int_832877231);
  __Pyx_GIVEREF(__pyx_int_832877231);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_832877231);
  __Pyx_INCREF(__pyx_int_708780849);
  __Pyx_GIVEREF(__pyx_int_708780849);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_708780849);
  __Pyx_INCREF(__pyx_int_3332740144);
  __Pyx_GIVEREF(__pyx_int_3332740144);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_3332740144);
  __Pyx_INCREF(__pyx_int_899835584);
  __Pyx_GIVEREF(__pyx_int_899835584);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_899835584);
  __Pyx_INCREF(__pyx_int_1951317047);
  __Pyx_GIVEREF(__pyx_int_1951317047);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_1951317047);
  __Pyx_INCREF(__pyx_int_4236429990);
  __Pyx_GIVEREF(__pyx_int_4236429990);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_4236429990);
  __Pyx_INCREF(__pyx_int_3767586992);
  __Pyx_GIVEREF(__pyx_int_3767586992);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_3767586992);
  __Pyx_INCREF(__pyx_int_866637845);
  __Pyx_GIVEREF(__pyx_int_866637845);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_866637845);
  __Pyx_INCREF(__pyx_int_4043610186);
  __Pyx_GIVEREF(__pyx_int_4043610186);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_4043610186);
  __Pyx_INCREF(__pyx_int_1106041591);
  __Pyx_GIVEREF(__pyx_int_1106041591);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_1106041591);
  __Pyx_INCREF(__pyx_int_2144161806);
  __Pyx_GIVEREF(__pyx_int_2144161806);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_2144161806);
  __Pyx_INCREF(__pyx_int_395441711);
  __Pyx_GIVEREF(__pyx_int_395441711);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_395441711);
  __Pyx_INCREF(__pyx_int_1984812685);
  __Pyx_GIVEREF(__pyx_int_1984812685);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_1984812685);
  __Pyx_INCREF(__pyx_int_1139781709);
  __Pyx_GIVEREF(__pyx_int_1139781709);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1139781709);
  __Pyx_INCREF(__pyx_int_3433712980);
  __Pyx_GIVEREF(__pyx_int_3433712980);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_3433712980);
  __Pyx_INCREF(__pyx_int_3835036895);
  __Pyx_GIVEREF(__pyx_int_3835036895);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_3835036895);
  __Pyx_INCREF(__pyx_int_2664543715);
  __Pyx_GIVEREF(__pyx_int_2664543715);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_2664543715);
  __Pyx_INCREF(__pyx_int_1282050075);
  __Pyx_GIVEREF(__pyx_int_1282050075);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_1282050075);
  __Pyx_INCREF(__pyx_int_3240894392);
  __Pyx_GIVEREF(__pyx_int_3240894392);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_3240894392);
  __Pyx_INCREF(__pyx_int_1181045119);
  __Pyx_GIVEREF(__pyx_int_1181045119);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_1181045119);
  __Pyx_INCREF(__pyx_int_2640243204);
  __Pyx_GIVEREF(__pyx_int_2640243204);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_2640243204);
  __Pyx_INCREF(__pyx_int_25965917);
  __Pyx_GIVEREF(__pyx_int_25965917);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_25965917);
  __Pyx_INCREF(__pyx_int_4203181171);
  __Pyx_GIVEREF(__pyx_int_4203181171);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_4203181171);
  __Pyx_INCREF(__pyx_int_4211818798);
  __Pyx_GIVEREF(__pyx_int_4211818798);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_4211818798);
  __Pyx_INCREF(__pyx_int_3009879386);
  __Pyx_GIVEREF(__pyx_int_3009879386);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_3009879386);
  __Pyx_INCREF(__pyx_int_2463879762);
  __Pyx_GIVEREF(__pyx_int_2463879762);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_2463879762);
  __Pyx_INCREF(__pyx_int_3910161971);
  __Pyx_GIVEREF(__pyx_int_3910161971);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_3910161971);
  __Pyx_INCREF(__pyx_int_1842759443);
  __Pyx_GIVEREF(__pyx_int_1842759443);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_1842759443);
  __Pyx_INCREF(__pyx_int_2597806476);
  __Pyx_GIVEREF(__pyx_int_2597806476);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_2597806476);
  __Pyx_INCREF(__pyx_int_933301370);
  __Pyx_GIVEREF(__pyx_int_933301370);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_933301370);
  __Pyx_INCREF(__pyx_int_1509430414);
  __Pyx_GIVEREF(__pyx_int_1509430414);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_1509430414);
  __Pyx_INCREF(__pyx_int_3943906441);
  __Pyx_GIVEREF(__pyx_int_3943906441);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_3943906441);
  __Pyx_INCREF(__pyx_int_3467192302);
  __Pyx_GIVEREF(__pyx_int_3467192302);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_3467192302);
  __Pyx_INCREF(__pyx_int_3076639029);
  __Pyx_GIVEREF(__pyx_int_3076639029);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_3076639029);
  __Pyx_INCREF(__pyx_int_3776767469);
  __Pyx_GIVEREF(__pyx_int_3776767469);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_3776767469);
  __Pyx_INCREF(__pyx_int_2051518780);
  __Pyx_GIVEREF(__pyx_int_2051518780);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2051518780);
  __Pyx_INCREF(__pyx_int_2631065433);
  __Pyx_GIVEREF(__pyx_int_2631065433);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_2631065433);
  __Pyx_INCREF(__pyx_int_1441952575);
  __Pyx_GIVEREF(__pyx_int_1441952575);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1441952575);
  __Pyx_INCREF(__pyx_int_404016761);
  __Pyx_GIVEREF(__pyx_int_404016761);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_404016761);
  __Pyx_INCREF(__pyx_int_1942435775);
  __Pyx_GIVEREF(__pyx_int_1942435775);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_1942435775);
  __Pyx_INCREF(__pyx_int_1408749034);
  __Pyx_GIVEREF(__pyx_int_1408749034);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_1408749034);
  __Pyx_INCREF(__pyx_int_1610459739);
  __Pyx_GIVEREF(__pyx_int_1610459739);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1610459739);
  __Pyx_INCREF(__pyx_int_3745345300);
  __Pyx_GIVEREF(__pyx_int_3745345300);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_3745345300);
  __Pyx_INCREF(__pyx_int_2017778566);
  __Pyx_GIVEREF(__pyx_int_2017778566);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_2017778566);
  __Pyx_INCREF(__pyx_int_3400528769);
  __Pyx_GIVEREF(__pyx_int_3400528769);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_3400528769);
  __Pyx_INCREF(__pyx_int_3110650942);
  __Pyx_GIVEREF(__pyx_int_3110650942);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_3110650942);
  __Pyx_INCREF(__pyx_int_941896748);
  __Pyx_GIVEREF(__pyx_int_941896748);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_941896748);
  __Pyx_INCREF(__pyx_int_3265478751);
  __Pyx_GIVEREF(__pyx_int_3265478751);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_3265478751);
  __Pyx_INCREF(__pyx_int_371049330);
  __Pyx_GIVEREF(__pyx_int_371049330);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_371049330);
  __Pyx_INCREF(__pyx_int_3168937228);
  __Pyx_GIVEREF(__pyx_int_3168937228);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3168937228);
  __Pyx_INCREF(__pyx_int_675039627);
  __Pyx_GIVEREF(__pyx_int_675039627);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_675039627);
  __Pyx_INCREF(__pyx_int_4279080257);
  __Pyx_GIVEREF(__pyx_int_4279080257);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_4279080257);
  __Pyx_INCREF(__pyx_int_967311729);
  __Pyx_GIVEREF(__pyx_int_967311729);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_967311729);
  __Pyx_INCREF(__pyx_int_135050206);
  __Pyx_GIVEREF(__pyx_int_135050206);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_135050206);
  __Pyx_INCREF(__pyx_int_3635733660);
  __Pyx_GIVEREF(__pyx_int_3635733660);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_3635733660);
  __Pyx_INCREF(__pyx_int_1683407248);
  __Pyx_GIVEREF(__pyx_int_1683407248);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_1683407248);
  __Pyx_INCREF(__pyx_int_2076935265);
  __Pyx_GIVEREF(__pyx_int_2076935265);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2076935265);
  __Pyx_INCREF(__pyx_int_3576870512);
  __Pyx_GIVEREF(__pyx_int_3576870512);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_3576870512);
  __Pyx_INCREF(__pyx_int_1215061108);
  __Pyx_GIVEREF(__pyx_int_1215061108);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1215061108);
  __Pyx_INCREF(__pyx_int_3501741890);
  __Pyx_GIVEREF(__pyx_int_3501741890);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_3501741890);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T5, __pyx_t_1) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":75
 *     # Transformations for decryption ~
 *     T5 = [ 0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742 ]
 *     T6 = [ 0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857 ]             # <<<<<<<<<<<<<<
 *     T7 = [ 0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8 ]
 *     T8 = [ 0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0 ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1347548327);
  __Pyx_GIVEREF(__pyx_int_1347548327);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1347548327);
  __Pyx_INCREF(__pyx_int_1400783205);
  __Pyx_GIVEREF(__pyx_int_1400783205);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_1400783205);
  __Pyx_INCREF(__pyx_int_3273267108);
  __Pyx_GIVEREF(__pyx_int_3273267108);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_3273267108);
  __Pyx_INCREF(__pyx_int_2520393566);
  __Pyx_GIVEREF(__pyx_int_2520393566);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_2520393566);
  __Pyx_INCREF(__pyx_int_3409685355);
  __Pyx_GIVEREF(__pyx_int_3409685355);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_3409685355);
  __Pyx_INCREF(__pyx_int_4045380933);
  __Pyx_GIVEREF(__pyx_int_4045380933);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_4045380933);
  __Pyx_INCREF(__pyx_int_2880240216);
  __Pyx_GIVEREF(__pyx_int_2880240216);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_2880240216);
  __Pyx_INCREF(__pyx_int_2471224067);
  __Pyx_GIVEREF(__pyx_int_2471224067);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_2471224067);
  __Pyx_INCREF(__pyx_int_1428173050);
  __Pyx_GIVEREF(__pyx_int_1428173050);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1428173050);
  __Pyx_INCREF(__pyx_int_4138563181);
  __Pyx_GIVEREF(__pyx_int_4138563181);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_4138563181);
  __Pyx_INCREF(__pyx_int_2441661558);
  __Pyx_GIVEREF(__pyx_int_2441661558);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_2441661558);
  __Pyx_INCREF(__pyx_int_636813900);
  __Pyx_GIVEREF(__pyx_int_636813900);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_636813900);
  __Pyx_INCREF(__pyx_int_4233094615);
  __Pyx_GIVEREF(__pyx_int_4233094615);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_4233094615);
  __Pyx_INCREF(__pyx_int_3620022987);
  __Pyx_GIVEREF(__pyx_int_3620022987);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3620022987);
  __Pyx_INCREF(__pyx_int_2149987652);
  __Pyx_GIVEREF(__pyx_int_2149987652);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_2149987652);
  __Pyx_INCREF(__pyx_int_2411029155);
  __Pyx_GIVEREF(__pyx_int_2411029155);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_2411029155);
  __Pyx_INCREF(__pyx_int_1239331162);
  __Pyx_GIVEREF(__pyx_int_1239331162);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_1239331162);
  __Pyx_INCREF(__pyx_int_1730525723);
  __Pyx_GIVEREF(__pyx_int_1730525723);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_1730525723);
  __Pyx_INCREF(__pyx_int_2554718734);
  __Pyx_GIVEREF(__pyx_int_2554718734);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_2554718734);
  __Pyx_INCREF(__pyx_int_3781033664);
  __Pyx_GIVEREF(__pyx_int_3781033664);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_3781033664);
  __Pyx_INCREF(__pyx_int_46346101);
  __Pyx_GIVEREF(__pyx_int_46346101);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_46346101);
  __Pyx_INCREF(__pyx_int_310463728);
  __Pyx_GIVEREF(__pyx_int_310463728);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_310463728);
  __Pyx_INCREF(__pyx_int_2743944855);
  __Pyx_GIVEREF(__pyx_int_2743944855);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2743944855);
  __Pyx_INCREF(__pyx_int_3328955385);
  __Pyx_GIVEREF(__pyx_int_3328955385);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_3328955385);
  __Pyx_INCREF(__pyx_int_3875770207);
  __Pyx_GIVEREF(__pyx_int_3875770207);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_3875770207);
  __Pyx_INCREF(__pyx_int_2501218972);
  __Pyx_GIVEREF(__pyx_int_2501218972);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_2501218972);
  __Pyx_INCREF(__pyx_int_3955191162);
  __Pyx_GIVEREF(__pyx_int_3955191162);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_3955191162);
  __Pyx_INCREF(__pyx_int_3667219033);
  __Pyx_GIVEREF(__pyx_int_3667219033);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_3667219033);
  __Pyx_INCREF(__pyx_int_768917123);
  __Pyx_GIVEREF(__pyx_int_768917123);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_768917123);
  __Pyx_INCREF(__pyx_int_3545789473);
  __Pyx_GIVEREF(__pyx_int_3545789473);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_3545789473);
  __Pyx_INCREF(__pyx_int_692707433);
  __Pyx_GIVEREF(__pyx_int_692707433);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_692707433);
  __Pyx_INCREF(__pyx_int_1150208456);
  __Pyx_GIVEREF(__pyx_int_1150208456);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_1150208456);
  __Pyx_INCREF(__pyx_int_1786102409);
  __Pyx_GIVEREF(__pyx_int_1786102409);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_1786102409);
  __Pyx_INCREF(__pyx_int_2029293177);
  __Pyx_GIVEREF(__pyx_int_2029293177);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_2029293177);
  __Pyx_INCREF(__pyx_int_1805211710);
  __Pyx_GIVEREF(__pyx_int_1805211710);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_1805211710);
  __Pyx_INCREF(__pyx_int_3710368113);
  __Pyx_GIVEREF(__pyx_int_3710368113);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_3710368113);
  __Pyx_INCREF(__pyx_int_3065962831);
  __Pyx_GIVEREF(__pyx_int_3065962831);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_3065962831);
  __Pyx_INCREF(__pyx_int_401639597);
  __Pyx_GIVEREF(__pyx_int_401639597);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_401639597);
  __Pyx_INCREF(__pyx_int_1724457132);
  __Pyx_GIVEREF(__pyx_int_1724457132);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_1724457132);
  __Pyx_INCREF(__pyx_int_3028143674);
  __Pyx_GIVEREF(__pyx_int_3028143674);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_3028143674);
  __Pyx_INCREF(__pyx_int_409198410);
  __Pyx_GIVEREF(__pyx_int_409198410);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_409198410);
  __Pyx_INCREF(__pyx_int_2196052529);
  __Pyx_GIVEREF(__pyx_int_2196052529);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_2196052529);
  __Pyx_INCREF(__pyx_int_1620529459);
  __Pyx_GIVEREF(__pyx_int_1620529459);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_1620529459);
  __Pyx_INCREF(__pyx_int_1164071807);
  __Pyx_GIVEREF(__pyx_int_1164071807);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_1164071807);
  __Pyx_INCREF(__pyx_int_3769721975);
  __Pyx_GIVEREF(__pyx_int_3769721975);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_3769721975);
  __Pyx_INCREF(__pyx_int_2226875310);
  __Pyx_GIVEREF(__pyx_int_2226875310);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_2226875310);
  __Pyx_INCREF(__pyx_int_486441376);
  __Pyx_GIVEREF(__pyx_int_486441376);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_486441376);
  __Pyx_INCREF(__pyx_int_2499348523);
  __Pyx_GIVEREF(__pyx_int_2499348523);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_2499348523);
  __Pyx_INCREF(__pyx_int_1483753576);
  __Pyx_GIVEREF(__pyx_int_1483753576);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1483753576);
  __Pyx_INCREF(__pyx_int_428819965);
  __Pyx_GIVEREF(__pyx_int_428819965);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_428819965);
  __Pyx_INCREF(__pyx_int_2274680428);
  __Pyx_GIVEREF(__pyx_int_2274680428);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_2274680428);
  __Pyx_INCREF(__pyx_int_3075636216);
  __Pyx_GIVEREF(__pyx_int_3075636216);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_3075636216);
  __Pyx_INCREF(__pyx_int_598438867);
  __Pyx_GIVEREF(__pyx_int_598438867);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_598438867);
  __Pyx_INCREF(__pyx_int_3799141122);
  __Pyx_GIVEREF(__pyx_int_3799141122);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_3799141122);
  __Pyx_INCREF(__pyx_int_1474502543);
  __Pyx_GIVEREF(__pyx_int_1474502543);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_1474502543);
  __Pyx_INCREF(__pyx_int_711349675);
  __Pyx_GIVEREF(__pyx_int_711349675);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_711349675);
  __Pyx_INCREF(__pyx_int_129166120);
  __Pyx_GIVEREF(__pyx_int_129166120);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_129166120);
  __Pyx_INCREF(__pyx_int_53458370);
  __Pyx_GIVEREF(__pyx_int_53458370);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_53458370);
  __Pyx_INCREF(__pyx_int_2592523643);
  __Pyx_GIVEREF(__pyx_int_2592523643);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2592523643);
  __Pyx_INCREF(__pyx_int_2782082824);
  __Pyx_GIVEREF(__pyx_int_2782082824);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_2782082824);
  __Pyx_INCREF(__pyx_int_4063242375);
  __Pyx_GIVEREF(__pyx_int_4063242375);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_4063242375);
  __Pyx_INCREF(__pyx_int_2988687269);
  __Pyx_GIVEREF(__pyx_int_2988687269);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_2988687269);
  __Pyx_INCREF(__pyx_int_3120694122);
  __Pyx_GIVEREF(__pyx_int_3120694122);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_3120694122);
  __Pyx_INCREF(__pyx_int_1559041666);
  __Pyx_GIVEREF(__pyx_int_1559041666);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_1559041666);
  __Pyx_INCREF(__pyx_int_730517276);
  __Pyx_GIVEREF(__pyx_int_730517276);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_730517276);
  __Pyx_INCREF(__pyx_int_2460449204);
  __Pyx_GIVEREF(__pyx_int_2460449204);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2460449204);
  __Pyx_INCREF(__pyx_int_4042459122);
  __Pyx_GIVEREF(__pyx_int_4042459122);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_4042459122);
  __Pyx_INCREF(__pyx_int_2706270690);
  __Pyx_GIVEREF(__pyx_int_2706270690);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_2706270690);
  __Pyx_INCREF(__pyx_int_3446004468);
  __Pyx_GIVEREF(__pyx_int_3446004468);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_3446004468);
  __Pyx_INCREF(__pyx_int_3573941694);
  __Pyx_GIVEREF(__pyx_int_3573941694);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_3573941694);
  __Pyx_INCREF(__pyx_int_533804130);
  __Pyx_GIVEREF(__pyx_int_533804130);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_533804130);
  __Pyx_INCREF(__pyx_int_2328143614);
  __Pyx_GIVEREF(__pyx_int_2328143614);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_2328143614);
  __Pyx_INCREF(__pyx_int_2637442643);
  __Pyx_GIVEREF(__pyx_int_2637442643);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_2637442643);
  __Pyx_INCREF(__pyx_int_2695033685);
  __Pyx_GIVEREF(__pyx_int_2695033685);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_2695033685);
  __Pyx_INCREF(__pyx_int_839224033);
  __Pyx_GIVEREF(__pyx_int_839224033);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_839224033);
  __Pyx_INCREF(__pyx_int_1973745387);
  __Pyx_GIVEREF(__pyx_int_1973745387);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_1973745387);
  __Pyx_INCREF(__pyx_int_957055980);
  __Pyx_GIVEREF(__pyx_int_957055980);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_957055980);
  __Pyx_INCREF(__pyx_int_2856345839);
  __Pyx_GIVEREF(__pyx_int_2856345839);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_2856345839);
  __Pyx_INCREF(__pyx_int_106852767);
  __Pyx_GIVEREF(__pyx_int_106852767);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_106852767);
  __Pyx_INCREF(__pyx_int_1371368976);
  __Pyx_GIVEREF(__pyx_int_1371368976);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_1371368976);
  __Pyx_INCREF(__pyx_int_4181598602);
  __Pyx_GIVEREF(__pyx_int_4181598602);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_4181598602);
  __Pyx_INCREF(__pyx_int_1033297158);
  __Pyx_GIVEREF(__pyx_int_1033297158);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_1033297158);
  __Pyx_INCREF(__pyx_int_2933734917);
  __Pyx_GIVEREF(__pyx_int_2933734917);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_2933734917);
  __Pyx_INCREF(__pyx_int_1179510461);
  __Pyx_GIVEREF(__pyx_int_1179510461);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_1179510461);
  __Pyx_INCREF(__pyx_int_3046200461);
  __Pyx_GIVEREF(__pyx_int_3046200461);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_3046200461);
  __Pyx_INCREF(__pyx_int_91341917);
  __Pyx_GIVEREF(__pyx_int_91341917);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_91341917);
  __Pyx_INCREF(__pyx_int_1862534868);
  __Pyx_GIVEREF(__pyx_int_1862534868);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_1862534868);
  __Pyx_INCREF(__pyx_int_4284502037);
  __Pyx_GIVEREF(__pyx_int_4284502037);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_4284502037);
  __Pyx_INCREF(__pyx_int_605657339);
  __Pyx_GIVEREF(__pyx_int_605657339);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_605657339);
  __Pyx_INCREF(__pyx_int_2547432937);
  __Pyx_GIVEREF(__pyx_int_2547432937);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_2547432937);
  __Pyx_INCREF(__pyx_int_3431546947);
  __Pyx_GIVEREF(__pyx_int_3431546947);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3431546947);
  __Pyx_INCREF(__pyx_int_2003294622);
  __Pyx_GIVEREF(__pyx_int_2003294622);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_2003294622);
  __Pyx_INCREF(__pyx_int_3182487618);
  __Pyx_GIVEREF(__pyx_int_3182487618);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_3182487618);
  __Pyx_INCREF(__pyx_int_2282195339);
  __Pyx_GIVEREF(__pyx_int_2282195339);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_2282195339);
  __Pyx_INCREF(__pyx_int_954669403);
  __Pyx_GIVEREF(__pyx_int_954669403);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_954669403);
  __Pyx_INCREF(__pyx_int_3682191598);
  __Pyx_GIVEREF(__pyx_int_3682191598);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_3682191598);
  __Pyx_INCREF(__pyx_int_1201765386);
  __Pyx_GIVEREF(__pyx_int_1201765386);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_1201765386);
  __Pyx_INCREF(__pyx_int_3917234703);
  __Pyx_GIVEREF(__pyx_int_3917234703);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_3917234703);
  __Pyx_INCREF(__pyx_int_3388507166);
  __Pyx_GIVEREF(__pyx_int_3388507166);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_3388507166);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_2198438022);
  __Pyx_GIVEREF(__pyx_int_2198438022);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_2198438022);
  __Pyx_INCREF(__pyx_int_1211247597);
  __Pyx_GIVEREF(__pyx_int_1211247597);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_1211247597);
  __Pyx_INCREF(__pyx_int_2887651696);
  __Pyx_GIVEREF(__pyx_int_2887651696);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_2887651696);
  __Pyx_INCREF(__pyx_int_1315723890);
  __Pyx_GIVEREF(__pyx_int_1315723890);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1315723890);
  __Pyx_INCREF(__pyx_int_4227665663);
  __Pyx_GIVEREF(__pyx_int_4227665663);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_4227665663);
  __Pyx_INCREF(__pyx_int_1443857720);
  __Pyx_GIVEREF(__pyx_int_1443857720);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_1443857720);
  __Pyx_INCREF(__pyx_int_507358933);
  __Pyx_GIVEREF(__pyx_int_507358933);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_507358933);
  __Pyx_INCREF(__pyx_int_657861945);
  __Pyx_GIVEREF(__pyx_int_657861945);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_657861945);
  __Pyx_INCREF(__pyx_int_1678381017);
  __Pyx_GIVEREF(__pyx_int_1678381017);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_1678381017);
  __Pyx_INCREF(__pyx_int_560487590);
  __Pyx_GIVEREF(__pyx_int_560487590);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_560487590);
  __Pyx_INCREF(__pyx_int_3516619604);
  __Pyx_GIVEREF(__pyx_int_3516619604);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_3516619604);
  __Pyx_INCREF(__pyx_int_975451694);
  __Pyx_GIVEREF(__pyx_int_975451694);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_975451694);
  __Pyx_INCREF(__pyx_int_2970356327);
  __Pyx_GIVEREF(__pyx_int_2970356327);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_2970356327);
  __Pyx_INCREF(__pyx_int_261314535);
  __Pyx_GIVEREF(__pyx_int_261314535);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_261314535);
  __Pyx_INCREF(__pyx_int_3535072918);
  __Pyx_GIVEREF(__pyx_int_3535072918);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_3535072918);
  __Pyx_INCREF(__pyx_int_2652609425);
  __Pyx_GIVEREF(__pyx_int_2652609425);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2652609425);
  __Pyx_INCREF(__pyx_int_1333838021);
  __Pyx_GIVEREF(__pyx_int_1333838021);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_1333838021);
  __Pyx_INCREF(__pyx_int_2724322336);
  __Pyx_GIVEREF(__pyx_int_2724322336);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_2724322336);
  __Pyx_INCREF(__pyx_int_1767536459);
  __Pyx_GIVEREF(__pyx_int_1767536459);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_1767536459);
  __Pyx_INCREF(__pyx_int_370938394);
  __Pyx_GIVEREF(__pyx_int_370938394);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_370938394);
  __Pyx_INCREF(__pyx_int_182621114);
  __Pyx_GIVEREF(__pyx_int_182621114);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_182621114);
  __Pyx_INCREF(__pyx_int_3854606378);
  __Pyx_GIVEREF(__pyx_int_3854606378);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3854606378);
  __Pyx_INCREF(__pyx_int_1128014560);
  __Pyx_GIVEREF(__pyx_int_1128014560);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_1128014560);
  __Pyx_INCREF(__pyx_int_487725847);
  __Pyx_GIVEREF(__pyx_int_487725847);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_487725847);
  __Pyx_INCREF(__pyx_int_185469197);
  __Pyx_GIVEREF(__pyx_int_185469197);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_185469197);
  __Pyx_INCREF(__pyx_int_2918353863);
  __Pyx_GIVEREF(__pyx_int_2918353863);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_2918353863);
  __Pyx_INCREF(__pyx_int_3106780840);
  __Pyx_GIVEREF(__pyx_int_3106780840);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_3106780840);
  __Pyx_INCREF(__pyx_int_3356761769);
  __Pyx_GIVEREF(__pyx_int_3356761769);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_3356761769);
  __Pyx_INCREF(__pyx_int_2237133081);
  __Pyx_GIVEREF(__pyx_int_2237133081);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_2237133081);
  __Pyx_INCREF(__pyx_int_1286567175);
  __Pyx_GIVEREF(__pyx_int_1286567175);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_1286567175);
  __Pyx_INCREF(__pyx_int_3152976349);
  __Pyx_GIVEREF(__pyx_int_3152976349);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_3152976349);
  __Pyx_INCREF(__pyx_int_4255350624);
  __Pyx_GIVEREF(__pyx_int_4255350624);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_4255350624);
  __Pyx_INCREF(__pyx_int_2683765030);
  __Pyx_GIVEREF(__pyx_int_2683765030);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_2683765030);
  __Pyx_INCREF(__pyx_int_3160175349);
  __Pyx_GIVEREF(__pyx_int_3160175349);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_3160175349);
  __Pyx_INCREF(__pyx_int_3309594171);
  __Pyx_GIVEREF(__pyx_int_3309594171);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_3309594171);
  __Pyx_INCREF(__pyx_int_878443390);
  __Pyx_GIVEREF(__pyx_int_878443390);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_878443390);
  __Pyx_INCREF(__pyx_int_1988838185);
  __Pyx_GIVEREF(__pyx_int_1988838185);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_1988838185);
  __Pyx_INCREF(__pyx_int_3704300486);
  __Pyx_GIVEREF(__pyx_int_3704300486);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_3704300486);
  __Pyx_INCREF(__pyx_int_1756818940);
  __Pyx_GIVEREF(__pyx_int_1756818940);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_1756818940);
  __Pyx_INCREF(__pyx_int_1673061617);
  __Pyx_GIVEREF(__pyx_int_1673061617);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_1673061617);
  __Pyx_INCREF(__pyx_int_3403100636);
  __Pyx_GIVEREF(__pyx_int_3403100636);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_3403100636);
  __Pyx_INCREF(__pyx_int_272786309);
  __Pyx_GIVEREF(__pyx_int_272786309);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_272786309);
  __Pyx_INCREF(__pyx_int_1075025698);
  __Pyx_GIVEREF(__pyx_int_1075025698);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_1075025698);
  __Pyx_INCREF(__pyx_int_545572369);
  __Pyx_GIVEREF(__pyx_int_545572369);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_545572369);
  __Pyx_INCREF(__pyx_int_2105887268);
  __Pyx_GIVEREF(__pyx_int_2105887268);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_2105887268);
  __Pyx_INCREF(__pyx_int_4174560061);
  __Pyx_GIVEREF(__pyx_int_4174560061);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_4174560061);
  __Pyx_INCREF(__pyx_int_296679730);
  __Pyx_GIVEREF(__pyx_int_296679730);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_296679730);
  __Pyx_INCREF(__pyx_int_1841768865);
  __Pyx_GIVEREF(__pyx_int_1841768865);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_1841768865);
  __Pyx_INCREF(__pyx_int_1260232239);
  __Pyx_GIVEREF(__pyx_int_1260232239);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1260232239);
  __Pyx_INCREF(__pyx_int_4091327024);
  __Pyx_GIVEREF(__pyx_int_4091327024);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_4091327024);
  __Pyx_INCREF(__pyx_int_3960309330);
  __Pyx_GIVEREF(__pyx_int_3960309330);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_3960309330);
  __Pyx_INCREF(__pyx_int_3497509347);
  __Pyx_GIVEREF(__pyx_int_3497509347);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_3497509347);
  __Pyx_INCREF(__pyx_int_1814803222);
  __Pyx_GIVEREF(__pyx_int_1814803222);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_1814803222);
  __Pyx_INCREF(__pyx_int_2578018489);
  __Pyx_GIVEREF(__pyx_int_2578018489);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_2578018489);
  __Pyx_INCREF(__pyx_int_4195456072);
  __Pyx_GIVEREF(__pyx_int_4195456072);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_4195456072);
  __Pyx_INCREF(__pyx_int_575138148);
  __Pyx_GIVEREF(__pyx_int_575138148);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_575138148);
  __Pyx_INCREF(__pyx_int_3299409036);
  __Pyx_GIVEREF(__pyx_int_3299409036);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_3299409036);
  __Pyx_INCREF(__pyx_int_446754879);
  __Pyx_GIVEREF(__pyx_int_446754879);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_446754879);
  __Pyx_INCREF(__pyx_int_3629546796);
  __Pyx_GIVEREF(__pyx_int_3629546796);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_3629546796);
  __Pyx_INCREF(__pyx_int_4011996048);
  __Pyx_GIVEREF(__pyx_int_4011996048);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_4011996048);
  __Pyx_INCREF(__pyx_int_3347532110);
  __Pyx_GIVEREF(__pyx_int_3347532110);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_3347532110);
  __Pyx_INCREF(__pyx_int_3252238545);
  __Pyx_GIVEREF(__pyx_int_3252238545);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_3252238545);
  __Pyx_INCREF(__pyx_int_4270639778);
  __Pyx_GIVEREF(__pyx_int_4270639778);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_4270639778);
  __Pyx_INCREF(__pyx_int_915985419);
  __Pyx_GIVEREF(__pyx_int_915985419);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_915985419);
  __Pyx_INCREF(__pyx_int_3483825537);
  __Pyx_GIVEREF(__pyx_int_3483825537);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_3483825537);
  __Pyx_INCREF(__pyx_int_681933534);
  __Pyx_GIVEREF(__pyx_int_681933534);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_681933534);
  __Pyx_INCREF(__pyx_int_651868046);
  __Pyx_GIVEREF(__pyx_int_651868046);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_651868046);
  __Pyx_INCREF(__pyx_int_2755636671);
  __Pyx_GIVEREF(__pyx_int_2755636671);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_2755636671);
  __Pyx_INCREF(__pyx_int_3828103837);
  __Pyx_GIVEREF(__pyx_int_3828103837);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_3828103837);
  __Pyx_INCREF(__pyx_int_223377554);
  __Pyx_GIVEREF(__pyx_int_223377554);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_223377554);
  __Pyx_INCREF(__pyx_int_2607439820);
  __Pyx_GIVEREF(__pyx_int_2607439820);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_2607439820);
  __Pyx_INCREF(__pyx_int_1649704518);
  __Pyx_GIVEREF(__pyx_int_1649704518);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_1649704518);
  __Pyx_INCREF(__pyx_int_3270937875);
  __Pyx_GIVEREF(__pyx_int_3270937875);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_3270937875);
  __Pyx_INCREF(__pyx_int_3901806776);
  __Pyx_GIVEREF(__pyx_int_3901806776);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_3901806776);
  __Pyx_INCREF(__pyx_int_1580087799);
  __Pyx_GIVEREF(__pyx_int_1580087799);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_1580087799);
  __Pyx_INCREF(__pyx_int_4118987695);
  __Pyx_GIVEREF(__pyx_int_4118987695);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_4118987695);
  __Pyx_INCREF(__pyx_int_3198115200);
  __Pyx_GIVEREF(__pyx_int_3198115200);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_3198115200);
  __Pyx_INCREF(__pyx_int_2087309459);
  __Pyx_GIVEREF(__pyx_int_2087309459);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_2087309459);
  __Pyx_INCREF(__pyx_int_2842678573);
  __Pyx_GIVEREF(__pyx_int_2842678573);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_2842678573);
  __Pyx_INCREF(__pyx_int_3016697106);
  __Pyx_GIVEREF(__pyx_int_3016697106);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_3016697106);
  __Pyx_INCREF(__pyx_int_1003007129);
  __Pyx_GIVEREF(__pyx_int_1003007129);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_1003007129);
  __Pyx_INCREF(__pyx_int_2802849917);
  __Pyx_GIVEREF(__pyx_int_2802849917);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_2802849917);
  __Pyx_INCREF(__pyx_int_1860738147);
  __Pyx_GIVEREF(__pyx_int_1860738147);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1860738147);
  __Pyx_INCREF(__pyx_int_2077965243);
  __Pyx_GIVEREF(__pyx_int_2077965243);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_2077965243);
  __Pyx_INCREF(__pyx_int_164439672);
  __Pyx_GIVEREF(__pyx_int_164439672);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_164439672);
  __Pyx_INCREF(__pyx_int_4100872472);
  __Pyx_GIVEREF(__pyx_int_4100872472);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_4100872472);
  __Pyx_INCREF(__pyx_int_32283319);
  __Pyx_GIVEREF(__pyx_int_32283319);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_32283319);
  __Pyx_INCREF(__pyx_int_2827177882);
  __Pyx_GIVEREF(__pyx_int_2827177882);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_2827177882);
  __Pyx_INCREF(__pyx_int_1709610350);
  __Pyx_GIVEREF(__pyx_int_1709610350);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_1709610350);
  __Pyx_INCREF(__pyx_int_2125135846);
  __Pyx_GIVEREF(__pyx_int_2125135846);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_2125135846);
  __Pyx_INCREF(__pyx_int_136428751);
  __Pyx_GIVEREF(__pyx_int_136428751);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_136428751);
  __Pyx_INCREF(__pyx_int_3874428392);
  __Pyx_GIVEREF(__pyx_int_3874428392);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_3874428392);
  __Pyx_INCREF(__pyx_int_3652904859);
  __Pyx_GIVEREF(__pyx_int_3652904859);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3652904859);
  __Pyx_INCREF(__pyx_int_3460984630);
  __Pyx_GIVEREF(__pyx_int_3460984630);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_3460984630);
  __Pyx_INCREF(__pyx_int_3572145929);
  __Pyx_GIVEREF(__pyx_int_3572145929);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_3572145929);
  __Pyx_INCREF(__pyx_int_3593056380);
  __Pyx_GIVEREF(__pyx_int_3593056380);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_3593056380);
  __Pyx_INCREF(__pyx_int_2939266226);
  __Pyx_GIVEREF(__pyx_int_2939266226);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_2939266226);
  __Pyx_INCREF(__pyx_int_824852259);
  __Pyx_GIVEREF(__pyx_int_824852259);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_824852259);
  __Pyx_INCREF(__pyx_int_818324884);
  __Pyx_GIVEREF(__pyx_int_818324884);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_818324884);
  __Pyx_INCREF(__pyx_int_3224740454);
  __Pyx_GIVEREF(__pyx_int_3224740454);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_3224740454);
  __Pyx_INCREF(__pyx_int_930369212);
  __Pyx_GIVEREF(__pyx_int_930369212);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_930369212);
  __Pyx_INCREF(__pyx_int_2801566410);
  __Pyx_GIVEREF(__pyx_int_2801566410);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_2801566410);
  __Pyx_INCREF(__pyx_int_2967507152);
  __Pyx_GIVEREF(__pyx_int_2967507152);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_2967507152);
  __Pyx_INCREF(__pyx_int_355706840);
  __Pyx_GIVEREF(__pyx_int_355706840);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_355706840);
  __Pyx_INCREF(__pyx_int_1257309336);
  __Pyx_GIVEREF(__pyx_int_1257309336);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_1257309336);
  __Pyx_INCREF(__pyx_int_4148292826);
  __Pyx_GIVEREF(__pyx_int_4148292826);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_4148292826);
  __Pyx_INCREF(__pyx_int_243256656);
  __Pyx_GIVEREF(__pyx_int_243256656);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_243256656);
  __Pyx_INCREF(__pyx_int_790073846);
  __Pyx_GIVEREF(__pyx_int_790073846);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_790073846);
  __Pyx_INCREF(__pyx_int_2373340630);
  __Pyx_GIVEREF(__pyx_int_2373340630);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_2373340630);
  __Pyx_INCREF(__pyx_int_1296297904);
  __Pyx_GIVEREF(__pyx_int_1296297904);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1296297904);
  __Pyx_INCREF(__pyx_int_1422699085);
  __Pyx_GIVEREF(__pyx_int_1422699085);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_1422699085);
  __Pyx_INCREF(__pyx_int_3756299780);
  __Pyx_GIVEREF(__pyx_int_3756299780);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_3756299780);
  __Pyx_INCREF(__pyx_int_3818836405);
  __Pyx_GIVEREF(__pyx_int_3818836405);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_3818836405);
  __Pyx_INCREF(__pyx_int_457992840);
  __Pyx_GIVEREF(__pyx_int_457992840);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_457992840);
  __Pyx_INCREF(__pyx_int_3099667487);
  __Pyx_GIVEREF(__pyx_int_3099667487);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_3099667487);
  __Pyx_INCREF(__pyx_int_2135319889);
  __Pyx_GIVEREF(__pyx_int_2135319889);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_2135319889);
  __Pyx_INCREF(__pyx_int_77422314);
  __Pyx_GIVEREF(__pyx_int_77422314);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_77422314);
  __Pyx_INCREF(__pyx_int_1560382517);
  __Pyx_GIVEREF(__pyx_int_1560382517);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_1560382517);
  __Pyx_INCREF(__pyx_int_1945798516);
  __Pyx_GIVEREF(__pyx_int_1945798516);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1945798516);
  __Pyx_INCREF(__pyx_int_788204353);
  __Pyx_GIVEREF(__pyx_int_788204353);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_788204353);
  __Pyx_INCREF(__pyx_int_1521706781);
  __Pyx_GIVEREF(__pyx_int_1521706781);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_1521706781);
  __Pyx_INCREF(__pyx_int_1385356242);
  __Pyx_GIVEREF(__pyx_int_1385356242);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_1385356242);
  __Pyx_INCREF(__pyx_int_870912086);
  __Pyx_GIVEREF(__pyx_int_870912086);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_870912086);
  __Pyx_INCREF(__pyx_int_325965383);
  __Pyx_GIVEREF(__pyx_int_325965383);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_325965383);
  __Pyx_INCREF(__pyx_int_2358957921);
  __Pyx_GIVEREF(__pyx_int_2358957921);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_2358957921);
  __Pyx_INCREF(__pyx_int_2050466060);
  __Pyx_GIVEREF(__pyx_int_2050466060);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_2050466060);
  __Pyx_INCREF(__pyx_int_2388260884);
  __Pyx_GIVEREF(__pyx_int_2388260884);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_2388260884);
  __Pyx_INCREF(__pyx_int_2313884476);
  __Pyx_GIVEREF(__pyx_int_2313884476);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_2313884476);
  __Pyx_INCREF(__pyx_int_4006521127);
  __Pyx_GIVEREF(__pyx_int_4006521127);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_4006521127);
  __Pyx_INCREF(__pyx_int_901210569);
  __Pyx_GIVEREF(__pyx_int_901210569);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_901210569);
  __Pyx_INCREF(__pyx_int_3990953189);
  __Pyx_GIVEREF(__pyx_int_3990953189);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_3990953189);
  __Pyx_INCREF(__pyx_int_1014646705);
  __Pyx_GIVEREF(__pyx_int_1014646705);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_1014646705);
  __Pyx_INCREF(__pyx_int_1503449823);
  __Pyx_GIVEREF(__pyx_int_1503449823);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_1503449823);
  __Pyx_INCREF(__pyx_int_1062597235);
  __Pyx_GIVEREF(__pyx_int_1062597235);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1062597235);
  __Pyx_INCREF(__pyx_int_2031621326);
  __Pyx_GIVEREF(__pyx_int_2031621326);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_2031621326);
  __Pyx_INCREF(__pyx_int_3212035895);
  __Pyx_GIVEREF(__pyx_int_3212035895);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_3212035895);
  __Pyx_INCREF(__pyx_int_3931371469);
  __Pyx_GIVEREF(__pyx_int_3931371469);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_3931371469);
  __Pyx_INCREF(__pyx_int_1533017514);
  __Pyx_GIVEREF(__pyx_int_1533017514);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1533017514);
  __Pyx_INCREF(__pyx_int_350174575);
  __Pyx_GIVEREF(__pyx_int_350174575);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_350174575);
  __Pyx_INCREF(__pyx_int_2256028891);
  __Pyx_GIVEREF(__pyx_int_2256028891);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_2256028891);
  __Pyx_INCREF(__pyx_int_2177544179);
  __Pyx_GIVEREF(__pyx_int_2177544179);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_2177544179);
  __Pyx_INCREF(__pyx_int_1052338372);
  __Pyx_GIVEREF(__pyx_int_1052338372);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_1052338372);
  __Pyx_INCREF(__pyx_int_741876788);
  __Pyx_GIVEREF(__pyx_int_741876788);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_741876788);
  __Pyx_INCREF(__pyx_int_1606591296);
  __Pyx_GIVEREF(__pyx_int_1606591296);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_1606591296);
  __Pyx_INCREF(__pyx_int_1914052035);
  __Pyx_GIVEREF(__pyx_int_1914052035);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_1914052035);
  __Pyx_INCREF(__pyx_int_213705253);
  __Pyx_GIVEREF(__pyx_int_213705253);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_213705253);
  __Pyx_INCREF(__pyx_int_2334669897);
  __Pyx_GIVEREF(__pyx_int_2334669897);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_2334669897);
  __Pyx_INCREF(__pyx_int_1107234197);
  __Pyx_GIVEREF(__pyx_int_1107234197);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_1107234197);
  __Pyx_INCREF(__pyx_int_1899603969);
  __Pyx_GIVEREF(__pyx_int_1899603969);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_1899603969);
  __Pyx_INCREF(__pyx_int_3725069491);
  __Pyx_GIVEREF(__pyx_int_3725069491);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_3725069491);
  __Pyx_INCREF(__pyx_int_2631447780);
  __Pyx_GIVEREF(__pyx_int_2631447780);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_2631447780);
  __Pyx_INCREF(__pyx_int_2422494913);
  __Pyx_GIVEREF(__pyx_int_2422494913);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_2422494913);
  __Pyx_INCREF(__pyx_int_1635502980);
  __Pyx_GIVEREF(__pyx_int_1635502980);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_1635502980);
  __Pyx_INCREF(__pyx_int_1893020342);
  __Pyx_GIVEREF(__pyx_int_1893020342);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_1893020342);
  __Pyx_INCREF(__pyx_int_1950903388);
  __Pyx_GIVEREF(__pyx_int_1950903388);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1950903388);
  __Pyx_INCREF(__pyx_int_1120974935);
  __Pyx_GIVEREF(__pyx_int_1120974935);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_1120974935);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T6, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":76
 *     T5 = [ 0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742 ]
 *     T6 = [ 0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857 ]
 *     T7 = [ 0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8 ]             # <<<<<<<<<<<<<<
 *     T8 = [ 0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0 ]
 * 
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_2807058932);
  __Pyx_GIVEREF(__pyx_int_2807058932);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_2807058932);
  __Pyx_INCREF(__pyx_int_1699970625);
  __Pyx_GIVEREF(__pyx_int_1699970625);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_1699970625);
  __Pyx_INCREF(__pyx_int_2764249623);
  __Pyx_GIVEREF(__pyx_int_2764249623);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_2764249623);
  __Pyx_INCREF(__pyx_int_1586903591);
  __Pyx_GIVEREF(__pyx_int_1586903591);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_1586903591);
  __Pyx_INCREF(__pyx_int_1808481195);
  __Pyx_GIVEREF(__pyx_int_1808481195);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_1808481195);
  __Pyx_INCREF(__pyx_int_1173430173);
  __Pyx_GIVEREF(__pyx_int_1173430173);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_1173430173);
  __Pyx_INCREF(__pyx_int_1487645946);
  __Pyx_GIVEREF(__pyx_int_1487645946);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_1487645946);
  __Pyx_INCREF(__pyx_int_59984867);
  __Pyx_GIVEREF(__pyx_int_59984867);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_59984867);
  __Pyx_INCREF(__pyx_int_4199882800);
  __Pyx_GIVEREF(__pyx_int_4199882800);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_4199882800);
  __Pyx_INCREF(__pyx_int_1844882806);
  __Pyx_GIVEREF(__pyx_int_1844882806);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1844882806);
  __Pyx_INCREF(__pyx_int_1989249228);
  __Pyx_GIVEREF(__pyx_int_1989249228);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1989249228);
  __Pyx_INCREF(__pyx_int_1277555970);
  __Pyx_GIVEREF(__pyx_int_1277555970);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_1277555970);
  __Pyx_INCREF(__pyx_int_3623636965);
  __Pyx_GIVEREF(__pyx_int_3623636965);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_3623636965);
  __Pyx_INCREF(__pyx_int_3419915562);
  __Pyx_GIVEREF(__pyx_int_3419915562);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_3419915562);
  __Pyx_INCREF(__pyx_int_1149249077);
  __Pyx_GIVEREF(__pyx_int_1149249077);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_1149249077);
  __Pyx_INCREF(__pyx_int_2744104290);
  __Pyx_GIVEREF(__pyx_int_2744104290);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_2744104290);
  __Pyx_INCREF(__pyx_int_1514790577);
  __Pyx_GIVEREF(__pyx_int_1514790577);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_1514790577);
  __Pyx_INCREF(__pyx_int_459744698);
  __Pyx_GIVEREF(__pyx_int_459744698);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_459744698);
  __Pyx_INCREF(__pyx_int_244860394);
  __Pyx_GIVEREF(__pyx_int_244860394);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_244860394);
  __Pyx_INCREF(__pyx_int_3235995134);
  __Pyx_GIVEREF(__pyx_int_3235995134);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_3235995134);
  __Pyx_INCREF(__pyx_int_1963115311);
  __Pyx_GIVEREF(__pyx_int_1963115311);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_1963115311);
  __Pyx_INCREF(__pyx_int_4027744588);
  __Pyx_GIVEREF(__pyx_int_4027744588);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_4027744588);
  __Pyx_INCREF(__pyx_int_2544078150);
  __Pyx_GIVEREF(__pyx_int_2544078150);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2544078150);
  __Pyx_INCREF(__pyx_int_4190530515);
  __Pyx_GIVEREF(__pyx_int_4190530515);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_4190530515);
  __Pyx_INCREF(__pyx_int_1608975247);
  __Pyx_GIVEREF(__pyx_int_1608975247);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_1608975247);
  __Pyx_INCREF(__pyx_int_2627016082);
  __Pyx_GIVEREF(__pyx_int_2627016082);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_2627016082);
  __Pyx_INCREF(__pyx_int_2062270317);
  __Pyx_GIVEREF(__pyx_int_2062270317);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_2062270317);
  __Pyx_INCREF(__pyx_int_1507497298);
  __Pyx_GIVEREF(__pyx_int_1507497298);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_1507497298);
  __Pyx_INCREF(__pyx_int_2200818878);
  __Pyx_GIVEREF(__pyx_int_2200818878);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_2200818878);
  __Pyx_INCREF(__pyx_int_567498868);
  __Pyx_GIVEREF(__pyx_int_567498868);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_567498868);
  __Pyx_INCREF(__pyx_int_1764313568);
  __Pyx_GIVEREF(__pyx_int_1764313568);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_1764313568);
  __Pyx_INCREF(__pyx_int_3359936201);
  __Pyx_GIVEREF(__pyx_int_3359936201);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3359936201);
  __Pyx_INCREF(__pyx_int_2305455554);
  __Pyx_GIVEREF(__pyx_int_2305455554);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_2305455554);
  __Pyx_INCREF(__pyx_int_2037970062);
  __Pyx_GIVEREF(__pyx_int_2037970062);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_2037970062);
  __Pyx_INCREF(__pyx_int_1047239000);
  __Pyx_GIVEREF(__pyx_int_1047239000);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_1047239000);
  __Pyx_INCREF(__pyx_int_1910319033);
  __Pyx_GIVEREF(__pyx_int_1910319033);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_1910319033);
  __Pyx_INCREF(__pyx_int_1337376481);
  __Pyx_GIVEREF(__pyx_int_1337376481);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_1337376481);
  __Pyx_INCREF(__pyx_int_2904027272);
  __Pyx_GIVEREF(__pyx_int_2904027272);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_2904027272);
  __Pyx_INCREF(__pyx_int_2892417312);
  __Pyx_GIVEREF(__pyx_int_2892417312);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_2892417312);
  __Pyx_INCREF(__pyx_int_984907214);
  __Pyx_GIVEREF(__pyx_int_984907214);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_984907214);
  __Pyx_INCREF(__pyx_int_1243112415);
  __Pyx_GIVEREF(__pyx_int_1243112415);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_1243112415);
  __Pyx_INCREF(__pyx_int_830661914);
  __Pyx_GIVEREF(__pyx_int_830661914);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_830661914);
  __Pyx_INCREF(__pyx_int_861968209);
  __Pyx_GIVEREF(__pyx_int_861968209);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_861968209);
  __Pyx_INCREF(__pyx_int_2135253587);
  __Pyx_GIVEREF(__pyx_int_2135253587);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_2135253587);
  __Pyx_INCREF(__pyx_int_2011214180);
  __Pyx_GIVEREF(__pyx_int_2011214180);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_2011214180);
  __Pyx_INCREF(__pyx_int_2927934315);
  __Pyx_GIVEREF(__pyx_int_2927934315);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_2927934315);
  __Pyx_INCREF(__pyx_int_2686254721);
  __Pyx_GIVEREF(__pyx_int_2686254721);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_2686254721);
  __Pyx_INCREF(__pyx_int_731183368);
  __Pyx_GIVEREF(__pyx_int_731183368);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_731183368);
  __Pyx_INCREF(__pyx_int_1750626376);
  __Pyx_GIVEREF(__pyx_int_1750626376);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1750626376);
  __Pyx_INCREF(__pyx_int_4246310725);
  __Pyx_GIVEREF(__pyx_int_4246310725);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_4246310725);
  __Pyx_INCREF(__pyx_int_1820824798);
  __Pyx_GIVEREF(__pyx_int_1820824798);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_1820824798);
  __Pyx_INCREF(__pyx_int_4172763771);
  __Pyx_GIVEREF(__pyx_int_4172763771);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_4172763771);
  __Pyx_INCREF(__pyx_int_3542330227);
  __Pyx_GIVEREF(__pyx_int_3542330227);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_3542330227);
  __Pyx_INCREF(__pyx_int_48394827);
  __Pyx_GIVEREF(__pyx_int_48394827);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_48394827);
  __Pyx_INCREF(__pyx_int_2404901663);
  __Pyx_GIVEREF(__pyx_int_2404901663);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_2404901663);
  __Pyx_INCREF(__pyx_int_2871682645);
  __Pyx_GIVEREF(__pyx_int_2871682645);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_2871682645);
  __Pyx_INCREF(__pyx_int_671593195);
  __Pyx_GIVEREF(__pyx_int_671593195);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_671593195);
  __Pyx_INCREF(__pyx_int_3254988725);
  __Pyx_GIVEREF(__pyx_int_3254988725);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_3254988725);
  __Pyx_INCREF(__pyx_int_2073724613);
  __Pyx_GIVEREF(__pyx_int_2073724613);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2073724613);
  __Pyx_INCREF(__pyx_int_145085239);
  __Pyx_GIVEREF(__pyx_int_145085239);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_145085239);
  __Pyx_INCREF(__pyx_int_2280796200);
  __Pyx_GIVEREF(__pyx_int_2280796200);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_2280796200);
  __Pyx_INCREF(__pyx_int_2779915199);
  __Pyx_GIVEREF(__pyx_int_2779915199);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_2779915199);
  __Pyx_INCREF(__pyx_int_1790575107);
  __Pyx_GIVEREF(__pyx_int_1790575107);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_1790575107);
  __Pyx_INCREF(__pyx_int_2187128086);
  __Pyx_GIVEREF(__pyx_int_2187128086);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_2187128086);
  __Pyx_INCREF(__pyx_int_472615631);
  __Pyx_GIVEREF(__pyx_int_472615631);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_472615631);
  __Pyx_INCREF(__pyx_int_3029510009);
  __Pyx_GIVEREF(__pyx_int_3029510009);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_3029510009);
  __Pyx_INCREF(__pyx_int_4075877127);
  __Pyx_GIVEREF(__pyx_int_4075877127);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_4075877127);
  __Pyx_INCREF(__pyx_int_3802222185);
  __Pyx_GIVEREF(__pyx_int_3802222185);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_3802222185);
  __Pyx_INCREF(__pyx_int_4107101658);
  __Pyx_GIVEREF(__pyx_int_4107101658);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_4107101658);
  __Pyx_INCREF(__pyx_int_3201631749);
  __Pyx_GIVEREF(__pyx_int_3201631749);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_3201631749);
  __Pyx_INCREF(__pyx_int_1646252340);
  __Pyx_GIVEREF(__pyx_int_1646252340);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_1646252340);
  __Pyx_INCREF(__pyx_int_4270507174);
  __Pyx_GIVEREF(__pyx_int_4270507174);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_4270507174);
  __Pyx_INCREF(__pyx_int_1402811438);
  __Pyx_GIVEREF(__pyx_int_1402811438);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_1402811438);
  __Pyx_INCREF(__pyx_int_1436590835);
  __Pyx_GIVEREF(__pyx_int_1436590835);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_1436590835);
  __Pyx_INCREF(__pyx_int_3778151818);
  __Pyx_GIVEREF(__pyx_int_3778151818);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3778151818);
  __Pyx_INCREF(__pyx_int_3950355702);
  __Pyx_GIVEREF(__pyx_int_3950355702);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3950355702);
  __Pyx_INCREF(__pyx_int_3963161475);
  __Pyx_GIVEREF(__pyx_int_3963161475);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_3963161475);
  __Pyx_INCREF(__pyx_int_4020912224);
  __Pyx_GIVEREF(__pyx_int_4020912224);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_4020912224);
  __Pyx_INCREF(__pyx_int_2667994737);
  __Pyx_GIVEREF(__pyx_int_2667994737);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_2667994737);
  __Pyx_INCREF(__pyx_int_273792366);
  __Pyx_GIVEREF(__pyx_int_273792366);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_273792366);
  __Pyx_INCREF(__pyx_int_2331590177);
  __Pyx_GIVEREF(__pyx_int_2331590177);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_2331590177);
  __Pyx_INCREF(__pyx_int_104699613);
  __Pyx_GIVEREF(__pyx_int_104699613);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_104699613);
  __Pyx_INCREF(__pyx_int_95345982);
  __Pyx_GIVEREF(__pyx_int_95345982);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_95345982);
  __Pyx_INCREF(__pyx_int_3175501286);
  __Pyx_GIVEREF(__pyx_int_3175501286);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_3175501286);
  __Pyx_INCREF(__pyx_int_2377486676);
  __Pyx_GIVEREF(__pyx_int_2377486676);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_2377486676);
  __Pyx_INCREF(__pyx_int_1560637892);
  __Pyx_GIVEREF(__pyx_int_1560637892);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_1560637892);
  __Pyx_INCREF(__pyx_int_3564045318);
  __Pyx_GIVEREF(__pyx_int_3564045318);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_3564045318);
  __Pyx_INCREF(__pyx_int_369057872);
  __Pyx_GIVEREF(__pyx_int_369057872);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_369057872);
  __Pyx_INCREF(__pyx_int_4213447064);
  __Pyx_GIVEREF(__pyx_int_4213447064);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_4213447064);
  __Pyx_INCREF(__pyx_int_3919042237);
  __Pyx_GIVEREF(__pyx_int_3919042237);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3919042237);
  __Pyx_INCREF(__pyx_int_1137477952);
  __Pyx_GIVEREF(__pyx_int_1137477952);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_1137477952);
  __Pyx_INCREF(__pyx_int_2658625497);
  __Pyx_GIVEREF(__pyx_int_2658625497);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_2658625497);
  __Pyx_INCREF(__pyx_int_1119727848);
  __Pyx_GIVEREF(__pyx_int_1119727848);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_1119727848);
  __Pyx_INCREF(__pyx_int_2340947849);
  __Pyx_GIVEREF(__pyx_int_2340947849);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_2340947849);
  __Pyx_INCREF(__pyx_int_1530455833);
  __Pyx_GIVEREF(__pyx_int_1530455833);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_1530455833);
  __Pyx_INCREF(__pyx_int_4007360968);
  __Pyx_GIVEREF(__pyx_int_4007360968);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_4007360968);
  __Pyx_INCREF(__pyx_int_172466556);
  __Pyx_GIVEREF(__pyx_int_172466556);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_172466556);
  __Pyx_INCREF(__pyx_int_266959938);
  __Pyx_GIVEREF(__pyx_int_266959938);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_266959938);
  __Pyx_INCREF(__pyx_int_516552836);
  __Pyx_GIVEREF(__pyx_int_516552836);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_516552836);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_2256734592);
  __Pyx_GIVEREF(__pyx_int_2256734592);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_2256734592);
  __Pyx_INCREF(__pyx_int_3980931627);
  __Pyx_GIVEREF(__pyx_int_3980931627);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_3980931627);
  __Pyx_INCREF(__pyx_int_1890328081);
  __Pyx_GIVEREF(__pyx_int_1890328081);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_1890328081);
  __Pyx_INCREF(__pyx_int_1917742170);
  __Pyx_GIVEREF(__pyx_int_1917742170);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1917742170);
  __Pyx_INCREF(__pyx_int_4294704398);
  __Pyx_GIVEREF(__pyx_int_4294704398);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_4294704398);
  __Pyx_INCREF(__pyx_int_945164165);
  __Pyx_GIVEREF(__pyx_int_945164165);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_945164165);
  __Pyx_INCREF(__pyx_int_3575528878);
  __Pyx_GIVEREF(__pyx_int_3575528878);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_3575528878);
  __Pyx_INCREF(__pyx_int_958871085);
  __Pyx_GIVEREF(__pyx_int_958871085);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_958871085);
  __Pyx_INCREF(__pyx_int_3647212047);
  __Pyx_GIVEREF(__pyx_int_3647212047);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_3647212047);
  __Pyx_INCREF(__pyx_int_2787207260);
  __Pyx_GIVEREF(__pyx_int_2787207260);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_2787207260);
  __Pyx_INCREF(__pyx_int_1423022939);
  __Pyx_GIVEREF(__pyx_int_1423022939);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_1423022939);
  __Pyx_INCREF(__pyx_int_775562294);
  __Pyx_GIVEREF(__pyx_int_775562294);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_775562294);
  __Pyx_INCREF(__pyx_int_1739656202);
  __Pyx_GIVEREF(__pyx_int_1739656202);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_1739656202);
  __Pyx_INCREF(__pyx_int_3876557655);
  __Pyx_GIVEREF(__pyx_int_3876557655);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_3876557655);
  __Pyx_INCREF(__pyx_int_2530391278);
  __Pyx_GIVEREF(__pyx_int_2530391278);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_2530391278);
  __Pyx_INCREF(__pyx_int_2443058075);
  __Pyx_GIVEREF(__pyx_int_2443058075);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2443058075);
  __Pyx_INCREF(__pyx_int_3310321856);
  __Pyx_GIVEREF(__pyx_int_3310321856);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_3310321856);
  __Pyx_INCREF(__pyx_int_547512796);
  __Pyx_GIVEREF(__pyx_int_547512796);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_547512796);
  __Pyx_INCREF(__pyx_int_1265195639);
  __Pyx_GIVEREF(__pyx_int_1265195639);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_1265195639);
  __Pyx_INCREF(__pyx_int_437656594);
  __Pyx_GIVEREF(__pyx_int_437656594);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_437656594);
  __Pyx_INCREF(__pyx_int_3121275539);
  __Pyx_GIVEREF(__pyx_int_3121275539);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3121275539);
  __Pyx_INCREF(__pyx_int_719700128);
  __Pyx_GIVEREF(__pyx_int_719700128);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_719700128);
  __Pyx_INCREF(__pyx_int_3762502690);
  __Pyx_GIVEREF(__pyx_int_3762502690);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_3762502690);
  __Pyx_INCREF(__pyx_int_387781147);
  __Pyx_GIVEREF(__pyx_int_387781147);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_387781147);
  __Pyx_INCREF(__pyx_int_218828297);
  __Pyx_GIVEREF(__pyx_int_218828297);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_218828297);
  __Pyx_INCREF(__pyx_int_3350065803);
  __Pyx_GIVEREF(__pyx_int_3350065803);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_3350065803);
  __Pyx_INCREF(__pyx_int_2830708150);
  __Pyx_GIVEREF(__pyx_int_2830708150);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_2830708150);
  __Pyx_INCREF(__pyx_int_2848461854);
  __Pyx_GIVEREF(__pyx_int_2848461854);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_2848461854);
  __Pyx_INCREF(__pyx_int_428169201);
  __Pyx_GIVEREF(__pyx_int_428169201);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_428169201);
  __Pyx_INCREF(__pyx_int_122466165);
  __Pyx_GIVEREF(__pyx_int_122466165);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_122466165);
  __Pyx_INCREF(__pyx_int_3720081049);
  __Pyx_GIVEREF(__pyx_int_3720081049);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_3720081049);
  __Pyx_INCREF(__pyx_int_1627235199);
  __Pyx_GIVEREF(__pyx_int_1627235199);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_1627235199);
  __Pyx_INCREF(__pyx_int_648017665);
  __Pyx_GIVEREF(__pyx_int_648017665);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_648017665);
  __Pyx_INCREF(__pyx_int_4122762354);
  __Pyx_GIVEREF(__pyx_int_4122762354);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_4122762354);
  __Pyx_INCREF(__pyx_int_1002783846);
  __Pyx_GIVEREF(__pyx_int_1002783846);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1002783846);
  __Pyx_INCREF(__pyx_int_2117360635);
  __Pyx_GIVEREF(__pyx_int_2117360635);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_2117360635);
  __Pyx_INCREF(__pyx_int_695634755);
  __Pyx_GIVEREF(__pyx_int_695634755);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_695634755);
  __Pyx_INCREF(__pyx_int_3336358691);
  __Pyx_GIVEREF(__pyx_int_3336358691);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_3336358691);
  __Pyx_INCREF(__pyx_int_4234721005);
  __Pyx_GIVEREF(__pyx_int_4234721005);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_4234721005);
  __Pyx_INCREF(__pyx_int_4049844452);
  __Pyx_GIVEREF(__pyx_int_4049844452);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_4049844452);
  __Pyx_INCREF(__pyx_int_3704280881);
  __Pyx_GIVEREF(__pyx_int_3704280881);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_3704280881);
  __Pyx_INCREF(__pyx_int_2232435299);
  __Pyx_GIVEREF(__pyx_int_2232435299);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_2232435299);
  __Pyx_INCREF(__pyx_int_574624663);
  __Pyx_GIVEREF(__pyx_int_574624663);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_574624663);
  __Pyx_INCREF(__pyx_int_287343814);
  __Pyx_GIVEREF(__pyx_int_287343814);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_287343814);
  __Pyx_INCREF(__pyx_int_612205898);
  __Pyx_GIVEREF(__pyx_int_612205898);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_612205898);
  __Pyx_INCREF(__pyx_int_1039717051);
  __Pyx_GIVEREF(__pyx_int_1039717051);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_1039717051);
  __Pyx_INCREF(__pyx_int_840019705);
  __Pyx_GIVEREF(__pyx_int_840019705);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_840019705);
  __Pyx_INCREF(__pyx_int_2708326185);
  __Pyx_GIVEREF(__pyx_int_2708326185);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_2708326185);
  __Pyx_INCREF(__pyx_int_793451934);
  __Pyx_GIVEREF(__pyx_int_793451934);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_793451934);
  __Pyx_INCREF(__pyx_int_821288114);
  __Pyx_GIVEREF(__pyx_int_821288114);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_821288114);
  __Pyx_INCREF(__pyx_int_1391201670);
  __Pyx_GIVEREF(__pyx_int_1391201670);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_1391201670);
  __Pyx_INCREF(__pyx_int_3822090177);
  __Pyx_GIVEREF(__pyx_int_3822090177);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_3822090177);
  __Pyx_INCREF(__pyx_int_376187827);
  __Pyx_GIVEREF(__pyx_int_376187827);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_376187827);
  __Pyx_INCREF(__pyx_int_3113855344);
  __Pyx_GIVEREF(__pyx_int_3113855344);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_3113855344);
  __Pyx_INCREF(__pyx_int_1224348052);
  __Pyx_GIVEREF(__pyx_int_1224348052);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_1224348052);
  __Pyx_INCREF(__pyx_int_1679968233);
  __Pyx_GIVEREF(__pyx_int_1679968233);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_1679968233);
  __Pyx_INCREF(__pyx_int_2361698556);
  __Pyx_GIVEREF(__pyx_int_2361698556);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_2361698556);
  __Pyx_INCREF(__pyx_int_1058709744);
  __Pyx_GIVEREF(__pyx_int_1058709744);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_1058709744);
  __Pyx_INCREF(__pyx_int_752375421);
  __Pyx_GIVEREF(__pyx_int_752375421);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_752375421);
  __Pyx_INCREF(__pyx_int_2431590963);
  __Pyx_GIVEREF(__pyx_int_2431590963);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_2431590963);
  __Pyx_INCREF(__pyx_int_1321699145);
  __Pyx_GIVEREF(__pyx_int_1321699145);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_1321699145);
  __Pyx_INCREF(__pyx_int_3519142200);
  __Pyx_GIVEREF(__pyx_int_3519142200);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_3519142200);
  __Pyx_INCREF(__pyx_int_2734591178);
  __Pyx_GIVEREF(__pyx_int_2734591178);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_2734591178);
  __Pyx_INCREF(__pyx_int_188127444);
  __Pyx_GIVEREF(__pyx_int_188127444);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_188127444);
  __Pyx_INCREF(__pyx_int_2177869557);
  __Pyx_GIVEREF(__pyx_int_2177869557);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_2177869557);
  __Pyx_INCREF(__pyx_int_3727205754);
  __Pyx_GIVEREF(__pyx_int_3727205754);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_3727205754);
  __Pyx_INCREF(__pyx_int_2384911031);
  __Pyx_GIVEREF(__pyx_int_2384911031);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_2384911031);
  __Pyx_INCREF(__pyx_int_3215212461);
  __Pyx_GIVEREF(__pyx_int_3215212461);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_3215212461);
  __Pyx_INCREF(__pyx_int_2648976442);
  __Pyx_GIVEREF(__pyx_int_2648976442);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_2648976442);
  __Pyx_INCREF(__pyx_int_2450346104);
  __Pyx_GIVEREF(__pyx_int_2450346104);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_2450346104);
  __Pyx_INCREF(__pyx_int_3432737375);
  __Pyx_GIVEREF(__pyx_int_3432737375);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_3432737375);
  __Pyx_INCREF(__pyx_int_1180849278);
  __Pyx_GIVEREF(__pyx_int_1180849278);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_1180849278);
  __Pyx_INCREF(__pyx_int_331544205);
  __Pyx_GIVEREF(__pyx_int_331544205);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_331544205);
  __Pyx_INCREF(__pyx_int_3102249176);
  __Pyx_GIVEREF(__pyx_int_3102249176);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_3102249176);
  __Pyx_INCREF(__pyx_int_4150144569);
  __Pyx_GIVEREF(__pyx_int_4150144569);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_4150144569);
  __Pyx_INCREF(__pyx_int_2952102595);
  __Pyx_GIVEREF(__pyx_int_2952102595);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2952102595);
  __Pyx_INCREF(__pyx_int_2159976285);
  __Pyx_GIVEREF(__pyx_int_2159976285);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_2159976285);
  __Pyx_INCREF(__pyx_int_2474404304);
  __Pyx_GIVEREF(__pyx_int_2474404304);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_2474404304);
  __Pyx_INCREF(__pyx_int_766078933);
  __Pyx_GIVEREF(__pyx_int_766078933);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_766078933);
  __Pyx_INCREF(__pyx_int_313773861);
  __Pyx_GIVEREF(__pyx_int_313773861);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_313773861);
  __Pyx_INCREF(__pyx_int_2570832044);
  __Pyx_GIVEREF(__pyx_int_2570832044);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2570832044);
  __Pyx_INCREF(__pyx_int_2108100632);
  __Pyx_GIVEREF(__pyx_int_2108100632);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_2108100632);
  __Pyx_INCREF(__pyx_int_1668212892);
  __Pyx_GIVEREF(__pyx_int_1668212892);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1668212892);
  __Pyx_INCREF(__pyx_int_3145456443);
  __Pyx_GIVEREF(__pyx_int_3145456443);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_3145456443);
  __Pyx_INCREF(__pyx_int_2013908262);
  __Pyx_GIVEREF(__pyx_int_2013908262);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_2013908262);
  __Pyx_INCREF(__pyx_int_418672217);
  __Pyx_GIVEREF(__pyx_int_418672217);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_418672217);
  __Pyx_INCREF(__pyx_int_3070356634);
  __Pyx_GIVEREF(__pyx_int_3070356634);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_3070356634);
  __Pyx_INCREF(__pyx_int_2594734927);
  __Pyx_GIVEREF(__pyx_int_2594734927);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_2594734927);
  __Pyx_INCREF(__pyx_int_1852171925);
  __Pyx_GIVEREF(__pyx_int_1852171925);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_1852171925);
  __Pyx_INCREF(__pyx_int_3867060991);
  __Pyx_GIVEREF(__pyx_int_3867060991);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_3867060991);
  __Pyx_INCREF(__pyx_int_3473416636);
  __Pyx_GIVEREF(__pyx_int_3473416636);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_3473416636);
  __Pyx_INCREF(__pyx_int_3907448597);
  __Pyx_GIVEREF(__pyx_int_3907448597);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_3907448597);
  __Pyx_INCREF(__pyx_int_2614737639);
  __Pyx_GIVEREF(__pyx_int_2614737639);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_2614737639);
  __Pyx_INCREF(__pyx_int_919489135);
  __Pyx_GIVEREF(__pyx_int_919489135);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_919489135);
  __Pyx_INCREF(__pyx_int_164948639);
  __Pyx_GIVEREF(__pyx_int_164948639);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_164948639);
  __Pyx_INCREF(__pyx_int_2094410160);
  __Pyx_GIVEREF(__pyx_int_2094410160);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_2094410160);
  __Pyx_INCREF(__pyx_int_2997825956);
  __Pyx_GIVEREF(__pyx_int_2997825956);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_2997825956);
  __Pyx_INCREF(__pyx_int_590424639);
  __Pyx_GIVEREF(__pyx_int_590424639);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_590424639);
  __Pyx_INCREF(__pyx_int_2486224549);
  __Pyx_GIVEREF(__pyx_int_2486224549);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_2486224549);
  __Pyx_INCREF(__pyx_int_1723872674);
  __Pyx_GIVEREF(__pyx_int_1723872674);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_1723872674);
  __Pyx_INCREF(__pyx_int_3157750862);
  __Pyx_GIVEREF(__pyx_int_3157750862);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3157750862);
  __Pyx_INCREF(__pyx_int_3399941250);
  __Pyx_GIVEREF(__pyx_int_3399941250);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_3399941250);
  __Pyx_INCREF(__pyx_int_3501252752);
  __Pyx_GIVEREF(__pyx_int_3501252752);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_3501252752);
  __Pyx_INCREF(__pyx_int_3625268135);
  __Pyx_GIVEREF(__pyx_int_3625268135);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_3625268135);
  __Pyx_INCREF(__pyx_int_2555048196);
  __Pyx_GIVEREF(__pyx_int_2555048196);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_2555048196);
  __Pyx_INCREF(__pyx_int_3673637356);
  __Pyx_GIVEREF(__pyx_int_3673637356);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3673637356);
  __Pyx_INCREF(__pyx_int_1343127501);
  __Pyx_GIVEREF(__pyx_int_1343127501);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_1343127501);
  __Pyx_INCREF(__pyx_int_4130281361);
  __Pyx_GIVEREF(__pyx_int_4130281361);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_4130281361);
  __Pyx_INCREF(__pyx_int_3599595085);
  __Pyx_GIVEREF(__pyx_int_3599595085);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_3599595085);
  __Pyx_INCREF(__pyx_int_2957853679);
  __Pyx_GIVEREF(__pyx_int_2957853679);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_2957853679);
  __Pyx_INCREF(__pyx_int_1297403050);
  __Pyx_GIVEREF(__pyx_int_1297403050);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_1297403050);
  __Pyx_INCREF(__pyx_int_81781910);
  __Pyx_GIVEREF(__pyx_int_81781910);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_81781910);
  __Pyx_INCREF(__pyx_int_3051593425);
  __Pyx_GIVEREF(__pyx_int_3051593425);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_3051593425);
  __Pyx_INCREF(__pyx_int_2283490410);
  __Pyx_GIVEREF(__pyx_int_2283490410);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_2283490410);
  __Pyx_INCREF(__pyx_int_532201772);
  __Pyx_GIVEREF(__pyx_int_532201772);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_532201772);
  __Pyx_INCREF(__pyx_int_1367295589);
  __Pyx_GIVEREF(__pyx_int_1367295589);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_1367295589);
  __Pyx_INCREF(__pyx_int_3926170974);
  __Pyx_GIVEREF(__pyx_int_3926170974);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_3926170974);
  __Pyx_INCREF(__pyx_int_895287692);
  __Pyx_GIVEREF(__pyx_int_895287692);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_895287692);
  __Pyx_INCREF(__pyx_int_1953757831);
  __Pyx_GIVEREF(__pyx_int_1953757831);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1953757831);
  __Pyx_INCREF(__pyx_int_1093597963);
  __Pyx_GIVEREF(__pyx_int_1093597963);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_1093597963);
  __Pyx_INCREF(__pyx_int_492483431);
  __Pyx_GIVEREF(__pyx_int_492483431);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_492483431);
  __Pyx_INCREF(__pyx_int_3528626907);
  __Pyx_GIVEREF(__pyx_int_3528626907);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_3528626907);
  __Pyx_INCREF(__pyx_int_1446242576);
  __Pyx_GIVEREF(__pyx_int_1446242576);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_1446242576);
  __Pyx_INCREF(__pyx_int_1192455638);
  __Pyx_GIVEREF(__pyx_int_1192455638);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_1192455638);
  __Pyx_INCREF(__pyx_int_1636604631);
  __Pyx_GIVEREF(__pyx_int_1636604631);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_1636604631);
  __Pyx_INCREF(__pyx_int_209336225);
  __Pyx_GIVEREF(__pyx_int_209336225);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_209336225);
  __Pyx_INCREF(__pyx_int_344873464);
  __Pyx_GIVEREF(__pyx_int_344873464);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_344873464);
  __Pyx_INCREF(__pyx_int_1015671571);
  __Pyx_GIVEREF(__pyx_int_1015671571);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_1015671571);
  __Pyx_INCREF(__pyx_int_669961897);
  __Pyx_GIVEREF(__pyx_int_669961897);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_669961897);
  __Pyx_INCREF(__pyx_int_3375740769);
  __Pyx_GIVEREF(__pyx_int_3375740769);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_3375740769);
  __Pyx_INCREF(__pyx_int_3857572124);
  __Pyx_GIVEREF(__pyx_int_3857572124);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_3857572124);
  __Pyx_INCREF(__pyx_int_2973530695);
  __Pyx_GIVEREF(__pyx_int_2973530695);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2973530695);
  __Pyx_INCREF(__pyx_int_3747192018);
  __Pyx_GIVEREF(__pyx_int_3747192018);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_3747192018);
  __Pyx_INCREF(__pyx_int_1933530610);
  __Pyx_GIVEREF(__pyx_int_1933530610);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1933530610);
  __Pyx_INCREF(__pyx_int_3464042516);
  __Pyx_GIVEREF(__pyx_int_3464042516);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_3464042516);
  __Pyx_INCREF(__pyx_int_935293895);
  __Pyx_GIVEREF(__pyx_int_935293895);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_935293895);
  __Pyx_INCREF(__pyx_int_3454686199);
  __Pyx_GIVEREF(__pyx_int_3454686199);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_3454686199);
  __Pyx_INCREF(__pyx_int_2858115069);
  __Pyx_GIVEREF(__pyx_int_2858115069);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_2858115069);
  __Pyx_INCREF(__pyx_int_1863638845);
  __Pyx_GIVEREF(__pyx_int_1863638845);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_1863638845);
  __Pyx_INCREF(__pyx_int_3683022916);
  __Pyx_GIVEREF(__pyx_int_3683022916);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_3683022916);
  __Pyx_INCREF(__pyx_int_4085369519);
  __Pyx_GIVEREF(__pyx_int_4085369519);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_4085369519);
  __Pyx_INCREF(__pyx_int_3292445032);
  __Pyx_GIVEREF(__pyx_int_3292445032);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_3292445032);
  __Pyx_INCREF(__pyx_int_875313188);
  __Pyx_GIVEREF(__pyx_int_875313188);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_875313188);
  __Pyx_INCREF(__pyx_int_1080017571);
  __Pyx_GIVEREF(__pyx_int_1080017571);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_1080017571);
  __Pyx_INCREF(__pyx_int_3279033885);
  __Pyx_GIVEREF(__pyx_int_3279033885);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3279033885);
  __Pyx_INCREF(__pyx_int_621591778);
  __Pyx_GIVEREF(__pyx_int_621591778);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_621591778);
  __Pyx_INCREF(__pyx_int_1233856572);
  __Pyx_GIVEREF(__pyx_int_1233856572);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_1233856572);
  __Pyx_INCREF(__pyx_int_2504130317);
  __Pyx_GIVEREF(__pyx_int_2504130317);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_2504130317);
  __Pyx_INCREF(__pyx_int_24197544);
  __Pyx_GIVEREF(__pyx_int_24197544);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_24197544);
  __Pyx_INCREF(__pyx_int_3017672716);
  __Pyx_GIVEREF(__pyx_int_3017672716);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_3017672716);
  __Pyx_INCREF(__pyx_int_3835484340);
  __Pyx_GIVEREF(__pyx_int_3835484340);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_3835484340);
  __Pyx_INCREF(__pyx_int_3247465558);
  __Pyx_GIVEREF(__pyx_int_3247465558);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_3247465558);
  __Pyx_INCREF(__pyx_int_2220981195);
  __Pyx_GIVEREF(__pyx_int_2220981195);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2220981195);
  __Pyx_INCREF(__pyx_int_3060847922);
  __Pyx_GIVEREF(__pyx_int_3060847922);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_3060847922);
  __Pyx_INCREF(__pyx_int_1551124588);
  __Pyx_GIVEREF(__pyx_int_1551124588);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1551124588);
  __Pyx_INCREF(__pyx_int_1463996600);
  __Pyx_GIVEREF(__pyx_int_1463996600);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_1463996600);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T7, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":77
 *     T6 = [ 0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857 ]
 *     T7 = [ 0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8 ]
 *     T8 = [ 0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0 ]             # <<<<<<<<<<<<<<
 * 
 *     # Transformations for decryption key expansion ~
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_4104605777);
  __Pyx_GIVEREF(__pyx_int_4104605777);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_4104605777);
  __Pyx_INCREF(__pyx_int_1097159550);
  __Pyx_GIVEREF(__pyx_int_1097159550);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_1097159550);
  __Pyx_INCREF(__pyx_int_396673818);
  __Pyx_GIVEREF(__pyx_int_396673818);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_396673818);
  __Pyx_INCREF(__pyx_int_660510266);
  __Pyx_GIVEREF(__pyx_int_660510266);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_660510266);
  __Pyx_INCREF(__pyx_int_2875968315);
  __Pyx_GIVEREF(__pyx_int_2875968315);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_2875968315);
  __Pyx_INCREF(__pyx_int_2638606623);
  __Pyx_GIVEREF(__pyx_int_2638606623);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_2638606623);
  __Pyx_INCREF(__pyx_int_4200115116);
  __Pyx_GIVEREF(__pyx_int_4200115116);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_4200115116);
  __Pyx_INCREF(__pyx_int_3808662347);
  __Pyx_GIVEREF(__pyx_int_3808662347);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_3808662347);
  __Pyx_INCREF(__pyx_int_821712160);
  __Pyx_GIVEREF(__pyx_int_821712160);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_821712160);
  __Pyx_INCREF(__pyx_int_1986918061);
  __Pyx_GIVEREF(__pyx_int_1986918061);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1986918061);
  __Pyx_INCREF(__pyx_int_3430322568);
  __Pyx_GIVEREF(__pyx_int_3430322568);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_3430322568);
  __Pyx_INCREF(__pyx_int_38544885);
  __Pyx_GIVEREF(__pyx_int_38544885);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_38544885);
  __Pyx_INCREF(__pyx_int_3856137295);
  __Pyx_GIVEREF(__pyx_int_3856137295);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_3856137295);
  __Pyx_INCREF(__pyx_int_718002117);
  __Pyx_GIVEREF(__pyx_int_718002117);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_718002117);
  __Pyx_INCREF(__pyx_int_893681702);
  __Pyx_GIVEREF(__pyx_int_893681702);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_893681702);
  __Pyx_INCREF(__pyx_int_1654886325);
  __Pyx_GIVEREF(__pyx_int_1654886325);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1654886325);
  __Pyx_INCREF(__pyx_int_2975484382);
  __Pyx_GIVEREF(__pyx_int_2975484382);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_2975484382);
  __Pyx_INCREF(__pyx_int_3122358053);
  __Pyx_GIVEREF(__pyx_int_3122358053);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_3122358053);
  __Pyx_INCREF(__pyx_int_3926825029);
  __Pyx_GIVEREF(__pyx_int_3926825029);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_3926825029);
  __Pyx_INCREF(__pyx_int_4274053469);
  __Pyx_GIVEREF(__pyx_int_4274053469);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_4274053469);
  __Pyx_INCREF(__pyx_int_796197571);
  __Pyx_GIVEREF(__pyx_int_796197571);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_796197571);
  __Pyx_INCREF(__pyx_int_1290801793);
  __Pyx_GIVEREF(__pyx_int_1290801793);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_1290801793);
  __Pyx_INCREF(__pyx_int_1184342925);
  __Pyx_GIVEREF(__pyx_int_1184342925);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_1184342925);
  __Pyx_INCREF(__pyx_int_3556361835);
  __Pyx_GIVEREF(__pyx_int_3556361835);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_3556361835);
  __Pyx_INCREF(__pyx_int_2405426947);
  __Pyx_GIVEREF(__pyx_int_2405426947);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_2405426947);
  __Pyx_INCREF(__pyx_int_2459735317);
  __Pyx_GIVEREF(__pyx_int_2459735317);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_2459735317);
  __Pyx_INCREF(__pyx_int_1836772287);
  __Pyx_GIVEREF(__pyx_int_1836772287);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_1836772287);
  __Pyx_INCREF(__pyx_int_1381620373);
  __Pyx_GIVEREF(__pyx_int_1381620373);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_1381620373);
  __Pyx_INCREF(__pyx_int_3196267988);
  __Pyx_GIVEREF(__pyx_int_3196267988);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_3196267988);
  __Pyx_INCREF(__pyx_int_1948373848);
  __Pyx_GIVEREF(__pyx_int_1948373848);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_1948373848);
  __Pyx_INCREF(__pyx_int_3764988233);
  __Pyx_GIVEREF(__pyx_int_3764988233);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_3764988233);
  __Pyx_INCREF(__pyx_int_3385345166);
  __Pyx_GIVEREF(__pyx_int_3385345166);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3385345166);
  __Pyx_INCREF(__pyx_int_3263785589);
  __Pyx_GIVEREF(__pyx_int_3263785589);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3263785589);
  __Pyx_INCREF(__pyx_int_2390325492);
  __Pyx_GIVEREF(__pyx_int_2390325492);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_2390325492);
  __Pyx_INCREF(__pyx_int_1480485785);
  __Pyx_GIVEREF(__pyx_int_1480485785);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_1480485785);
  __Pyx_INCREF(__pyx_int_3111247143);
  __Pyx_GIVEREF(__pyx_int_3111247143);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_3111247143);
  __Pyx_INCREF(__pyx_int_3780097726);
  __Pyx_GIVEREF(__pyx_int_3780097726);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_3780097726);
  __Pyx_INCREF(__pyx_int_2293045232);
  __Pyx_GIVEREF(__pyx_int_2293045232);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_2293045232);
  __Pyx_INCREF(__pyx_int_548169417);
  __Pyx_GIVEREF(__pyx_int_548169417);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_548169417);
  __Pyx_INCREF(__pyx_int_3459953789);
  __Pyx_GIVEREF(__pyx_int_3459953789);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_3459953789);
  __Pyx_INCREF(__pyx_int_3746175075);
  __Pyx_GIVEREF(__pyx_int_3746175075);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_3746175075);
  __Pyx_INCREF(__pyx_int_439452389);
  __Pyx_GIVEREF(__pyx_int_439452389);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_439452389);
  __Pyx_INCREF(__pyx_int_1362321559);
  __Pyx_GIVEREF(__pyx_int_1362321559);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_1362321559);
  __Pyx_INCREF(__pyx_int_1400849762);
  __Pyx_GIVEREF(__pyx_int_1400849762);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_1400849762);
  __Pyx_INCREF(__pyx_int_1685577905);
  __Pyx_GIVEREF(__pyx_int_1685577905);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_1685577905);
  __Pyx_INCREF(__pyx_int_1806599355);
  __Pyx_GIVEREF(__pyx_int_1806599355);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_1806599355);
  __Pyx_INCREF(__pyx_int_2174754046);
  __Pyx_GIVEREF(__pyx_int_2174754046);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_2174754046);
  __Pyx_INCREF(__pyx_int_137073913);
  __Pyx_GIVEREF(__pyx_int_137073913);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_137073913);
  __Pyx_INCREF(__pyx_int_1214797936);
  __Pyx_GIVEREF(__pyx_int_1214797936);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1214797936);
  __Pyx_INCREF(__pyx_int_1174215055);
  __Pyx_GIVEREF(__pyx_int_1174215055);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_1174215055);
  __Pyx_INCREF(__pyx_int_3731654548);
  __Pyx_GIVEREF(__pyx_int_3731654548);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_3731654548);
  __Pyx_INCREF(__pyx_int_2079897426);
  __Pyx_GIVEREF(__pyx_int_2079897426);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_2079897426);
  __Pyx_INCREF(__pyx_int_1943217067);
  __Pyx_GIVEREF(__pyx_int_1943217067);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_1943217067);
  __Pyx_INCREF(__pyx_int_1258480242);
  __Pyx_GIVEREF(__pyx_int_1258480242);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_1258480242);
  __Pyx_INCREF(__pyx_int_529487843);
  __Pyx_GIVEREF(__pyx_int_529487843);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_529487843);
  __Pyx_INCREF(__pyx_int_1437280870);
  __Pyx_GIVEREF(__pyx_int_1437280870);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_1437280870);
  __Pyx_INCREF(__pyx_int_3945269170);
  __Pyx_GIVEREF(__pyx_int_3945269170);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_3945269170);
  __Pyx_INCREF(__pyx_int_3049390895);
  __Pyx_GIVEREF(__pyx_int_3049390895);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_3049390895);
  __Pyx_INCREF(__pyx_int_3313212038);
  __Pyx_GIVEREF(__pyx_int_3313212038);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_3313212038);
  __Pyx_INCREF(__pyx_int_923313619);
  __Pyx_GIVEREF(__pyx_int_923313619);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_923313619);
  __Pyx_INCREF(__pyx_int_679998000);
  __Pyx_GIVEREF(__pyx_int_679998000);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_679998000);
  __Pyx_INCREF(__pyx_int_3215307299);
  __Pyx_GIVEREF(__pyx_int_3215307299);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_3215307299);
  __Pyx_INCREF(__pyx_int_57326082);
  __Pyx_GIVEREF(__pyx_int_57326082);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_57326082);
  __Pyx_INCREF(__pyx_int_377642221);
  __Pyx_GIVEREF(__pyx_int_377642221);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_377642221);
  __Pyx_INCREF(__pyx_int_3474729866);
  __Pyx_GIVEREF(__pyx_int_3474729866);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_3474729866);
  __Pyx_INCREF(__pyx_int_2041877159);
  __Pyx_GIVEREF(__pyx_int_2041877159);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2041877159);
  __Pyx_INCREF(__pyx_int_133361907);
  __Pyx_GIVEREF(__pyx_int_133361907);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_133361907);
  __Pyx_INCREF(__pyx_int_1776460110);
  __Pyx_GIVEREF(__pyx_int_1776460110);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_1776460110);
  __Pyx_INCREF(__pyx_int_3673476453);
  __Pyx_GIVEREF(__pyx_int_3673476453);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_3673476453);
  __Pyx_INCREF(__pyx_int_96392454);
  __Pyx_GIVEREF(__pyx_int_96392454);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_96392454);
  __Pyx_INCREF(__pyx_int_878845905);
  __Pyx_GIVEREF(__pyx_int_878845905);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_878845905);
  __Pyx_INCREF(__pyx_int_2801699524);
  __Pyx_GIVEREF(__pyx_int_2801699524);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_2801699524);
  __Pyx_INCREF(__pyx_int_777231668);
  __Pyx_GIVEREF(__pyx_int_777231668);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_777231668);
  __Pyx_INCREF(__pyx_int_4082475170);
  __Pyx_GIVEREF(__pyx_int_4082475170);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_4082475170);
  __Pyx_INCREF(__pyx_int_2330014213);
  __Pyx_GIVEREF(__pyx_int_2330014213);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_2330014213);
  __Pyx_INCREF(__pyx_int_4142626212);
  __Pyx_GIVEREF(__pyx_int_4142626212);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_4142626212);
  __Pyx_INCREF(__pyx_int_2213296395);
  __Pyx_GIVEREF(__pyx_int_2213296395);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_2213296395);
  __Pyx_INCREF(__pyx_int_1626319424);
  __Pyx_GIVEREF(__pyx_int_1626319424);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_1626319424);
  __Pyx_INCREF(__pyx_int_1906247262);
  __Pyx_GIVEREF(__pyx_int_1906247262);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_1906247262);
  __Pyx_INCREF(__pyx_int_1846563261);
  __Pyx_GIVEREF(__pyx_int_1846563261);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_1846563261);
  __Pyx_INCREF(__pyx_int_562755902);
  __Pyx_GIVEREF(__pyx_int_562755902);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_562755902);
  __Pyx_INCREF(__pyx_int_3708173718);
  __Pyx_GIVEREF(__pyx_int_3708173718);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_3708173718);
  __Pyx_INCREF(__pyx_int_1040559837);
  __Pyx_GIVEREF(__pyx_int_1040559837);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_1040559837);
  __Pyx_INCREF(__pyx_int_3871163981);
  __Pyx_GIVEREF(__pyx_int_3871163981);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_3871163981);
  __Pyx_INCREF(__pyx_int_1418573201);
  __Pyx_GIVEREF(__pyx_int_1418573201);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_1418573201);
  __Pyx_INCREF(__pyx_int_3294430577);
  __Pyx_GIVEREF(__pyx_int_3294430577);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_3294430577);
  __Pyx_INCREF(__pyx_int_114585348);
  __Pyx_GIVEREF(__pyx_int_114585348);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_114585348);
  __Pyx_INCREF(__pyx_int_1343618912);
  __Pyx_GIVEREF(__pyx_int_1343618912);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_1343618912);
  __Pyx_INCREF(__pyx_int_2566595609);
  __Pyx_GIVEREF(__pyx_int_2566595609);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_2566595609);
  __Pyx_INCREF(__pyx_int_3186202582);
  __Pyx_GIVEREF(__pyx_int_3186202582);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3186202582);
  __Pyx_INCREF(__pyx_int_1078185097);
  __Pyx_GIVEREF(__pyx_int_1078185097);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_1078185097);
  __Pyx_INCREF(__pyx_int_3651041127);
  __Pyx_GIVEREF(__pyx_int_3651041127);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_3651041127);
  __Pyx_INCREF(__pyx_int_3896688048);
  __Pyx_GIVEREF(__pyx_int_3896688048);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_3896688048);
  __Pyx_INCREF(__pyx_int_2307622919);
  __Pyx_GIVEREF(__pyx_int_2307622919);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_2307622919);
  __Pyx_INCREF(__pyx_int_425408743);
  __Pyx_GIVEREF(__pyx_int_425408743);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_425408743);
  __Pyx_INCREF(__pyx_int_3371096953);
  __Pyx_GIVEREF(__pyx_int_3371096953);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_3371096953);
  __Pyx_INCREF(__pyx_int_2081048481);
  __Pyx_GIVEREF(__pyx_int_2081048481);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_2081048481);
  __Pyx_INCREF(__pyx_int_1108339068);
  __Pyx_GIVEREF(__pyx_int_1108339068);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_1108339068);
  __Pyx_INCREF(__pyx_int_2216610296);
  __Pyx_GIVEREF(__pyx_int_2216610296);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_2216610296);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_2156299017);
  __Pyx_GIVEREF(__pyx_int_2156299017);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_2156299017);
  __Pyx_INCREF(__pyx_int_736970802);
  __Pyx_GIVEREF(__pyx_int_736970802);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_736970802);
  __Pyx_INCREF(__pyx_int_292596766);
  __Pyx_GIVEREF(__pyx_int_292596766);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_292596766);
  __Pyx_INCREF(__pyx_int_1517440620);
  __Pyx_GIVEREF(__pyx_int_1517440620);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1517440620);
  __Pyx_INCREF(__pyx_int_251657213);
  __Pyx_GIVEREF(__pyx_int_251657213);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_251657213);
  __Pyx_INCREF(__pyx_int_2235061775);
  __Pyx_GIVEREF(__pyx_int_2235061775);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_2235061775);
  __Pyx_INCREF(__pyx_int_2933202493);
  __Pyx_GIVEREF(__pyx_int_2933202493);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_2933202493);
  __Pyx_INCREF(__pyx_int_758720310);
  __Pyx_GIVEREF(__pyx_int_758720310);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_758720310);
  __Pyx_INCREF(__pyx_int_265905162);
  __Pyx_GIVEREF(__pyx_int_265905162);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_265905162);
  __Pyx_INCREF(__pyx_int_1554391400);
  __Pyx_GIVEREF(__pyx_int_1554391400);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_1554391400);
  __Pyx_INCREF(__pyx_int_1532285339);
  __Pyx_GIVEREF(__pyx_int_1532285339);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_1532285339);
  __Pyx_INCREF(__pyx_int_908999204);
  __Pyx_GIVEREF(__pyx_int_908999204);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_908999204);
  __Pyx_INCREF(__pyx_int_174567692);
  __Pyx_GIVEREF(__pyx_int_174567692);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_174567692);
  __Pyx_INCREF(__pyx_int_1474760595);
  __Pyx_GIVEREF(__pyx_int_1474760595);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_1474760595);
  __Pyx_INCREF(__pyx_int_4002861748);
  __Pyx_GIVEREF(__pyx_int_4002861748);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_4002861748);
  __Pyx_INCREF(__pyx_int_2610011675);
  __Pyx_GIVEREF(__pyx_int_2610011675);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2610011675);
  __Pyx_INCREF(__pyx_int_3234156416);
  __Pyx_GIVEREF(__pyx_int_3234156416);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_3234156416);
  __Pyx_INCREF(__pyx_int_3693126241);
  __Pyx_GIVEREF(__pyx_int_3693126241);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_3693126241);
  __Pyx_INCREF(__pyx_int_2001430874);
  __Pyx_GIVEREF(__pyx_int_2001430874);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_2001430874);
  __Pyx_INCREF(__pyx_int_303699484);
  __Pyx_GIVEREF(__pyx_int_303699484);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_303699484);
  __Pyx_INCREF(__pyx_int_2478443234);
  __Pyx_GIVEREF(__pyx_int_2478443234);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_2478443234);
  __Pyx_INCREF(__pyx_int_2687165888);
  __Pyx_GIVEREF(__pyx_int_2687165888);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_2687165888);
  __Pyx_INCREF(__pyx_int_585122620);
  __Pyx_GIVEREF(__pyx_int_585122620);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_585122620);
  __Pyx_INCREF(__pyx_int_454499602);
  __Pyx_GIVEREF(__pyx_int_454499602);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_454499602);
  __Pyx_INCREF(__pyx_int_151849742);
  __Pyx_GIVEREF(__pyx_int_151849742);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_151849742);
  __Pyx_INCREF(__pyx_int_2345119218);
  __Pyx_GIVEREF(__pyx_int_2345119218);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_2345119218);
  __Pyx_INCREF(__pyx_int_3064510765);
  __Pyx_GIVEREF(__pyx_int_3064510765);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_3064510765);
  __Pyx_INCREF(__pyx_int_514443284);
  __Pyx_GIVEREF(__pyx_int_514443284);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_514443284);
  __Pyx_INCREF(__pyx_int_4044981591);
  __Pyx_GIVEREF(__pyx_int_4044981591);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_4044981591);
  __Pyx_INCREF(__pyx_int_1963412655);
  __Pyx_GIVEREF(__pyx_int_1963412655);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_1963412655);
  __Pyx_INCREF(__pyx_int_2581445614);
  __Pyx_GIVEREF(__pyx_int_2581445614);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_2581445614);
  __Pyx_INCREF(__pyx_int_2137062819);
  __Pyx_GIVEREF(__pyx_int_2137062819);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_2137062819);
  __Pyx_INCREF(__pyx_int_19308535);
  __Pyx_GIVEREF(__pyx_int_19308535);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_19308535);
  __Pyx_INCREF(__pyx_int_1928707164);
  __Pyx_GIVEREF(__pyx_int_1928707164);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_1928707164);
  __Pyx_INCREF(__pyx_int_1715193156);
  __Pyx_GIVEREF(__pyx_int_1715193156);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1715193156);
  __Pyx_INCREF(__pyx_int_4219352155);
  __Pyx_GIVEREF(__pyx_int_4219352155);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_4219352155);
  __Pyx_INCREF(__pyx_int_1126790795);
  __Pyx_GIVEREF(__pyx_int_1126790795);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_1126790795);
  __Pyx_INCREF(__pyx_int_600235211);
  __Pyx_GIVEREF(__pyx_int_600235211);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_600235211);
  __Pyx_INCREF(__pyx_int_3992742070);
  __Pyx_GIVEREF(__pyx_int_3992742070);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_3992742070);
  __Pyx_INCREF(__pyx_int_3841024952);
  __Pyx_GIVEREF(__pyx_int_3841024952);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_3841024952);
  __Pyx_INCREF(__pyx_int_836553431);
  __Pyx_GIVEREF(__pyx_int_836553431);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_836553431);
  __Pyx_INCREF(__pyx_int_1669664834);
  __Pyx_GIVEREF(__pyx_int_1669664834);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_1669664834);
  __Pyx_INCREF(__pyx_int_2535604243);
  __Pyx_GIVEREF(__pyx_int_2535604243);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_2535604243);
  __Pyx_INCREF(__pyx_int_3323011204);
  __Pyx_GIVEREF(__pyx_int_3323011204);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_3323011204);
  __Pyx_INCREF(__pyx_int_1243905413);
  __Pyx_GIVEREF(__pyx_int_1243905413);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_1243905413);
  __Pyx_INCREF(__pyx_int_3141400786);
  __Pyx_GIVEREF(__pyx_int_3141400786);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_3141400786);
  __Pyx_INCREF(__pyx_int_4180808110);
  __Pyx_GIVEREF(__pyx_int_4180808110);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_4180808110);
  __Pyx_INCREF(__pyx_int_698445255);
  __Pyx_GIVEREF(__pyx_int_698445255);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_698445255);
  __Pyx_INCREF(__pyx_int_2653899549);
  __Pyx_GIVEREF(__pyx_int_2653899549);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_2653899549);
  __Pyx_INCREF(__pyx_int_2989552604);
  __Pyx_GIVEREF(__pyx_int_2989552604);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_2989552604);
  __Pyx_INCREF(__pyx_int_2253581325);
  __Pyx_GIVEREF(__pyx_int_2253581325);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2253581325);
  __Pyx_INCREF(__pyx_int_3252932727);
  __Pyx_GIVEREF(__pyx_int_3252932727);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_3252932727);
  __Pyx_INCREF(__pyx_int_3004591147);
  __Pyx_GIVEREF(__pyx_int_3004591147);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_3004591147);
  __Pyx_INCREF(__pyx_int_1891211689);
  __Pyx_GIVEREF(__pyx_int_1891211689);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_1891211689);
  __Pyx_INCREF(__pyx_int_2487810577);
  __Pyx_GIVEREF(__pyx_int_2487810577);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_2487810577);
  __Pyx_INCREF(__pyx_int_3915653703);
  __Pyx_GIVEREF(__pyx_int_3915653703);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_3915653703);
  __Pyx_INCREF(__pyx_int_4237083816);
  __Pyx_GIVEREF(__pyx_int_4237083816);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_4237083816);
  __Pyx_INCREF(__pyx_int_4030667424);
  __Pyx_GIVEREF(__pyx_int_4030667424);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_4030667424);
  __Pyx_INCREF(__pyx_int_2100090966);
  __Pyx_GIVEREF(__pyx_int_2100090966);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_2100090966);
  __Pyx_INCREF(__pyx_int_865136418);
  __Pyx_GIVEREF(__pyx_int_865136418);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_865136418);
  __Pyx_INCREF(__pyx_int_1229899655);
  __Pyx_GIVEREF(__pyx_int_1229899655);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_1229899655);
  __Pyx_INCREF(__pyx_int_953270745);
  __Pyx_GIVEREF(__pyx_int_953270745);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_953270745);
  __Pyx_INCREF(__pyx_int_3399679628);
  __Pyx_GIVEREF(__pyx_int_3399679628);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_3399679628);
  __Pyx_INCREF(__pyx_int_3557504664);
  __Pyx_GIVEREF(__pyx_int_3557504664);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_3557504664);
  __Pyx_INCREF(__pyx_int_4118925222);
  __Pyx_GIVEREF(__pyx_int_4118925222);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_4118925222);
  __Pyx_INCREF(__pyx_int_2061379749);
  __Pyx_GIVEREF(__pyx_int_2061379749);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_2061379749);
  __Pyx_INCREF(__pyx_int_3079546586);
  __Pyx_GIVEREF(__pyx_int_3079546586);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_3079546586);
  __Pyx_INCREF(__pyx_int_2915017791);
  __Pyx_GIVEREF(__pyx_int_2915017791);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_2915017791);
  __Pyx_INCREF(__pyx_int_983426092);
  __Pyx_GIVEREF(__pyx_int_983426092);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_983426092);
  __Pyx_INCREF(__pyx_int_2022837584);
  __Pyx_GIVEREF(__pyx_int_2022837584);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_2022837584);
  __Pyx_INCREF(__pyx_int_1607244650);
  __Pyx_GIVEREF(__pyx_int_1607244650);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_1607244650);
  __Pyx_INCREF(__pyx_int_2118541908);
  __Pyx_GIVEREF(__pyx_int_2118541908);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_2118541908);
  __Pyx_INCREF(__pyx_int_2366882550);
  __Pyx_GIVEREF(__pyx_int_2366882550);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_2366882550);
  __Pyx_INCREF(__pyx_int_3635996816);
  __Pyx_GIVEREF(__pyx_int_3635996816);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_3635996816);
  __Pyx_INCREF(__pyx_int_972512814);
  __Pyx_GIVEREF(__pyx_int_972512814);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_972512814);
  __Pyx_INCREF(__pyx_int_3283088770);
  __Pyx_GIVEREF(__pyx_int_3283088770);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_3283088770);
  __Pyx_INCREF(__pyx_int_1568718495);
  __Pyx_GIVEREF(__pyx_int_1568718495);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_1568718495);
  __Pyx_INCREF(__pyx_int_3499326569);
  __Pyx_GIVEREF(__pyx_int_3499326569);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_3499326569);
  __Pyx_INCREF(__pyx_int_3576539503);
  __Pyx_GIVEREF(__pyx_int_3576539503);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_3576539503);
  __Pyx_INCREF(__pyx_int_621982671);
  __Pyx_GIVEREF(__pyx_int_621982671);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_621982671);
  __Pyx_INCREF(__pyx_int_2895723464);
  __Pyx_GIVEREF(__pyx_int_2895723464);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2895723464);
  __Pyx_INCREF(__pyx_int_410887952);
  __Pyx_GIVEREF(__pyx_int_410887952);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_410887952);
  __Pyx_INCREF(__pyx_int_2623762152);
  __Pyx_GIVEREF(__pyx_int_2623762152);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_2623762152);
  __Pyx_INCREF(__pyx_int_1002142683);
  __Pyx_GIVEREF(__pyx_int_1002142683);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_1002142683);
  __Pyx_INCREF(__pyx_int_645401037);
  __Pyx_GIVEREF(__pyx_int_645401037);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_645401037);
  __Pyx_INCREF(__pyx_int_1494807662);
  __Pyx_GIVEREF(__pyx_int_1494807662);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_1494807662);
  __Pyx_INCREF(__pyx_int_2595684844);
  __Pyx_GIVEREF(__pyx_int_2595684844);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_2595684844);
  __Pyx_INCREF(__pyx_int_1335535747);
  __Pyx_GIVEREF(__pyx_int_1335535747);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_1335535747);
  __Pyx_INCREF(__pyx_int_2507040230);
  __Pyx_GIVEREF(__pyx_int_2507040230);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_2507040230);
  __Pyx_INCREF(__pyx_int_4293295786);
  __Pyx_GIVEREF(__pyx_int_4293295786);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_4293295786);
  __Pyx_INCREF(__pyx_int_3167684641);
  __Pyx_GIVEREF(__pyx_int_3167684641);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_3167684641);
  __Pyx_INCREF(__pyx_int_367585007);
  __Pyx_GIVEREF(__pyx_int_367585007);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_367585007);
  __Pyx_INCREF(__pyx_int_3885750714);
  __Pyx_GIVEREF(__pyx_int_3885750714);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3885750714);
  __Pyx_INCREF(__pyx_int_1865862730);
  __Pyx_GIVEREF(__pyx_int_1865862730);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_1865862730);
  __Pyx_INCREF(__pyx_int_2668221674);
  __Pyx_GIVEREF(__pyx_int_2668221674);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_2668221674);
  __Pyx_INCREF(__pyx_int_2960971305);
  __Pyx_GIVEREF(__pyx_int_2960971305);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_2960971305);
  __Pyx_INCREF(__pyx_int_2763173681);
  __Pyx_GIVEREF(__pyx_int_2763173681);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_2763173681);
  __Pyx_INCREF(__pyx_int_1059270954);
  __Pyx_GIVEREF(__pyx_int_1059270954);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_1059270954);
  __Pyx_INCREF(__pyx_int_2777952454);
  __Pyx_GIVEREF(__pyx_int_2777952454);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_2777952454);
  __Pyx_INCREF(__pyx_int_2724642869);
  __Pyx_GIVEREF(__pyx_int_2724642869);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_2724642869);
  __Pyx_INCREF(__pyx_int_1320957812);
  __Pyx_GIVEREF(__pyx_int_1320957812);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_1320957812);
  __Pyx_INCREF(__pyx_int_2194319100);
  __Pyx_GIVEREF(__pyx_int_2194319100);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_2194319100);
  __Pyx_INCREF(__pyx_int_2429595872);
  __Pyx_GIVEREF(__pyx_int_2429595872);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_2429595872);
  __Pyx_INCREF(__pyx_int_2815956275);
  __Pyx_GIVEREF(__pyx_int_2815956275);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_2815956275);
  __Pyx_INCREF(__pyx_int_77089521);
  __Pyx_GIVEREF(__pyx_int_77089521);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_77089521);
  __Pyx_INCREF(__pyx_int_3973773121);
  __Pyx_GIVEREF(__pyx_int_3973773121);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3973773121);
  __Pyx_INCREF(__pyx_int_3444575871);
  __Pyx_GIVEREF(__pyx_int_3444575871);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_3444575871);
  __Pyx_INCREF(__pyx_int_2448830231);
  __Pyx_GIVEREF(__pyx_int_2448830231);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_2448830231);
  __Pyx_INCREF(__pyx_int_1305906550);
  __Pyx_GIVEREF(__pyx_int_1305906550);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_1305906550);
  __Pyx_INCREF(__pyx_int_4021308739);
  __Pyx_GIVEREF(__pyx_int_4021308739);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_4021308739);
  __Pyx_INCREF(__pyx_int_2857194700);
  __Pyx_GIVEREF(__pyx_int_2857194700);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_2857194700);
  __Pyx_INCREF(__pyx_int_2516901860);
  __Pyx_GIVEREF(__pyx_int_2516901860);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_2516901860);
  __Pyx_INCREF(__pyx_int_3518358430);
  __Pyx_GIVEREF(__pyx_int_3518358430);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_3518358430);
  __Pyx_INCREF(__pyx_int_1787304780);
  __Pyx_GIVEREF(__pyx_int_1787304780);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_1787304780);
  __Pyx_INCREF(__pyx_int_740276417);
  __Pyx_GIVEREF(__pyx_int_740276417);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_740276417);
  __Pyx_INCREF(__pyx_int_1699839814);
  __Pyx_GIVEREF(__pyx_int_1699839814);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_1699839814);
  __Pyx_INCREF(__pyx_int_1592394909);
  __Pyx_GIVEREF(__pyx_int_1592394909);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_1592394909);
  __Pyx_INCREF(__pyx_int_2352307457);
  __Pyx_GIVEREF(__pyx_int_2352307457);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_2352307457);
  __Pyx_INCREF(__pyx_int_2272556026);
  __Pyx_GIVEREF(__pyx_int_2272556026);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_2272556026);
  __Pyx_INCREF(__pyx_int_188821243);
  __Pyx_GIVEREF(__pyx_int_188821243);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_188821243);
  __Pyx_INCREF(__pyx_int_1729977011);
  __Pyx_GIVEREF(__pyx_int_1729977011);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_1729977011);
  __Pyx_INCREF(__pyx_int_3687994002);
  __Pyx_GIVEREF(__pyx_int_3687994002);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_3687994002);
  __Pyx_INCREF(__pyx_int_274084841);
  __Pyx_GIVEREF(__pyx_int_274084841);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_274084841);
  __Pyx_INCREF(__pyx_int_3594982253);
  __Pyx_GIVEREF(__pyx_int_3594982253);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_3594982253);
  __Pyx_INCREF(__pyx_int_3613494426);
  __Pyx_GIVEREF(__pyx_int_3613494426);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_3613494426);
  __Pyx_INCREF(__pyx_int_2701949495);
  __Pyx_GIVEREF(__pyx_int_2701949495);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_2701949495);
  __Pyx_INCREF(__pyx_int_4162096729);
  __Pyx_GIVEREF(__pyx_int_4162096729);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_4162096729);
  __Pyx_INCREF(__pyx_int_322734571);
  __Pyx_GIVEREF(__pyx_int_322734571);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_322734571);
  __Pyx_INCREF(__pyx_int_2837966542);
  __Pyx_GIVEREF(__pyx_int_2837966542);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_2837966542);
  __Pyx_INCREF(__pyx_int_1640576439);
  __Pyx_GIVEREF(__pyx_int_1640576439);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_1640576439);
  __Pyx_INCREF(__pyx_int_484830689);
  __Pyx_GIVEREF(__pyx_int_484830689);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_484830689);
  __Pyx_INCREF(__pyx_int_1202797690);
  __Pyx_GIVEREF(__pyx_int_1202797690);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_1202797690);
  __Pyx_INCREF(__pyx_int_3537852828);
  __Pyx_GIVEREF(__pyx_int_3537852828);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_3537852828);
  __Pyx_INCREF(__pyx_int_4067639125);
  __Pyx_GIVEREF(__pyx_int_4067639125);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_4067639125);
  __Pyx_INCREF(__pyx_int_349075736);
  __Pyx_GIVEREF(__pyx_int_349075736);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_349075736);
  __Pyx_INCREF(__pyx_int_3342319475);
  __Pyx_GIVEREF(__pyx_int_3342319475);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_3342319475);
  __Pyx_INCREF(__pyx_int_4157467219);
  __Pyx_GIVEREF(__pyx_int_4157467219);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_4157467219);
  __Pyx_INCREF(__pyx_int_4255800159);
  __Pyx_GIVEREF(__pyx_int_4255800159);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_4255800159);
  __Pyx_INCREF(__pyx_int_1030690015);
  __Pyx_GIVEREF(__pyx_int_1030690015);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_1030690015);
  __Pyx_INCREF(__pyx_int_1155237496);
  __Pyx_GIVEREF(__pyx_int_1155237496);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_1155237496);
  __Pyx_INCREF(__pyx_int_2951971274);
  __Pyx_GIVEREF(__pyx_int_2951971274);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_2951971274);
  __Pyx_INCREF(__pyx_int_1757691577);
  __Pyx_GIVEREF(__pyx_int_1757691577);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_1757691577);
  __Pyx_INCREF(__pyx_int_607398968);
  __Pyx_GIVEREF(__pyx_int_607398968);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_607398968);
  __Pyx_INCREF(__pyx_int_2738905026);
  __Pyx_GIVEREF(__pyx_int_2738905026);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_2738905026);
  __Pyx_INCREF(__pyx_int_499347990);
  __Pyx_GIVEREF(__pyx_int_499347990);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_499347990);
  __Pyx_INCREF(__pyx_int_3794078908);
  __Pyx_GIVEREF(__pyx_int_3794078908);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3794078908);
  __Pyx_INCREF(__pyx_int_1011452712);
  __Pyx_GIVEREF(__pyx_int_1011452712);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_1011452712);
  __Pyx_INCREF(__pyx_int_227885567);
  __Pyx_GIVEREF(__pyx_int_227885567);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_227885567);
  __Pyx_INCREF(__pyx_int_2818666809);
  __Pyx_GIVEREF(__pyx_int_2818666809);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_2818666809);
  __Pyx_INCREF(__pyx_int_213114376);
  __Pyx_GIVEREF(__pyx_int_213114376);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_213114376);
  __Pyx_INCREF(__pyx_int_3034881240);
  __Pyx_GIVEREF(__pyx_int_3034881240);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_3034881240);
  __Pyx_INCREF(__pyx_int_1455525988);
  __Pyx_GIVEREF(__pyx_int_1455525988);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_1455525988);
  __Pyx_INCREF(__pyx_int_3414450555);
  __Pyx_GIVEREF(__pyx_int_3414450555);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_3414450555);
  __Pyx_INCREF(__pyx_int_850817237);
  __Pyx_GIVEREF(__pyx_int_850817237);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_850817237);
  __Pyx_INCREF(__pyx_int_1817998408);
  __Pyx_GIVEREF(__pyx_int_1817998408);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1817998408);
  __Pyx_INCREF(__pyx_int_3092726480);
  __Pyx_GIVEREF(__pyx_int_3092726480);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_3092726480);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_T8, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":80
 * 
 *     # Transformations for decryption key expansion ~
 *     U1 = [ 0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3 ]             # <<<<<<<<<<<<<<
 *     U2 = [ 0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697 ]
 *     U3 = [ 0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46 ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_235474187);
  __Pyx_GIVEREF(__pyx_int_235474187);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_235474187);
  __Pyx_INCREF(__pyx_int_470948374);
  __Pyx_GIVEREF(__pyx_int_470948374);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_470948374);
  __Pyx_INCREF(__pyx_int_303765277);
  __Pyx_GIVEREF(__pyx_int_303765277);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_303765277);
  __Pyx_INCREF(__pyx_int_941896748);
  __Pyx_GIVEREF(__pyx_int_941896748);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_941896748);
  __Pyx_INCREF(__pyx_int_908933415);
  __Pyx_GIVEREF(__pyx_int_908933415);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_908933415);
  __Pyx_INCREF(__pyx_int_607530554);
  __Pyx_GIVEREF(__pyx_int_607530554);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_607530554);
  __Pyx_INCREF(__pyx_int_708780849);
  __Pyx_GIVEREF(__pyx_int_708780849);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_708780849);
  __Pyx_INCREF(__pyx_int_1883793496);
  __Pyx_GIVEREF(__pyx_int_1883793496);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1883793496);
  __Pyx_INCREF(__pyx_int_2118214995);
  __Pyx_GIVEREF(__pyx_int_2118214995);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_2118214995);
  __Pyx_INCREF(__pyx_int_1817866830);
  __Pyx_GIVEREF(__pyx_int_1817866830);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1817866830);
  __Pyx_INCREF(__pyx_int_1649639237);
  __Pyx_GIVEREF(__pyx_int_1649639237);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_1649639237);
  __Pyx_INCREF(__pyx_int_1215061108);
  __Pyx_GIVEREF(__pyx_int_1215061108);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_1215061108);
  __Pyx_INCREF(__pyx_int_1181045119);
  __Pyx_GIVEREF(__pyx_int_1181045119);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_1181045119);
  __Pyx_INCREF(__pyx_int_1417561698);
  __Pyx_GIVEREF(__pyx_int_1417561698);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_1417561698);
  __Pyx_INCREF(__pyx_int_1517767529);
  __Pyx_GIVEREF(__pyx_int_1517767529);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1517767529);
  __Pyx_INCREF(__pyx_int_3767586992);
  __Pyx_GIVEREF(__pyx_int_3767586992);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_3767586992);
  __Pyx_INCREF(__pyx_int_4003061179);
  __Pyx_GIVEREF(__pyx_int_4003061179);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_4003061179);
  __Pyx_INCREF(__pyx_int_4236429990);
  __Pyx_GIVEREF(__pyx_int_4236429990);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_4236429990);
  __Pyx_INCREF(__pyx_int_4069246893);
  __Pyx_GIVEREF(__pyx_int_4069246893);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_4069246893);
  __Pyx_INCREF(__pyx_int_3635733660);
  __Pyx_GIVEREF(__pyx_int_3635733660);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_3635733660);
  __Pyx_INCREF(__pyx_int_3602770327);
  __Pyx_GIVEREF(__pyx_int_3602770327);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_3602770327);
  __Pyx_INCREF(__pyx_int_3299278474);
  __Pyx_GIVEREF(__pyx_int_3299278474);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_3299278474);
  __Pyx_INCREF(__pyx_int_3400528769);
  __Pyx_GIVEREF(__pyx_int_3400528769);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_3400528769);
  __Pyx_INCREF(__pyx_int_2430122216);
  __Pyx_GIVEREF(__pyx_int_2430122216);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_2430122216);
  __Pyx_INCREF(__pyx_int_2664543715);
  __Pyx_GIVEREF(__pyx_int_2664543715);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_2664543715);
  __Pyx_INCREF(__pyx_int_2362090238);
  __Pyx_GIVEREF(__pyx_int_2362090238);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_2362090238);
  __Pyx_INCREF(__pyx_int_2193862645);
  __Pyx_GIVEREF(__pyx_int_2193862645);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_2193862645);
  __Pyx_INCREF(__pyx_int_2835123396);
  __Pyx_GIVEREF(__pyx_int_2835123396);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_2835123396);
  __Pyx_INCREF(__pyx_int_2801107407);
  __Pyx_GIVEREF(__pyx_int_2801107407);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_2801107407);
  __Pyx_INCREF(__pyx_int_3035535058);
  __Pyx_GIVEREF(__pyx_int_3035535058);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_3035535058);
  __Pyx_INCREF(__pyx_int_3135740889);
  __Pyx_GIVEREF(__pyx_int_3135740889);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3135740889);
  __Pyx_INCREF(__pyx_int_3678124923);
  __Pyx_GIVEREF(__pyx_int_3678124923);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3678124923);
  __Pyx_INCREF(__pyx_int_3576870512);
  __Pyx_GIVEREF(__pyx_int_3576870512);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_3576870512);
  __Pyx_INCREF(__pyx_int_3341394285);
  __Pyx_GIVEREF(__pyx_int_3341394285);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_3341394285);
  __Pyx_INCREF(__pyx_int_3374361702);
  __Pyx_GIVEREF(__pyx_int_3374361702);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_3374361702);
  __Pyx_INCREF(__pyx_int_3810496343);
  __Pyx_GIVEREF(__pyx_int_3810496343);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_3810496343);
  __Pyx_INCREF(__pyx_int_3977675356);
  __Pyx_GIVEREF(__pyx_int_3977675356);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_3977675356);
  __Pyx_INCREF(__pyx_int_4279080257);
  __Pyx_GIVEREF(__pyx_int_4279080257);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_4279080257);
  __Pyx_INCREF(__pyx_int_4043610186);
  __Pyx_GIVEREF(__pyx_int_4043610186);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_4043610186);
  __Pyx_INCREF(__pyx_int_2876494627);
  __Pyx_GIVEREF(__pyx_int_2876494627);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_2876494627);
  __Pyx_INCREF(__pyx_int_2776292904);
  __Pyx_GIVEREF(__pyx_int_2776292904);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_2776292904);
  __Pyx_INCREF(__pyx_int_3076639029);
  __Pyx_GIVEREF(__pyx_int_3076639029);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_3076639029);
  __Pyx_INCREF(__pyx_int_3110650942);
  __Pyx_GIVEREF(__pyx_int_3110650942);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_3110650942);
  __Pyx_INCREF(__pyx_int_2472011535);
  __Pyx_GIVEREF(__pyx_int_2472011535);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_2472011535);
  __Pyx_INCREF(__pyx_int_2640243204);
  __Pyx_GIVEREF(__pyx_int_2640243204);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_2640243204);
  __Pyx_INCREF(__pyx_int_2403728665);
  __Pyx_GIVEREF(__pyx_int_2403728665);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_2403728665);
  __Pyx_INCREF(__pyx_int_2169303058);
  __Pyx_GIVEREF(__pyx_int_2169303058);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_2169303058);
  __Pyx_INCREF(__pyx_int_1001089995);
  __Pyx_GIVEREF(__pyx_int_1001089995);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1001089995);
  __Pyx_INCREF(__pyx_int_899835584);
  __Pyx_GIVEREF(__pyx_int_899835584);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_899835584);
  __Pyx_INCREF(__pyx_int_666464733);
  __Pyx_GIVEREF(__pyx_int_666464733);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_666464733);
  __Pyx_INCREF(__pyx_int_699432150);
  __Pyx_GIVEREF(__pyx_int_699432150);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_699432150);
  __Pyx_INCREF(__pyx_int_59727847);
  __Pyx_GIVEREF(__pyx_int_59727847);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_59727847);
  __Pyx_INCREF(__pyx_int_226906860);
  __Pyx_GIVEREF(__pyx_int_226906860);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_226906860);
  __Pyx_INCREF(__pyx_int_530400753);
  __Pyx_GIVEREF(__pyx_int_530400753);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_530400753);
  __Pyx_INCREF(__pyx_int_294930682);
  __Pyx_GIVEREF(__pyx_int_294930682);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_294930682);
  __Pyx_INCREF(__pyx_int_1273168787);
  __Pyx_GIVEREF(__pyx_int_1273168787);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_1273168787);
  __Pyx_INCREF(__pyx_int_1172967064);
  __Pyx_GIVEREF(__pyx_int_1172967064);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_1172967064);
  __Pyx_INCREF(__pyx_int_1475418501);
  __Pyx_GIVEREF(__pyx_int_1475418501);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_1475418501);
  __Pyx_INCREF(__pyx_int_1509430414);
  __Pyx_GIVEREF(__pyx_int_1509430414);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_1509430414);
  __Pyx_INCREF(__pyx_int_1942435775);
  __Pyx_GIVEREF(__pyx_int_1942435775);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_1942435775);
  __Pyx_INCREF(__pyx_int_2110667444);
  __Pyx_GIVEREF(__pyx_int_2110667444);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_2110667444);
  __Pyx_INCREF(__pyx_int_1876241833);
  __Pyx_GIVEREF(__pyx_int_1876241833);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_1876241833);
  __Pyx_INCREF(__pyx_int_1641816226);
  __Pyx_GIVEREF(__pyx_int_1641816226);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_1641816226);
  __Pyx_INCREF(__pyx_int_2910219766);
  __Pyx_GIVEREF(__pyx_int_2910219766);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_2910219766);
  __Pyx_INCREF(__pyx_int_2743034109);
  __Pyx_GIVEREF(__pyx_int_2743034109);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2743034109);
  __Pyx_INCREF(__pyx_int_2976151520);
  __Pyx_GIVEREF(__pyx_int_2976151520);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_2976151520);
  __Pyx_INCREF(__pyx_int_3211623147);
  __Pyx_GIVEREF(__pyx_int_3211623147);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_3211623147);
  __Pyx_INCREF(__pyx_int_2505202138);
  __Pyx_GIVEREF(__pyx_int_2505202138);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_2505202138);
  __Pyx_INCREF(__pyx_int_2606453969);
  __Pyx_GIVEREF(__pyx_int_2606453969);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_2606453969);
  __Pyx_INCREF(__pyx_int_2302690252);
  __Pyx_GIVEREF(__pyx_int_2302690252);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_2302690252);
  __Pyx_INCREF(__pyx_int_2269728455);
  __Pyx_GIVEREF(__pyx_int_2269728455);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_2269728455);
  __Pyx_INCREF(__pyx_int_3711829422);
  __Pyx_GIVEREF(__pyx_int_3711829422);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_3711829422);
  __Pyx_INCREF(__pyx_int_3543599269);
  __Pyx_GIVEREF(__pyx_int_3543599269);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_3543599269);
  __Pyx_INCREF(__pyx_int_3240894392);
  __Pyx_GIVEREF(__pyx_int_3240894392);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3240894392);
  __Pyx_INCREF(__pyx_int_3475313331);
  __Pyx_GIVEREF(__pyx_int_3475313331);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3475313331);
  __Pyx_INCREF(__pyx_int_3843699074);
  __Pyx_GIVEREF(__pyx_int_3843699074);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_3843699074);
  __Pyx_INCREF(__pyx_int_3943906441);
  __Pyx_GIVEREF(__pyx_int_3943906441);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_3943906441);
  __Pyx_INCREF(__pyx_int_4178062228);
  __Pyx_GIVEREF(__pyx_int_4178062228);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_4178062228);
  __Pyx_INCREF(__pyx_int_4144047775);
  __Pyx_GIVEREF(__pyx_int_4144047775);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_4144047775);
  __Pyx_INCREF(__pyx_int_1306967366);
  __Pyx_GIVEREF(__pyx_int_1306967366);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_1306967366);
  __Pyx_INCREF(__pyx_int_1139781709);
  __Pyx_GIVEREF(__pyx_int_1139781709);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_1139781709);
  __Pyx_INCREF(__pyx_int_1374988112);
  __Pyx_GIVEREF(__pyx_int_1374988112);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_1374988112);
  __Pyx_INCREF(__pyx_int_1610459739);
  __Pyx_GIVEREF(__pyx_int_1610459739);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_1610459739);
  __Pyx_INCREF(__pyx_int_1975683434);
  __Pyx_GIVEREF(__pyx_int_1975683434);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_1975683434);
  __Pyx_INCREF(__pyx_int_2076935265);
  __Pyx_GIVEREF(__pyx_int_2076935265);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_2076935265);
  __Pyx_INCREF(__pyx_int_1775276924);
  __Pyx_GIVEREF(__pyx_int_1775276924);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_1775276924);
  __Pyx_INCREF(__pyx_int_1742315127);
  __Pyx_GIVEREF(__pyx_int_1742315127);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_1742315127);
  __Pyx_INCREF(__pyx_int_1034867998);
  __Pyx_GIVEREF(__pyx_int_1034867998);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_1034867998);
  __Pyx_INCREF(__pyx_int_866637845);
  __Pyx_GIVEREF(__pyx_int_866637845);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_866637845);
  __Pyx_INCREF(__pyx_int_566021896);
  __Pyx_GIVEREF(__pyx_int_566021896);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_566021896);
  __Pyx_INCREF(__pyx_int_800440835);
  __Pyx_GIVEREF(__pyx_int_800440835);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_800440835);
  __Pyx_INCREF(__pyx_int_92987698);
  __Pyx_GIVEREF(__pyx_int_92987698);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_92987698);
  __Pyx_INCREF(__pyx_int_193195065);
  __Pyx_GIVEREF(__pyx_int_193195065);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_193195065);
  __Pyx_INCREF(__pyx_int_429456164);
  __Pyx_GIVEREF(__pyx_int_429456164);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_429456164);
  __Pyx_INCREF(__pyx_int_395441711);
  __Pyx_GIVEREF(__pyx_int_395441711);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_395441711);
  __Pyx_INCREF(__pyx_int_1984812685);
  __Pyx_GIVEREF(__pyx_int_1984812685);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_1984812685);
  __Pyx_INCREF(__pyx_int_2017778566);
  __Pyx_GIVEREF(__pyx_int_2017778566);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_2017778566);
  __Pyx_INCREF(__pyx_int_1784663195);
  __Pyx_GIVEREF(__pyx_int_1784663195);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_1784663195);
  __Pyx_INCREF(__pyx_int_1683407248);
  __Pyx_GIVEREF(__pyx_int_1683407248);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_1683407248);
  __Pyx_INCREF(__pyx_int_1315562145);
  __Pyx_GIVEREF(__pyx_int_1315562145);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_1315562145);
  __Pyx_INCREF(__pyx_int_1080094634);
  __Pyx_GIVEREF(__pyx_int_1080094634);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_1080094634);
  __Pyx_INCREF(__pyx_int_1383856311);
  __Pyx_GIVEREF(__pyx_int_1383856311);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_1383856311);
  __Pyx_INCREF(__pyx_int_1551037884);
  __Pyx_GIVEREF(__pyx_int_1551037884);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1551037884);
  __Pyx_INCREF(__pyx_int_101039829);
  __Pyx_GIVEREF(__pyx_int_101039829);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_101039829);
  __Pyx_INCREF(__pyx_int_135050206);
  __Pyx_GIVEREF(__pyx_int_135050206);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_135050206);
  __Pyx_INCREF(__pyx_int_437757123);
  __Pyx_GIVEREF(__pyx_int_437757123);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_437757123);
  __Pyx_INCREF(__pyx_int_337553864);
  __Pyx_GIVEREF(__pyx_int_337553864);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_337553864);
  __Pyx_INCREF(__pyx_int_1042385657);
  __Pyx_GIVEREF(__pyx_int_1042385657);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_1042385657);
  __Pyx_INCREF(__pyx_int_807962610);
  __Pyx_GIVEREF(__pyx_int_807962610);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_807962610);
  __Pyx_INCREF(__pyx_int_573804783);
  __Pyx_GIVEREF(__pyx_int_573804783);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_573804783);
  __Pyx_INCREF(__pyx_int_742039012);
  __Pyx_GIVEREF(__pyx_int_742039012);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_742039012);
  __Pyx_INCREF(__pyx_int_2531067453);
  __Pyx_GIVEREF(__pyx_int_2531067453);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_2531067453);
  __Pyx_INCREF(__pyx_int_2564033334);
  __Pyx_GIVEREF(__pyx_int_2564033334);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_2564033334);
  __Pyx_INCREF(__pyx_int_2328828971);
  __Pyx_GIVEREF(__pyx_int_2328828971);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_2328828971);
  __Pyx_INCREF(__pyx_int_2227573024);
  __Pyx_GIVEREF(__pyx_int_2227573024);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_2227573024);
  __Pyx_INCREF(__pyx_int_2935566865);
  __Pyx_GIVEREF(__pyx_int_2935566865);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_2935566865);
  __Pyx_INCREF(__pyx_int_2700099354);
  __Pyx_GIVEREF(__pyx_int_2700099354);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_2700099354);
  __Pyx_INCREF(__pyx_int_3001755655);
  __Pyx_GIVEREF(__pyx_int_3001755655);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_3001755655);
  __Pyx_INCREF(__pyx_int_3168937228);
  __Pyx_GIVEREF(__pyx_int_3168937228);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_3168937228);
  __Pyx_INCREF(__pyx_int_3868552805);
  __Pyx_GIVEREF(__pyx_int_3868552805);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_3868552805);
  __Pyx_INCREF(__pyx_int_3902563182);
  __Pyx_GIVEREF(__pyx_int_3902563182);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_3902563182);
  __Pyx_INCREF(__pyx_int_4203181171);
  __Pyx_GIVEREF(__pyx_int_4203181171);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_4203181171);
  __Pyx_INCREF(__pyx_int_4102977912);
  __Pyx_GIVEREF(__pyx_int_4102977912);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_4102977912);
  __Pyx_INCREF(__pyx_int_3736164937);
  __Pyx_GIVEREF(__pyx_int_3736164937);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_3736164937);
  __Pyx_INCREF(__pyx_int_3501741890);
  __Pyx_GIVEREF(__pyx_int_3501741890);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_3501741890);
  __Pyx_INCREF(__pyx_int_3265478751);
  __Pyx_GIVEREF(__pyx_int_3265478751);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_3265478751);
  __Pyx_INCREF(__pyx_int_3433712980);
  __Pyx_GIVEREF(__pyx_int_3433712980);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_3433712980);
  __Pyx_INCREF(__pyx_int_1106041591);
  __Pyx_GIVEREF(__pyx_int_1106041591);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_1106041591);
  __Pyx_INCREF(__pyx_int_1340463100);
  __Pyx_GIVEREF(__pyx_int_1340463100);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_1340463100);
  __Pyx_INCREF(__pyx_int_1576976609);
  __Pyx_GIVEREF(__pyx_int_1576976609);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_1576976609);
  __Pyx_INCREF(__pyx_int_1408749034);
  __Pyx_GIVEREF(__pyx_int_1408749034);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_1408749034);
  __Pyx_INCREF(__pyx_int_2043211483);
  __Pyx_GIVEREF(__pyx_int_2043211483);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_2043211483);
  __Pyx_INCREF(__pyx_int_2009195472);
  __Pyx_GIVEREF(__pyx_int_2009195472);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_2009195472);
  __Pyx_INCREF(__pyx_int_1708848333);
  __Pyx_GIVEREF(__pyx_int_1708848333);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_1708848333);
  __Pyx_INCREF(__pyx_int_1809054150);
  __Pyx_GIVEREF(__pyx_int_1809054150);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_1809054150);
  __Pyx_INCREF(__pyx_int_832877231);
  __Pyx_GIVEREF(__pyx_int_832877231);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_832877231);
  __Pyx_INCREF(__pyx_int_1068351396);
  __Pyx_GIVEREF(__pyx_int_1068351396);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_1068351396);
  __Pyx_INCREF(__pyx_int_766945465);
  __Pyx_GIVEREF(__pyx_int_766945465);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_766945465);
  __Pyx_INCREF(__pyx_int_599762354);
  __Pyx_GIVEREF(__pyx_int_599762354);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_599762354);
  __Pyx_INCREF(__pyx_int_159417987);
  __Pyx_GIVEREF(__pyx_int_159417987);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_159417987);
  __Pyx_INCREF(__pyx_int_126454664);
  __Pyx_GIVEREF(__pyx_int_126454664);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_126454664);
  __Pyx_INCREF(__pyx_int_361929877);
  __Pyx_GIVEREF(__pyx_int_361929877);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_361929877);
  __Pyx_INCREF(__pyx_int_463180190);
  __Pyx_GIVEREF(__pyx_int_463180190);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_463180190);
  __Pyx_INCREF(__pyx_int_2709260871);
  __Pyx_GIVEREF(__pyx_int_2709260871);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_2709260871);
  __Pyx_INCREF(__pyx_int_2943682380);
  __Pyx_GIVEREF(__pyx_int_2943682380);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_2943682380);
  __Pyx_INCREF(__pyx_int_3178106961);
  __Pyx_GIVEREF(__pyx_int_3178106961);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_3178106961);
  __Pyx_INCREF(__pyx_int_3009879386);
  __Pyx_GIVEREF(__pyx_int_3009879386);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_3009879386);
  __Pyx_INCREF(__pyx_int_2572697195);
  __Pyx_GIVEREF(__pyx_int_2572697195);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_2572697195);
  __Pyx_INCREF(__pyx_int_2538681184);
  __Pyx_GIVEREF(__pyx_int_2538681184);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_2538681184);
  __Pyx_INCREF(__pyx_int_2236228733);
  __Pyx_GIVEREF(__pyx_int_2236228733);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2236228733);
  __Pyx_INCREF(__pyx_int_2336434550);
  __Pyx_GIVEREF(__pyx_int_2336434550);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_2336434550);
  __Pyx_INCREF(__pyx_int_3509871135);
  __Pyx_GIVEREF(__pyx_int_3509871135);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_3509871135);
  __Pyx_INCREF(__pyx_int_3745345300);
  __Pyx_GIVEREF(__pyx_int_3745345300);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_3745345300);
  __Pyx_INCREF(__pyx_int_3441850377);
  __Pyx_GIVEREF(__pyx_int_3441850377);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_3441850377);
  __Pyx_INCREF(__pyx_int_3274667266);
  __Pyx_GIVEREF(__pyx_int_3274667266);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_3274667266);
  __Pyx_INCREF(__pyx_int_3910161971);
  __Pyx_GIVEREF(__pyx_int_3910161971);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_3910161971);
  __Pyx_INCREF(__pyx_int_3877198648);
  __Pyx_GIVEREF(__pyx_int_3877198648);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_3877198648);
  __Pyx_INCREF(__pyx_int_4110568485);
  __Pyx_GIVEREF(__pyx_int_4110568485);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_4110568485);
  __Pyx_INCREF(__pyx_int_4211818798);
  __Pyx_GIVEREF(__pyx_int_4211818798);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_4211818798);
  __Pyx_INCREF(__pyx_int_2597806476);
  __Pyx_GIVEREF(__pyx_int_2597806476);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_2597806476);
  __Pyx_INCREF(__pyx_int_2497604743);
  __Pyx_GIVEREF(__pyx_int_2497604743);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_2497604743);
  __Pyx_INCREF(__pyx_int_2261089178);
  __Pyx_GIVEREF(__pyx_int_2261089178);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_2261089178);
  __Pyx_INCREF(__pyx_int_2295101073);
  __Pyx_GIVEREF(__pyx_int_2295101073);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_2295101073);
  __Pyx_INCREF(__pyx_int_2733856160);
  __Pyx_GIVEREF(__pyx_int_2733856160);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_2733856160);
  __Pyx_INCREF(__pyx_int_2902087851);
  __Pyx_GIVEREF(__pyx_int_2902087851);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_2902087851);
  __Pyx_INCREF(__pyx_int_3202437046);
  __Pyx_GIVEREF(__pyx_int_3202437046);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_3202437046);
  __Pyx_INCREF(__pyx_int_2968011453);
  __Pyx_GIVEREF(__pyx_int_2968011453);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_2968011453);
  __Pyx_INCREF(__pyx_int_3936291284);
  __Pyx_GIVEREF(__pyx_int_3936291284);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_3936291284);
  __Pyx_INCREF(__pyx_int_3835036895);
  __Pyx_GIVEREF(__pyx_int_3835036895);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_3835036895);
  __Pyx_INCREF(__pyx_int_4136440770);
  __Pyx_GIVEREF(__pyx_int_4136440770);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_4136440770);
  __Pyx_INCREF(__pyx_int_4169408201);
  __Pyx_GIVEREF(__pyx_int_4169408201);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_4169408201);
  __Pyx_INCREF(__pyx_int_3535486456);
  __Pyx_GIVEREF(__pyx_int_3535486456);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_3535486456);
  __Pyx_INCREF(__pyx_int_3702665459);
  __Pyx_GIVEREF(__pyx_int_3702665459);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_3702665459);
  __Pyx_INCREF(__pyx_int_3467192302);
  __Pyx_GIVEREF(__pyx_int_3467192302);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_3467192302);
  __Pyx_INCREF(__pyx_int_3231722213);
  __Pyx_GIVEREF(__pyx_int_3231722213);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_3231722213);
  __Pyx_INCREF(__pyx_int_2051518780);
  __Pyx_GIVEREF(__pyx_int_2051518780);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_2051518780);
  __Pyx_INCREF(__pyx_int_1951317047);
  __Pyx_GIVEREF(__pyx_int_1951317047);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_1951317047);
  __Pyx_INCREF(__pyx_int_1716890410);
  __Pyx_GIVEREF(__pyx_int_1716890410);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_1716890410);
  __Pyx_INCREF(__pyx_int_1750902305);
  __Pyx_GIVEREF(__pyx_int_1750902305);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_1750902305);
  __Pyx_INCREF(__pyx_int_1113818384);
  __Pyx_GIVEREF(__pyx_int_1113818384);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_1113818384);
  __Pyx_INCREF(__pyx_int_1282050075);
  __Pyx_GIVEREF(__pyx_int_1282050075);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_1282050075);
  __Pyx_INCREF(__pyx_int_1584504582);
  __Pyx_GIVEREF(__pyx_int_1584504582);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1584504582);
  __Pyx_INCREF(__pyx_int_1350078989);
  __Pyx_GIVEREF(__pyx_int_1350078989);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_1350078989);
  __Pyx_INCREF(__pyx_int_168810852);
  __Pyx_GIVEREF(__pyx_int_168810852);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_168810852);
  __Pyx_INCREF(__pyx_int_67556463);
  __Pyx_GIVEREF(__pyx_int_67556463);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_67556463);
  __Pyx_INCREF(__pyx_int_371049330);
  __Pyx_GIVEREF(__pyx_int_371049330);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_371049330);
  __Pyx_INCREF(__pyx_int_404016761);
  __Pyx_GIVEREF(__pyx_int_404016761);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_404016761);
  __Pyx_INCREF(__pyx_int_841739592);
  __Pyx_GIVEREF(__pyx_int_841739592);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_841739592);
  __Pyx_INCREF(__pyx_int_1008918595);
  __Pyx_GIVEREF(__pyx_int_1008918595);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_1008918595);
  __Pyx_INCREF(__pyx_int_775550814);
  __Pyx_GIVEREF(__pyx_int_775550814);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_775550814);
  __Pyx_INCREF(__pyx_int_540080725);
  __Pyx_GIVEREF(__pyx_int_540080725);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_540080725);
  __Pyx_INCREF(__pyx_int_3969562369);
  __Pyx_GIVEREF(__pyx_int_3969562369);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3969562369);
  __Pyx_INCREF(__pyx_int_3801332234);
  __Pyx_GIVEREF(__pyx_int_3801332234);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_3801332234);
  __Pyx_INCREF(__pyx_int_4035489047);
  __Pyx_GIVEREF(__pyx_int_4035489047);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_4035489047);
  __Pyx_INCREF(__pyx_int_4269907996);
  __Pyx_GIVEREF(__pyx_int_4269907996);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_4269907996);
  __Pyx_INCREF(__pyx_int_3569255213);
  __Pyx_GIVEREF(__pyx_int_3569255213);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_3569255213);
  __Pyx_INCREF(__pyx_int_3669462566);
  __Pyx_GIVEREF(__pyx_int_3669462566);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_3669462566);
  __Pyx_INCREF(__pyx_int_3366754619);
  __Pyx_GIVEREF(__pyx_int_3366754619);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_3366754619);
  __Pyx_INCREF(__pyx_int_3332740144);
  __Pyx_GIVEREF(__pyx_int_3332740144);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_3332740144);
  __Pyx_INCREF(__pyx_int_2631065433);
  __Pyx_GIVEREF(__pyx_int_2631065433);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_2631065433);
  __Pyx_INCREF(__pyx_int_2463879762);
  __Pyx_GIVEREF(__pyx_int_2463879762);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_2463879762);
  __Pyx_INCREF(__pyx_int_2160117071);
  __Pyx_GIVEREF(__pyx_int_2160117071);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_2160117071);
  __Pyx_INCREF(__pyx_int_2395588676);
  __Pyx_GIVEREF(__pyx_int_2395588676);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_2395588676);
  __Pyx_INCREF(__pyx_int_2767645557);
  __Pyx_GIVEREF(__pyx_int_2767645557);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_2767645557);
  __Pyx_INCREF(__pyx_int_2868897406);
  __Pyx_GIVEREF(__pyx_int_2868897406);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_2868897406);
  __Pyx_INCREF(__pyx_int_3102011747);
  __Pyx_GIVEREF(__pyx_int_3102011747);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_3102011747);
  __Pyx_INCREF(__pyx_int_3069049960);
  __Pyx_GIVEREF(__pyx_int_3069049960);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_3069049960);
  __Pyx_INCREF(__pyx_int_202008497);
  __Pyx_GIVEREF(__pyx_int_202008497);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_202008497);
  __Pyx_INCREF(__pyx_int_33778362);
  __Pyx_GIVEREF(__pyx_int_33778362);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_33778362);
  __Pyx_INCREF(__pyx_int_270040487);
  __Pyx_GIVEREF(__pyx_int_270040487);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_270040487);
  __Pyx_INCREF(__pyx_int_504459436);
  __Pyx_GIVEREF(__pyx_int_504459436);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_504459436);
  __Pyx_INCREF(__pyx_int_875451293);
  __Pyx_GIVEREF(__pyx_int_875451293);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_875451293);
  __Pyx_INCREF(__pyx_int_975658646);
  __Pyx_GIVEREF(__pyx_int_975658646);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_975658646);
  __Pyx_INCREF(__pyx_int_675039627);
  __Pyx_GIVEREF(__pyx_int_675039627);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_675039627);
  __Pyx_INCREF(__pyx_int_641025152);
  __Pyx_GIVEREF(__pyx_int_641025152);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_641025152);
  __Pyx_INCREF(__pyx_int_2084704233);
  __Pyx_GIVEREF(__pyx_int_2084704233);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_2084704233);
  __Pyx_INCREF(__pyx_int_1917518562);
  __Pyx_GIVEREF(__pyx_int_1917518562);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_1917518562);
  __Pyx_INCREF(__pyx_int_1615861247);
  __Pyx_GIVEREF(__pyx_int_1615861247);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1615861247);
  __Pyx_INCREF(__pyx_int_1851332852);
  __Pyx_GIVEREF(__pyx_int_1851332852);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_1851332852);
  __Pyx_INCREF(__pyx_int_1147550661);
  __Pyx_GIVEREF(__pyx_int_1147550661);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_1147550661);
  __Pyx_INCREF(__pyx_int_1248802510);
  __Pyx_GIVEREF(__pyx_int_1248802510);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_1248802510);
  __Pyx_INCREF(__pyx_int_1484005843);
  __Pyx_GIVEREF(__pyx_int_1484005843);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_1484005843);
  __Pyx_INCREF(__pyx_int_1451044056);
  __Pyx_GIVEREF(__pyx_int_1451044056);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_1451044056);
  __Pyx_INCREF(__pyx_int_933301370);
  __Pyx_GIVEREF(__pyx_int_933301370);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_933301370);
  __Pyx_INCREF(__pyx_int_967311729);
  __Pyx_GIVEREF(__pyx_int_967311729);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_967311729);
  __Pyx_INCREF(__pyx_int_733156972);
  __Pyx_GIVEREF(__pyx_int_733156972);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_733156972);
  __Pyx_INCREF(__pyx_int_632953703);
  __Pyx_GIVEREF(__pyx_int_632953703);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_632953703);
  __Pyx_INCREF(__pyx_int_260388950);
  __Pyx_GIVEREF(__pyx_int_260388950);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_260388950);
  __Pyx_INCREF(__pyx_int_25965917);
  __Pyx_GIVEREF(__pyx_int_25965917);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_25965917);
  __Pyx_INCREF(__pyx_int_328671808);
  __Pyx_GIVEREF(__pyx_int_328671808);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_328671808);
  __Pyx_INCREF(__pyx_int_496906059);
  __Pyx_GIVEREF(__pyx_int_496906059);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_496906059);
  __Pyx_INCREF(__pyx_int_1206477858);
  __Pyx_GIVEREF(__pyx_int_1206477858);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_1206477858);
  __Pyx_INCREF(__pyx_int_1239443753);
  __Pyx_GIVEREF(__pyx_int_1239443753);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1239443753);
  __Pyx_INCREF(__pyx_int_1543208500);
  __Pyx_GIVEREF(__pyx_int_1543208500);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_1543208500);
  __Pyx_INCREF(__pyx_int_1441952575);
  __Pyx_GIVEREF(__pyx_int_1441952575);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_1441952575);
  __Pyx_INCREF(__pyx_int_2144161806);
  __Pyx_GIVEREF(__pyx_int_2144161806);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_2144161806);
  __Pyx_INCREF(__pyx_int_1908694277);
  __Pyx_GIVEREF(__pyx_int_1908694277);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1908694277);
  __Pyx_INCREF(__pyx_int_1675577880);
  __Pyx_GIVEREF(__pyx_int_1675577880);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_1675577880);
  __Pyx_INCREF(__pyx_int_1842759443);
  __Pyx_GIVEREF(__pyx_int_1842759443);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_1842759443);
  __Pyx_INCREF(__pyx_int_3610369226);
  __Pyx_GIVEREF(__pyx_int_3610369226);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_3610369226);
  __Pyx_INCREF(__pyx_int_3644379585);
  __Pyx_GIVEREF(__pyx_int_3644379585);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_3644379585);
  __Pyx_INCREF(__pyx_int_3408119516);
  __Pyx_GIVEREF(__pyx_int_3408119516);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_3408119516);
  __Pyx_INCREF(__pyx_int_3307916247);
  __Pyx_GIVEREF(__pyx_int_3307916247);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_3307916247);
  __Pyx_INCREF(__pyx_int_4011190502);
  __Pyx_GIVEREF(__pyx_int_4011190502);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_4011190502);
  __Pyx_INCREF(__pyx_int_3776767469);
  __Pyx_GIVEREF(__pyx_int_3776767469);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3776767469);
  __Pyx_INCREF(__pyx_int_4077384432);
  __Pyx_GIVEREF(__pyx_int_4077384432);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_4077384432);
  __Pyx_INCREF(__pyx_int_4245618683);
  __Pyx_GIVEREF(__pyx_int_4245618683);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_4245618683);
  __Pyx_INCREF(__pyx_int_2809771154);
  __Pyx_GIVEREF(__pyx_int_2809771154);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_2809771154);
  __Pyx_INCREF(__pyx_int_2842737049);
  __Pyx_GIVEREF(__pyx_int_2842737049);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_2842737049);
  __Pyx_INCREF(__pyx_int_3144396420);
  __Pyx_GIVEREF(__pyx_int_3144396420);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_3144396420);
  __Pyx_INCREF(__pyx_int_3043140495);
  __Pyx_GIVEREF(__pyx_int_3043140495);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_3043140495);
  __Pyx_INCREF(__pyx_int_2673705150);
  __Pyx_GIVEREF(__pyx_int_2673705150);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2673705150);
  __Pyx_INCREF(__pyx_int_2438237621);
  __Pyx_GIVEREF(__pyx_int_2438237621);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_2438237621);
  __Pyx_INCREF(__pyx_int_2203032232);
  __Pyx_GIVEREF(__pyx_int_2203032232);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_2203032232);
  __Pyx_INCREF(__pyx_int_2370213795);
  __Pyx_GIVEREF(__pyx_int_2370213795);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_2370213795);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_U1, __pyx_t_1) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":81
 *     # Transformations for decryption key expansion ~
 *     U1 = [ 0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3 ]
 *     U2 = [ 0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697 ]             # <<<<<<<<<<<<<<
 *     U3 = [ 0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46 ]
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_185469197);
  __Pyx_GIVEREF(__pyx_int_185469197);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_185469197);
  __Pyx_INCREF(__pyx_int_370938394);
  __Pyx_GIVEREF(__pyx_int_370938394);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_370938394);
  __Pyx_INCREF(__pyx_int_487725847);
  __Pyx_GIVEREF(__pyx_int_487725847);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_487725847);
  __Pyx_INCREF(__pyx_int_741876788);
  __Pyx_GIVEREF(__pyx_int_741876788);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_741876788);
  __Pyx_INCREF(__pyx_int_657861945);
  __Pyx_GIVEREF(__pyx_int_657861945);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_657861945);
  __Pyx_INCREF(__pyx_int_975451694);
  __Pyx_GIVEREF(__pyx_int_975451694);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_975451694);
  __Pyx_INCREF(__pyx_int_824852259);
  __Pyx_GIVEREF(__pyx_int_824852259);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_824852259);
  __Pyx_INCREF(__pyx_int_1483753576);
  __Pyx_GIVEREF(__pyx_int_1483753576);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1483753576);
  __Pyx_INCREF(__pyx_int_1400783205);
  __Pyx_GIVEREF(__pyx_int_1400783205);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1400783205);
  __Pyx_INCREF(__pyx_int_1315723890);
  __Pyx_GIVEREF(__pyx_int_1315723890);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1315723890);
  __Pyx_INCREF(__pyx_int_1164071807);
  __Pyx_GIVEREF(__pyx_int_1164071807);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_1164071807);
  __Pyx_INCREF(__pyx_int_1950903388);
  __Pyx_GIVEREF(__pyx_int_1950903388);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_1950903388);
  __Pyx_INCREF(__pyx_int_2135319889);
  __Pyx_GIVEREF(__pyx_int_2135319889);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_2135319889);
  __Pyx_INCREF(__pyx_int_1649704518);
  __Pyx_GIVEREF(__pyx_int_1649704518);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_1649704518);
  __Pyx_INCREF(__pyx_int_1767536459);
  __Pyx_GIVEREF(__pyx_int_1767536459);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1767536459);
  __Pyx_INCREF(__pyx_int_2967507152);
  __Pyx_GIVEREF(__pyx_int_2967507152);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_2967507152);
  __Pyx_INCREF(__pyx_int_3152976349);
  __Pyx_GIVEREF(__pyx_int_3152976349);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_3152976349);
  __Pyx_INCREF(__pyx_int_2801566410);
  __Pyx_GIVEREF(__pyx_int_2801566410);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_2801566410);
  __Pyx_INCREF(__pyx_int_2918353863);
  __Pyx_GIVEREF(__pyx_int_2918353863);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_2918353863);
  __Pyx_INCREF(__pyx_int_2631447780);
  __Pyx_GIVEREF(__pyx_int_2631447780);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_2631447780);
  __Pyx_INCREF(__pyx_int_2547432937);
  __Pyx_GIVEREF(__pyx_int_2547432937);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_2547432937);
  __Pyx_INCREF(__pyx_int_2328143614);
  __Pyx_GIVEREF(__pyx_int_2328143614);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2328143614);
  __Pyx_INCREF(__pyx_int_2177544179);
  __Pyx_GIVEREF(__pyx_int_2177544179);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_2177544179);
  __Pyx_INCREF(__pyx_int_3901806776);
  __Pyx_GIVEREF(__pyx_int_3901806776);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_3901806776);
  __Pyx_INCREF(__pyx_int_3818836405);
  __Pyx_GIVEREF(__pyx_int_3818836405);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3818836405);
  __Pyx_INCREF(__pyx_int_4270639778);
  __Pyx_GIVEREF(__pyx_int_4270639778);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_4270639778);
  __Pyx_INCREF(__pyx_int_4118987695);
  __Pyx_GIVEREF(__pyx_int_4118987695);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_4118987695);
  __Pyx_INCREF(__pyx_int_3299409036);
  __Pyx_GIVEREF(__pyx_int_3299409036);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_3299409036);
  __Pyx_INCREF(__pyx_int_3483825537);
  __Pyx_GIVEREF(__pyx_int_3483825537);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_3483825537);
  __Pyx_INCREF(__pyx_int_3535072918);
  __Pyx_GIVEREF(__pyx_int_3535072918);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_3535072918);
  __Pyx_INCREF(__pyx_int_3652904859);
  __Pyx_GIVEREF(__pyx_int_3652904859);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3652904859);
  __Pyx_INCREF(__pyx_int_2077965243);
  __Pyx_GIVEREF(__pyx_int_2077965243);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_2077965243);
  __Pyx_INCREF(__pyx_int_1893020342);
  __Pyx_GIVEREF(__pyx_int_1893020342);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_1893020342);
  __Pyx_INCREF(__pyx_int_1841768865);
  __Pyx_GIVEREF(__pyx_int_1841768865);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_1841768865);
  __Pyx_INCREF(__pyx_int_1724457132);
  __Pyx_GIVEREF(__pyx_int_1724457132);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_1724457132);
  __Pyx_INCREF(__pyx_int_1474502543);
  __Pyx_GIVEREF(__pyx_int_1474502543);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_1474502543);
  __Pyx_INCREF(__pyx_int_1559041666);
  __Pyx_GIVEREF(__pyx_int_1559041666);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_1559041666);
  __Pyx_INCREF(__pyx_int_1107234197);
  __Pyx_GIVEREF(__pyx_int_1107234197);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_1107234197);
  __Pyx_INCREF(__pyx_int_1257309336);
  __Pyx_GIVEREF(__pyx_int_1257309336);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_1257309336);
  __Pyx_INCREF(__pyx_int_598438867);
  __Pyx_GIVEREF(__pyx_int_598438867);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_598438867);
  __Pyx_INCREF(__pyx_int_681933534);
  __Pyx_GIVEREF(__pyx_int_681933534);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_681933534);
  __Pyx_INCREF(__pyx_int_901210569);
  __Pyx_GIVEREF(__pyx_int_901210569);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_901210569);
  __Pyx_INCREF(__pyx_int_1052338372);
  __Pyx_GIVEREF(__pyx_int_1052338372);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_1052338372);
  __Pyx_INCREF(__pyx_int_261314535);
  __Pyx_GIVEREF(__pyx_int_261314535);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_261314535);
  __Pyx_INCREF(__pyx_int_77422314);
  __Pyx_GIVEREF(__pyx_int_77422314);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_77422314);
  __Pyx_INCREF(__pyx_int_428819965);
  __Pyx_GIVEREF(__pyx_int_428819965);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_428819965);
  __Pyx_INCREF(__pyx_int_310463728);
  __Pyx_GIVEREF(__pyx_int_310463728);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_310463728);
  __Pyx_INCREF(__pyx_int_3409685355);
  __Pyx_GIVEREF(__pyx_int_3409685355);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_3409685355);
  __Pyx_INCREF(__pyx_int_3224740454);
  __Pyx_GIVEREF(__pyx_int_3224740454);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_3224740454);
  __Pyx_INCREF(__pyx_int_3710368113);
  __Pyx_GIVEREF(__pyx_int_3710368113);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_3710368113);
  __Pyx_INCREF(__pyx_int_3593056380);
  __Pyx_GIVEREF(__pyx_int_3593056380);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_3593056380);
  __Pyx_INCREF(__pyx_int_3875770207);
  __Pyx_GIVEREF(__pyx_int_3875770207);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_3875770207);
  __Pyx_INCREF(__pyx_int_3960309330);
  __Pyx_GIVEREF(__pyx_int_3960309330);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_3960309330);
  __Pyx_INCREF(__pyx_int_4045380933);
  __Pyx_GIVEREF(__pyx_int_4045380933);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_4045380933);
  __Pyx_INCREF(__pyx_int_4195456072);
  __Pyx_GIVEREF(__pyx_int_4195456072);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_4195456072);
  __Pyx_INCREF(__pyx_int_2471224067);
  __Pyx_GIVEREF(__pyx_int_2471224067);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_2471224067);
  __Pyx_INCREF(__pyx_int_2554718734);
  __Pyx_GIVEREF(__pyx_int_2554718734);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_2554718734);
  __Pyx_INCREF(__pyx_int_2237133081);
  __Pyx_GIVEREF(__pyx_int_2237133081);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_2237133081);
  __Pyx_INCREF(__pyx_int_2388260884);
  __Pyx_GIVEREF(__pyx_int_2388260884);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_2388260884);
  __Pyx_INCREF(__pyx_int_3212035895);
  __Pyx_GIVEREF(__pyx_int_3212035895);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_3212035895);
  __Pyx_INCREF(__pyx_int_3028143674);
  __Pyx_GIVEREF(__pyx_int_3028143674);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_3028143674);
  __Pyx_INCREF(__pyx_int_2842678573);
  __Pyx_GIVEREF(__pyx_int_2842678573);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_2842678573);
  __Pyx_INCREF(__pyx_int_2724322336);
  __Pyx_GIVEREF(__pyx_int_2724322336);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_2724322336);
  __Pyx_INCREF(__pyx_int_4138563181);
  __Pyx_GIVEREF(__pyx_int_4138563181);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_4138563181);
  __Pyx_INCREF(__pyx_int_4255350624);
  __Pyx_GIVEREF(__pyx_int_4255350624);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_4255350624);
  __Pyx_INCREF(__pyx_int_3769721975);
  __Pyx_GIVEREF(__pyx_int_3769721975);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_3769721975);
  __Pyx_INCREF(__pyx_int_3955191162);
  __Pyx_GIVEREF(__pyx_int_3955191162);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_3955191162);
  __Pyx_INCREF(__pyx_int_3667219033);
  __Pyx_GIVEREF(__pyx_int_3667219033);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_3667219033);
  __Pyx_INCREF(__pyx_int_3516619604);
  __Pyx_GIVEREF(__pyx_int_3516619604);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_3516619604);
  __Pyx_INCREF(__pyx_int_3431546947);
  __Pyx_GIVEREF(__pyx_int_3431546947);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_3431546947);
  __Pyx_INCREF(__pyx_int_3347532110);
  __Pyx_GIVEREF(__pyx_int_3347532110);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_3347532110);
  __Pyx_INCREF(__pyx_int_2933734917);
  __Pyx_GIVEREF(__pyx_int_2933734917);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_2933734917);
  __Pyx_INCREF(__pyx_int_2782082824);
  __Pyx_GIVEREF(__pyx_int_2782082824);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_2782082824);
  __Pyx_INCREF(__pyx_int_3099667487);
  __Pyx_GIVEREF(__pyx_int_3099667487);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_3099667487);
  __Pyx_INCREF(__pyx_int_3016697106);
  __Pyx_GIVEREF(__pyx_int_3016697106);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_3016697106);
  __Pyx_INCREF(__pyx_int_2196052529);
  __Pyx_GIVEREF(__pyx_int_2196052529);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_2196052529);
  __Pyx_INCREF(__pyx_int_2313884476);
  __Pyx_GIVEREF(__pyx_int_2313884476);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_2313884476);
  __Pyx_INCREF(__pyx_int_2499348523);
  __Pyx_GIVEREF(__pyx_int_2499348523);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_2499348523);
  __Pyx_INCREF(__pyx_int_2683765030);
  __Pyx_GIVEREF(__pyx_int_2683765030);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_2683765030);
  __Pyx_INCREF(__pyx_int_1179510461);
  __Pyx_GIVEREF(__pyx_int_1179510461);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_1179510461);
  __Pyx_INCREF(__pyx_int_1296297904);
  __Pyx_GIVEREF(__pyx_int_1296297904);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_1296297904);
  __Pyx_INCREF(__pyx_int_1347548327);
  __Pyx_GIVEREF(__pyx_int_1347548327);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_1347548327);
  __Pyx_INCREF(__pyx_int_1533017514);
  __Pyx_GIVEREF(__pyx_int_1533017514);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_1533017514);
  __Pyx_INCREF(__pyx_int_1786102409);
  __Pyx_GIVEREF(__pyx_int_1786102409);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_1786102409);
  __Pyx_INCREF(__pyx_int_1635502980);
  __Pyx_GIVEREF(__pyx_int_1635502980);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_1635502980);
  __Pyx_INCREF(__pyx_int_2087309459);
  __Pyx_GIVEREF(__pyx_int_2087309459);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_2087309459);
  __Pyx_INCREF(__pyx_int_2003294622);
  __Pyx_GIVEREF(__pyx_int_2003294622);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_2003294622);
  __Pyx_INCREF(__pyx_int_507358933);
  __Pyx_GIVEREF(__pyx_int_507358933);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_507358933);
  __Pyx_INCREF(__pyx_int_355706840);
  __Pyx_GIVEREF(__pyx_int_355706840);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_355706840);
  __Pyx_INCREF(__pyx_int_136428751);
  __Pyx_GIVEREF(__pyx_int_136428751);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_136428751);
  __Pyx_INCREF(__pyx_int_53458370);
  __Pyx_GIVEREF(__pyx_int_53458370);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_53458370);
  __Pyx_INCREF(__pyx_int_839224033);
  __Pyx_GIVEREF(__pyx_int_839224033);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_839224033);
  __Pyx_INCREF(__pyx_int_957055980);
  __Pyx_GIVEREF(__pyx_int_957055980);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_957055980);
  __Pyx_INCREF(__pyx_int_605657339);
  __Pyx_GIVEREF(__pyx_int_605657339);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_605657339);
  __Pyx_INCREF(__pyx_int_790073846);
  __Pyx_GIVEREF(__pyx_int_790073846);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_790073846);
  __Pyx_INCREF(__pyx_int_2373340630);
  __Pyx_GIVEREF(__pyx_int_2373340630);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_2373340630);
  __Pyx_INCREF(__pyx_int_2256028891);
  __Pyx_GIVEREF(__pyx_int_2256028891);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_2256028891);
  __Pyx_INCREF(__pyx_int_2607439820);
  __Pyx_GIVEREF(__pyx_int_2607439820);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_2607439820);
  __Pyx_INCREF(__pyx_int_2422494913);
  __Pyx_GIVEREF(__pyx_int_2422494913);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_2422494913);
  __Pyx_INCREF(__pyx_int_2706270690);
  __Pyx_GIVEREF(__pyx_int_2706270690);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_2706270690);
  __Pyx_INCREF(__pyx_int_2856345839);
  __Pyx_GIVEREF(__pyx_int_2856345839);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_2856345839);
  __Pyx_INCREF(__pyx_int_3075636216);
  __Pyx_GIVEREF(__pyx_int_3075636216);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_3075636216);
  __Pyx_INCREF(__pyx_int_3160175349);
  __Pyx_GIVEREF(__pyx_int_3160175349);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_3160175349);
  __Pyx_INCREF(__pyx_int_3573941694);
  __Pyx_GIVEREF(__pyx_int_3573941694);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_3573941694);
  __Pyx_INCREF(__pyx_int_3725069491);
  __Pyx_GIVEREF(__pyx_int_3725069491);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_3725069491);
  __Pyx_INCREF(__pyx_int_3273267108);
  __Pyx_GIVEREF(__pyx_int_3273267108);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_3273267108);
  __Pyx_INCREF(__pyx_int_3356761769);
  __Pyx_GIVEREF(__pyx_int_3356761769);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_3356761769);
  __Pyx_INCREF(__pyx_int_4181598602);
  __Pyx_GIVEREF(__pyx_int_4181598602);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_4181598602);
  __Pyx_INCREF(__pyx_int_4063242375);
  __Pyx_GIVEREF(__pyx_int_4063242375);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_4063242375);
  __Pyx_INCREF(__pyx_int_4011996048);
  __Pyx_GIVEREF(__pyx_int_4011996048);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_4011996048);
  __Pyx_INCREF(__pyx_int_3828103837);
  __Pyx_GIVEREF(__pyx_int_3828103837);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_3828103837);
  __Pyx_INCREF(__pyx_int_1033297158);
  __Pyx_GIVEREF(__pyx_int_1033297158);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_1033297158);
  __Pyx_INCREF(__pyx_int_915985419);
  __Pyx_GIVEREF(__pyx_int_915985419);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_915985419);
  __Pyx_INCREF(__pyx_int_730517276);
  __Pyx_GIVEREF(__pyx_int_730517276);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_730517276);
  __Pyx_INCREF(__pyx_int_545572369);
  __Pyx_GIVEREF(__pyx_int_545572369);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_545572369);
  __Pyx_INCREF(__pyx_int_296679730);
  __Pyx_GIVEREF(__pyx_int_296679730);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_296679730);
  __Pyx_INCREF(__pyx_int_446754879);
  __Pyx_GIVEREF(__pyx_int_446754879);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_446754879);
  __Pyx_INCREF(__pyx_int_129166120);
  __Pyx_GIVEREF(__pyx_int_129166120);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_129166120);
  __Pyx_INCREF(__pyx_int_213705253);
  __Pyx_GIVEREF(__pyx_int_213705253);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_213705253);
  __Pyx_INCREF(__pyx_int_1709610350);
  __Pyx_GIVEREF(__pyx_int_1709610350);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_1709610350);
  __Pyx_INCREF(__pyx_int_1860738147);
  __Pyx_GIVEREF(__pyx_int_1860738147);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_1860738147);
  __Pyx_INCREF(__pyx_int_1945798516);
  __Pyx_GIVEREF(__pyx_int_1945798516);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_1945798516);
  __Pyx_INCREF(__pyx_int_2029293177);
  __Pyx_GIVEREF(__pyx_int_2029293177);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_2029293177);
  __Pyx_INCREF(__pyx_int_1239331162);
  __Pyx_GIVEREF(__pyx_int_1239331162);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_1239331162);
  __Pyx_INCREF(__pyx_int_1120974935);
  __Pyx_GIVEREF(__pyx_int_1120974935);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_1120974935);
  __Pyx_INCREF(__pyx_int_1606591296);
  __Pyx_GIVEREF(__pyx_int_1606591296);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_1606591296);
  __Pyx_INCREF(__pyx_int_1422699085);
  __Pyx_GIVEREF(__pyx_int_1422699085);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_1422699085);
  __Pyx_INCREF(__pyx_int_4148292826);
  __Pyx_GIVEREF(__pyx_int_4148292826);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_4148292826);
  __Pyx_INCREF(__pyx_int_4233094615);
  __Pyx_GIVEREF(__pyx_int_4233094615);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_4233094615);
  __Pyx_INCREF(__pyx_int_3781033664);
  __Pyx_GIVEREF(__pyx_int_3781033664);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_3781033664);
  __Pyx_INCREF(__pyx_int_3931371469);
  __Pyx_GIVEREF(__pyx_int_3931371469);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_3931371469);
  __Pyx_INCREF(__pyx_int_3682191598);
  __Pyx_GIVEREF(__pyx_int_3682191598);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_3682191598);
  __Pyx_INCREF(__pyx_int_3497509347);
  __Pyx_GIVEREF(__pyx_int_3497509347);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_3497509347);
  __Pyx_INCREF(__pyx_int_3446004468);
  __Pyx_GIVEREF(__pyx_int_3446004468);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_3446004468);
  __Pyx_INCREF(__pyx_int_3328955385);
  __Pyx_GIVEREF(__pyx_int_3328955385);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_3328955385);
  __Pyx_INCREF(__pyx_int_2939266226);
  __Pyx_GIVEREF(__pyx_int_2939266226);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_2939266226);
  __Pyx_INCREF(__pyx_int_2755636671);
  __Pyx_GIVEREF(__pyx_int_2755636671);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_2755636671);
  __Pyx_INCREF(__pyx_int_3106780840);
  __Pyx_GIVEREF(__pyx_int_3106780840);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_3106780840);
  __Pyx_INCREF(__pyx_int_2988687269);
  __Pyx_GIVEREF(__pyx_int_2988687269);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_2988687269);
  __Pyx_INCREF(__pyx_int_2198438022);
  __Pyx_GIVEREF(__pyx_int_2198438022);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_2198438022);
  __Pyx_INCREF(__pyx_int_2282195339);
  __Pyx_GIVEREF(__pyx_int_2282195339);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_2282195339);
  __Pyx_INCREF(__pyx_int_2501218972);
  __Pyx_GIVEREF(__pyx_int_2501218972);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_2501218972);
  __Pyx_INCREF(__pyx_int_2652609425);
  __Pyx_GIVEREF(__pyx_int_2652609425);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_2652609425);
  __Pyx_INCREF(__pyx_int_1201765386);
  __Pyx_GIVEREF(__pyx_int_1201765386);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_1201765386);
  __Pyx_INCREF(__pyx_int_1286567175);
  __Pyx_GIVEREF(__pyx_int_1286567175);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_1286567175);
  __Pyx_INCREF(__pyx_int_1371368976);
  __Pyx_GIVEREF(__pyx_int_1371368976);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_1371368976);
  __Pyx_INCREF(__pyx_int_1521706781);
  __Pyx_GIVEREF(__pyx_int_1521706781);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_1521706781);
  __Pyx_INCREF(__pyx_int_1805211710);
  __Pyx_GIVEREF(__pyx_int_1805211710);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1805211710);
  __Pyx_INCREF(__pyx_int_1620529459);
  __Pyx_GIVEREF(__pyx_int_1620529459);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_1620529459);
  __Pyx_INCREF(__pyx_int_2105887268);
  __Pyx_GIVEREF(__pyx_int_2105887268);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_2105887268);
  __Pyx_INCREF(__pyx_int_1988838185);
  __Pyx_GIVEREF(__pyx_int_1988838185);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_1988838185);
  __Pyx_INCREF(__pyx_int_533804130);
  __Pyx_GIVEREF(__pyx_int_533804130);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_533804130);
  __Pyx_INCREF(__pyx_int_350174575);
  __Pyx_GIVEREF(__pyx_int_350174575);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_350174575);
  __Pyx_INCREF(__pyx_int_164439672);
  __Pyx_GIVEREF(__pyx_int_164439672);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_164439672);
  __Pyx_INCREF(__pyx_int_46346101);
  __Pyx_GIVEREF(__pyx_int_46346101);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_46346101);
  __Pyx_INCREF(__pyx_int_870912086);
  __Pyx_GIVEREF(__pyx_int_870912086);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_870912086);
  __Pyx_INCREF(__pyx_int_954669403);
  __Pyx_GIVEREF(__pyx_int_954669403);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_954669403);
  __Pyx_INCREF(__pyx_int_636813900);
  __Pyx_GIVEREF(__pyx_int_636813900);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_636813900);
  __Pyx_INCREF(__pyx_int_788204353);
  __Pyx_GIVEREF(__pyx_int_788204353);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_788204353);
  __Pyx_INCREF(__pyx_int_2358957921);
  __Pyx_GIVEREF(__pyx_int_2358957921);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_2358957921);
  __Pyx_INCREF(__pyx_int_2274680428);
  __Pyx_GIVEREF(__pyx_int_2274680428);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_2274680428);
  __Pyx_INCREF(__pyx_int_2592523643);
  __Pyx_GIVEREF(__pyx_int_2592523643);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_2592523643);
  __Pyx_INCREF(__pyx_int_2441661558);
  __Pyx_GIVEREF(__pyx_int_2441661558);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_2441661558);
  __Pyx_INCREF(__pyx_int_2695033685);
  __Pyx_GIVEREF(__pyx_int_2695033685);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_2695033685);
  __Pyx_INCREF(__pyx_int_2880240216);
  __Pyx_GIVEREF(__pyx_int_2880240216);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_2880240216);
  __Pyx_INCREF(__pyx_int_3065962831);
  __Pyx_GIVEREF(__pyx_int_3065962831);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_3065962831);
  __Pyx_INCREF(__pyx_int_3182487618);
  __Pyx_GIVEREF(__pyx_int_3182487618);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_3182487618);
  __Pyx_INCREF(__pyx_int_3572145929);
  __Pyx_GIVEREF(__pyx_int_3572145929);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_3572145929);
  __Pyx_INCREF(__pyx_int_3756299780);
  __Pyx_GIVEREF(__pyx_int_3756299780);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_3756299780);
  __Pyx_INCREF(__pyx_int_3270937875);
  __Pyx_GIVEREF(__pyx_int_3270937875);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_3270937875);
  __Pyx_INCREF(__pyx_int_3388507166);
  __Pyx_GIVEREF(__pyx_int_3388507166);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_3388507166);
  __Pyx_INCREF(__pyx_int_4174560061);
  __Pyx_GIVEREF(__pyx_int_4174560061);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_4174560061);
  __Pyx_INCREF(__pyx_int_4091327024);
  __Pyx_GIVEREF(__pyx_int_4091327024);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_4091327024);
  __Pyx_INCREF(__pyx_int_4006521127);
  __Pyx_GIVEREF(__pyx_int_4006521127);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_4006521127);
  __Pyx_INCREF(__pyx_int_3854606378);
  __Pyx_GIVEREF(__pyx_int_3854606378);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_3854606378);
  __Pyx_INCREF(__pyx_int_1014646705);
  __Pyx_GIVEREF(__pyx_int_1014646705);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_1014646705);
  __Pyx_INCREF(__pyx_int_930369212);
  __Pyx_GIVEREF(__pyx_int_930369212);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_930369212);
  __Pyx_INCREF(__pyx_int_711349675);
  __Pyx_GIVEREF(__pyx_int_711349675);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_711349675);
  __Pyx_INCREF(__pyx_int_560487590);
  __Pyx_GIVEREF(__pyx_int_560487590);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_560487590);
  __Pyx_INCREF(__pyx_int_272786309);
  __Pyx_GIVEREF(__pyx_int_272786309);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_272786309);
  __Pyx_INCREF(__pyx_int_457992840);
  __Pyx_GIVEREF(__pyx_int_457992840);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_457992840);
  __Pyx_INCREF(__pyx_int_106852767);
  __Pyx_GIVEREF(__pyx_int_106852767);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_106852767);
  __Pyx_INCREF(__pyx_int_223377554);
  __Pyx_GIVEREF(__pyx_int_223377554);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_223377554);
  __Pyx_INCREF(__pyx_int_1678381017);
  __Pyx_GIVEREF(__pyx_int_1678381017);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_1678381017);
  __Pyx_INCREF(__pyx_int_1862534868);
  __Pyx_GIVEREF(__pyx_int_1862534868);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_1862534868);
  __Pyx_INCREF(__pyx_int_1914052035);
  __Pyx_GIVEREF(__pyx_int_1914052035);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_1914052035);
  __Pyx_INCREF(__pyx_int_2031621326);
  __Pyx_GIVEREF(__pyx_int_2031621326);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_2031621326);
  __Pyx_INCREF(__pyx_int_1211247597);
  __Pyx_GIVEREF(__pyx_int_1211247597);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_1211247597);
  __Pyx_INCREF(__pyx_int_1128014560);
  __Pyx_GIVEREF(__pyx_int_1128014560);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_1128014560);
  __Pyx_INCREF(__pyx_int_1580087799);
  __Pyx_GIVEREF(__pyx_int_1580087799);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_1580087799);
  __Pyx_INCREF(__pyx_int_1428173050);
  __Pyx_GIVEREF(__pyx_int_1428173050);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_1428173050);
  __Pyx_INCREF(__pyx_int_32283319);
  __Pyx_GIVEREF(__pyx_int_32283319);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_32283319);
  __Pyx_INCREF(__pyx_int_182621114);
  __Pyx_GIVEREF(__pyx_int_182621114);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_182621114);
  __Pyx_INCREF(__pyx_int_401639597);
  __Pyx_GIVEREF(__pyx_int_401639597);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_401639597);
  __Pyx_INCREF(__pyx_int_486441376);
  __Pyx_GIVEREF(__pyx_int_486441376);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_486441376);
  __Pyx_INCREF(__pyx_int_768917123);
  __Pyx_GIVEREF(__pyx_int_768917123);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_768917123);
  __Pyx_INCREF(__pyx_int_651868046);
  __Pyx_GIVEREF(__pyx_int_651868046);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_651868046);
  __Pyx_INCREF(__pyx_int_1003007129);
  __Pyx_GIVEREF(__pyx_int_1003007129);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_1003007129);
  __Pyx_INCREF(__pyx_int_818324884);
  __Pyx_GIVEREF(__pyx_int_818324884);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_818324884);
  __Pyx_INCREF(__pyx_int_1503449823);
  __Pyx_GIVEREF(__pyx_int_1503449823);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_1503449823);
  __Pyx_INCREF(__pyx_int_1385356242);
  __Pyx_GIVEREF(__pyx_int_1385356242);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_1385356242);
  __Pyx_INCREF(__pyx_int_1333838021);
  __Pyx_GIVEREF(__pyx_int_1333838021);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_1333838021);
  __Pyx_INCREF(__pyx_int_1150208456);
  __Pyx_GIVEREF(__pyx_int_1150208456);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_1150208456);
  __Pyx_INCREF(__pyx_int_1973745387);
  __Pyx_GIVEREF(__pyx_int_1973745387);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_1973745387);
  __Pyx_INCREF(__pyx_int_2125135846);
  __Pyx_GIVEREF(__pyx_int_2125135846);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_2125135846);
  __Pyx_INCREF(__pyx_int_1673061617);
  __Pyx_GIVEREF(__pyx_int_1673061617);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_1673061617);
  __Pyx_INCREF(__pyx_int_1756818940);
  __Pyx_GIVEREF(__pyx_int_1756818940);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_1756818940);
  __Pyx_INCREF(__pyx_int_2970356327);
  __Pyx_GIVEREF(__pyx_int_2970356327);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_2970356327);
  __Pyx_INCREF(__pyx_int_3120694122);
  __Pyx_GIVEREF(__pyx_int_3120694122);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_3120694122);
  __Pyx_INCREF(__pyx_int_2802849917);
  __Pyx_GIVEREF(__pyx_int_2802849917);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_2802849917);
  __Pyx_INCREF(__pyx_int_2887651696);
  __Pyx_GIVEREF(__pyx_int_2887651696);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_2887651696);
  __Pyx_INCREF(__pyx_int_2637442643);
  __Pyx_GIVEREF(__pyx_int_2637442643);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_2637442643);
  __Pyx_INCREF(__pyx_int_2520393566);
  __Pyx_GIVEREF(__pyx_int_2520393566);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_2520393566);
  __Pyx_INCREF(__pyx_int_2334669897);
  __Pyx_GIVEREF(__pyx_int_2334669897);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_2334669897);
  __Pyx_INCREF(__pyx_int_2149987652);
  __Pyx_GIVEREF(__pyx_int_2149987652);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_2149987652);
  __Pyx_INCREF(__pyx_int_3917234703);
  __Pyx_GIVEREF(__pyx_int_3917234703);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_3917234703);
  __Pyx_INCREF(__pyx_int_3799141122);
  __Pyx_GIVEREF(__pyx_int_3799141122);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_3799141122);
  __Pyx_INCREF(__pyx_int_4284502037);
  __Pyx_GIVEREF(__pyx_int_4284502037);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_4284502037);
  __Pyx_INCREF(__pyx_int_4100872472);
  __Pyx_GIVEREF(__pyx_int_4100872472);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_4100872472);
  __Pyx_INCREF(__pyx_int_3309594171);
  __Pyx_GIVEREF(__pyx_int_3309594171);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_3309594171);
  __Pyx_INCREF(__pyx_int_3460984630);
  __Pyx_GIVEREF(__pyx_int_3460984630);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_3460984630);
  __Pyx_INCREF(__pyx_int_3545789473);
  __Pyx_GIVEREF(__pyx_int_3545789473);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_3545789473);
  __Pyx_INCREF(__pyx_int_3629546796);
  __Pyx_GIVEREF(__pyx_int_3629546796);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_3629546796);
  __Pyx_INCREF(__pyx_int_2050466060);
  __Pyx_GIVEREF(__pyx_int_2050466060);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_2050466060);
  __Pyx_INCREF(__pyx_int_1899603969);
  __Pyx_GIVEREF(__pyx_int_1899603969);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_1899603969);
  __Pyx_INCREF(__pyx_int_1814803222);
  __Pyx_GIVEREF(__pyx_int_1814803222);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_1814803222);
  __Pyx_INCREF(__pyx_int_1730525723);
  __Pyx_GIVEREF(__pyx_int_1730525723);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_1730525723);
  __Pyx_INCREF(__pyx_int_1443857720);
  __Pyx_GIVEREF(__pyx_int_1443857720);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_1443857720);
  __Pyx_INCREF(__pyx_int_1560382517);
  __Pyx_GIVEREF(__pyx_int_1560382517);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_1560382517);
  __Pyx_INCREF(__pyx_int_1075025698);
  __Pyx_GIVEREF(__pyx_int_1075025698);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_1075025698);
  __Pyx_INCREF(__pyx_int_1260232239);
  __Pyx_GIVEREF(__pyx_int_1260232239);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_1260232239);
  __Pyx_INCREF(__pyx_int_575138148);
  __Pyx_GIVEREF(__pyx_int_575138148);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_575138148);
  __Pyx_INCREF(__pyx_int_692707433);
  __Pyx_GIVEREF(__pyx_int_692707433);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_692707433);
  __Pyx_INCREF(__pyx_int_878443390);
  __Pyx_GIVEREF(__pyx_int_878443390);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_878443390);
  __Pyx_INCREF(__pyx_int_1062597235);
  __Pyx_GIVEREF(__pyx_int_1062597235);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_1062597235);
  __Pyx_INCREF(__pyx_int_243256656);
  __Pyx_GIVEREF(__pyx_int_243256656);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_243256656);
  __Pyx_INCREF(__pyx_int_91341917);
  __Pyx_GIVEREF(__pyx_int_91341917);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_91341917);
  __Pyx_INCREF(__pyx_int_409198410);
  __Pyx_GIVEREF(__pyx_int_409198410);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_409198410);
  __Pyx_INCREF(__pyx_int_325965383);
  __Pyx_GIVEREF(__pyx_int_325965383);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_325965383);
  __Pyx_INCREF(__pyx_int_3403100636);
  __Pyx_GIVEREF(__pyx_int_3403100636);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_3403100636);
  __Pyx_INCREF(__pyx_int_3252238545);
  __Pyx_GIVEREF(__pyx_int_3252238545);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_3252238545);
  __Pyx_INCREF(__pyx_int_3704300486);
  __Pyx_GIVEREF(__pyx_int_3704300486);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_3704300486);
  __Pyx_INCREF(__pyx_int_3620022987);
  __Pyx_GIVEREF(__pyx_int_3620022987);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_3620022987);
  __Pyx_INCREF(__pyx_int_3874428392);
  __Pyx_GIVEREF(__pyx_int_3874428392);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3874428392);
  __Pyx_INCREF(__pyx_int_3990953189);
  __Pyx_GIVEREF(__pyx_int_3990953189);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3990953189);
  __Pyx_INCREF(__pyx_int_4042459122);
  __Pyx_GIVEREF(__pyx_int_4042459122);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_4042459122);
  __Pyx_INCREF(__pyx_int_4227665663);
  __Pyx_GIVEREF(__pyx_int_4227665663);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_4227665663);
  __Pyx_INCREF(__pyx_int_2460449204);
  __Pyx_GIVEREF(__pyx_int_2460449204);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_2460449204);
  __Pyx_INCREF(__pyx_int_2578018489);
  __Pyx_GIVEREF(__pyx_int_2578018489);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_2578018489);
  __Pyx_INCREF(__pyx_int_2226875310);
  __Pyx_GIVEREF(__pyx_int_2226875310);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_2226875310);
  __Pyx_INCREF(__pyx_int_2411029155);
  __Pyx_GIVEREF(__pyx_int_2411029155);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_2411029155);
  __Pyx_INCREF(__pyx_int_3198115200);
  __Pyx_GIVEREF(__pyx_int_3198115200);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_3198115200);
  __Pyx_INCREF(__pyx_int_3046200461);
  __Pyx_GIVEREF(__pyx_int_3046200461);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_3046200461);
  __Pyx_INCREF(__pyx_int_2827177882);
  __Pyx_GIVEREF(__pyx_int_2827177882);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_2827177882);
  __Pyx_INCREF(__pyx_int_2743944855);
  __Pyx_GIVEREF(__pyx_int_2743944855);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_2743944855);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_U2, __pyx_t_1) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":82
 *     U1 = [ 0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3 ]
 *     U2 = [ 0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697 ]
 *     U3 = [ 0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46 ]             # <<<<<<<<<<<<<<
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 * 
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_218828297);
  __Pyx_GIVEREF(__pyx_int_218828297);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_218828297);
  __Pyx_INCREF(__pyx_int_437656594);
  __Pyx_GIVEREF(__pyx_int_437656594);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_437656594);
  __Pyx_INCREF(__pyx_int_387781147);
  __Pyx_GIVEREF(__pyx_int_387781147);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_387781147);
  __Pyx_INCREF(__pyx_int_875313188);
  __Pyx_GIVEREF(__pyx_int_875313188);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_875313188);
  __Pyx_INCREF(__pyx_int_958871085);
  __Pyx_GIVEREF(__pyx_int_958871085);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_958871085);
  __Pyx_INCREF(__pyx_int_775562294);
  __Pyx_GIVEREF(__pyx_int_775562294);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_775562294);
  __Pyx_INCREF(__pyx_int_590424639);
  __Pyx_GIVEREF(__pyx_int_590424639);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_590424639);
  __Pyx_INCREF(__pyx_int_1750626376);
  __Pyx_GIVEREF(__pyx_int_1750626376);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1750626376);
  __Pyx_INCREF(__pyx_int_1699970625);
  __Pyx_GIVEREF(__pyx_int_1699970625);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1699970625);
  __Pyx_INCREF(__pyx_int_1917742170);
  __Pyx_GIVEREF(__pyx_int_1917742170);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1917742170);
  __Pyx_INCREF(__pyx_int_2135253587);
  __Pyx_GIVEREF(__pyx_int_2135253587);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_2135253587);
  __Pyx_INCREF(__pyx_int_1551124588);
  __Pyx_GIVEREF(__pyx_int_1551124588);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_1551124588);
  __Pyx_INCREF(__pyx_int_1367295589);
  __Pyx_GIVEREF(__pyx_int_1367295589);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_1367295589);
  __Pyx_INCREF(__pyx_int_1180849278);
  __Pyx_GIVEREF(__pyx_int_1180849278);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_1180849278);
  __Pyx_INCREF(__pyx_int_1265195639);
  __Pyx_GIVEREF(__pyx_int_1265195639);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_1265195639);
  __Pyx_INCREF(__pyx_int_3501252752);
  __Pyx_GIVEREF(__pyx_int_3501252752);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_3501252752);
  __Pyx_INCREF(__pyx_int_3720081049);
  __Pyx_GIVEREF(__pyx_int_3720081049);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_3720081049);
  __Pyx_INCREF(__pyx_int_3399941250);
  __Pyx_GIVEREF(__pyx_int_3399941250);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_3399941250);
  __Pyx_INCREF(__pyx_int_3350065803);
  __Pyx_GIVEREF(__pyx_int_3350065803);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_3350065803);
  __Pyx_INCREF(__pyx_int_3835484340);
  __Pyx_GIVEREF(__pyx_int_3835484340);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_3835484340);
  __Pyx_INCREF(__pyx_int_3919042237);
  __Pyx_GIVEREF(__pyx_int_3919042237);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_3919042237);
  __Pyx_INCREF(__pyx_int_4270507174);
  __Pyx_GIVEREF(__pyx_int_4270507174);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_4270507174);
  __Pyx_INCREF(__pyx_int_4085369519);
  __Pyx_GIVEREF(__pyx_int_4085369519);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_4085369519);
  __Pyx_INCREF(__pyx_int_3102249176);
  __Pyx_GIVEREF(__pyx_int_3102249176);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_3102249176);
  __Pyx_INCREF(__pyx_int_3051593425);
  __Pyx_GIVEREF(__pyx_int_3051593425);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3051593425);
  __Pyx_INCREF(__pyx_int_2734591178);
  __Pyx_GIVEREF(__pyx_int_2734591178);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_2734591178);
  __Pyx_INCREF(__pyx_int_2952102595);
  __Pyx_GIVEREF(__pyx_int_2952102595);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_2952102595);
  __Pyx_INCREF(__pyx_int_2361698556);
  __Pyx_GIVEREF(__pyx_int_2361698556);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_2361698556);
  __Pyx_INCREF(__pyx_int_2177869557);
  __Pyx_GIVEREF(__pyx_int_2177869557);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_2177869557);
  __Pyx_INCREF(__pyx_int_2530391278);
  __Pyx_GIVEREF(__pyx_int_2530391278);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_2530391278);
  __Pyx_INCREF(__pyx_int_2614737639);
  __Pyx_GIVEREF(__pyx_int_2614737639);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_2614737639);
  __Pyx_INCREF(__pyx_int_3145456443);
  __Pyx_GIVEREF(__pyx_int_3145456443);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_3145456443);
  __Pyx_INCREF(__pyx_int_3060847922);
  __Pyx_GIVEREF(__pyx_int_3060847922);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_3060847922);
  __Pyx_INCREF(__pyx_int_2708326185);
  __Pyx_GIVEREF(__pyx_int_2708326185);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_2708326185);
  __Pyx_INCREF(__pyx_int_2892417312);
  __Pyx_GIVEREF(__pyx_int_2892417312);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_2892417312);
  __Pyx_INCREF(__pyx_int_2404901663);
  __Pyx_GIVEREF(__pyx_int_2404901663);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_2404901663);
  __Pyx_INCREF(__pyx_int_2187128086);
  __Pyx_GIVEREF(__pyx_int_2187128086);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_2187128086);
  __Pyx_INCREF(__pyx_int_2504130317);
  __Pyx_GIVEREF(__pyx_int_2504130317);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_2504130317);
  __Pyx_INCREF(__pyx_int_2555048196);
  __Pyx_GIVEREF(__pyx_int_2555048196);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_2555048196);
  __Pyx_INCREF(__pyx_int_3542330227);
  __Pyx_GIVEREF(__pyx_int_3542330227);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_3542330227);
  __Pyx_INCREF(__pyx_int_3727205754);
  __Pyx_GIVEREF(__pyx_int_3727205754);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_3727205754);
  __Pyx_INCREF(__pyx_int_3375740769);
  __Pyx_GIVEREF(__pyx_int_3375740769);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_3375740769);
  __Pyx_INCREF(__pyx_int_3292445032);
  __Pyx_GIVEREF(__pyx_int_3292445032);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_3292445032);
  __Pyx_INCREF(__pyx_int_3876557655);
  __Pyx_GIVEREF(__pyx_int_3876557655);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_3876557655);
  __Pyx_INCREF(__pyx_int_3926170974);
  __Pyx_GIVEREF(__pyx_int_3926170974);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_3926170974);
  __Pyx_INCREF(__pyx_int_4246310725);
  __Pyx_GIVEREF(__pyx_int_4246310725);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_4246310725);
  __Pyx_INCREF(__pyx_int_4027744588);
  __Pyx_GIVEREF(__pyx_int_4027744588);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_4027744588);
  __Pyx_INCREF(__pyx_int_1808481195);
  __Pyx_GIVEREF(__pyx_int_1808481195);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_1808481195);
  __Pyx_INCREF(__pyx_int_1723872674);
  __Pyx_GIVEREF(__pyx_int_1723872674);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_1723872674);
  __Pyx_INCREF(__pyx_int_1910319033);
  __Pyx_GIVEREF(__pyx_int_1910319033);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_1910319033);
  __Pyx_INCREF(__pyx_int_2094410160);
  __Pyx_GIVEREF(__pyx_int_2094410160);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_2094410160);
  __Pyx_INCREF(__pyx_int_1608975247);
  __Pyx_GIVEREF(__pyx_int_1608975247);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_1608975247);
  __Pyx_INCREF(__pyx_int_1391201670);
  __Pyx_GIVEREF(__pyx_int_1391201670);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_1391201670);
  __Pyx_INCREF(__pyx_int_1173430173);
  __Pyx_GIVEREF(__pyx_int_1173430173);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_1173430173);
  __Pyx_INCREF(__pyx_int_1224348052);
  __Pyx_GIVEREF(__pyx_int_1224348052);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_1224348052);
  __Pyx_INCREF(__pyx_int_59984867);
  __Pyx_GIVEREF(__pyx_int_59984867);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_59984867);
  __Pyx_INCREF(__pyx_int_244860394);
  __Pyx_GIVEREF(__pyx_int_244860394);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_244860394);
  __Pyx_INCREF(__pyx_int_428169201);
  __Pyx_GIVEREF(__pyx_int_428169201);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_428169201);
  __Pyx_INCREF(__pyx_int_344873464);
  __Pyx_GIVEREF(__pyx_int_344873464);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_344873464);
  __Pyx_INCREF(__pyx_int_935293895);
  __Pyx_GIVEREF(__pyx_int_935293895);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_935293895);
  __Pyx_INCREF(__pyx_int_984907214);
  __Pyx_GIVEREF(__pyx_int_984907214);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_984907214);
  __Pyx_INCREF(__pyx_int_766078933);
  __Pyx_GIVEREF(__pyx_int_766078933);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_766078933);
  __Pyx_INCREF(__pyx_int_547512796);
  __Pyx_GIVEREF(__pyx_int_547512796);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_547512796);
  __Pyx_INCREF(__pyx_int_1844882806);
  __Pyx_GIVEREF(__pyx_int_1844882806);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_1844882806);
  __Pyx_INCREF(__pyx_int_1627235199);
  __Pyx_GIVEREF(__pyx_int_1627235199);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_1627235199);
  __Pyx_INCREF(__pyx_int_2011214180);
  __Pyx_GIVEREF(__pyx_int_2011214180);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_2011214180);
  __Pyx_INCREF(__pyx_int_2062270317);
  __Pyx_GIVEREF(__pyx_int_2062270317);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_2062270317);
  __Pyx_INCREF(__pyx_int_1507497298);
  __Pyx_GIVEREF(__pyx_int_1507497298);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_1507497298);
  __Pyx_INCREF(__pyx_int_1423022939);
  __Pyx_GIVEREF(__pyx_int_1423022939);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_1423022939);
  __Pyx_INCREF(__pyx_int_1137477952);
  __Pyx_GIVEREF(__pyx_int_1137477952);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_1137477952);
  __Pyx_INCREF(__pyx_int_1321699145);
  __Pyx_GIVEREF(__pyx_int_1321699145);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_1321699145);
  __Pyx_INCREF(__pyx_int_95345982);
  __Pyx_GIVEREF(__pyx_int_95345982);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_95345982);
  __Pyx_INCREF(__pyx_int_145085239);
  __Pyx_GIVEREF(__pyx_int_145085239);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_145085239);
  __Pyx_INCREF(__pyx_int_532201772);
  __Pyx_GIVEREF(__pyx_int_532201772);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_532201772);
  __Pyx_INCREF(__pyx_int_313773861);
  __Pyx_GIVEREF(__pyx_int_313773861);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_313773861);
  __Pyx_INCREF(__pyx_int_830661914);
  __Pyx_GIVEREF(__pyx_int_830661914);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_830661914);
  __Pyx_INCREF(__pyx_int_1015671571);
  __Pyx_GIVEREF(__pyx_int_1015671571);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_1015671571);
  __Pyx_INCREF(__pyx_int_731183368);
  __Pyx_GIVEREF(__pyx_int_731183368);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_731183368);
  __Pyx_INCREF(__pyx_int_648017665);
  __Pyx_GIVEREF(__pyx_int_648017665);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_648017665);
  __Pyx_INCREF(__pyx_int_3175501286);
  __Pyx_GIVEREF(__pyx_int_3175501286);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_3175501286);
  __Pyx_INCREF(__pyx_int_2957853679);
  __Pyx_GIVEREF(__pyx_int_2957853679);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_2957853679);
  __Pyx_INCREF(__pyx_int_2807058932);
  __Pyx_GIVEREF(__pyx_int_2807058932);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_2807058932);
  __Pyx_INCREF(__pyx_int_2858115069);
  __Pyx_GIVEREF(__pyx_int_2858115069);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_2858115069);
  __Pyx_INCREF(__pyx_int_2305455554);
  __Pyx_GIVEREF(__pyx_int_2305455554);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_2305455554);
  __Pyx_INCREF(__pyx_int_2220981195);
  __Pyx_GIVEREF(__pyx_int_2220981195);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_2220981195);
  __Pyx_INCREF(__pyx_int_2474404304);
  __Pyx_GIVEREF(__pyx_int_2474404304);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_2474404304);
  __Pyx_INCREF(__pyx_int_2658625497);
  __Pyx_GIVEREF(__pyx_int_2658625497);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_2658625497);
  __Pyx_INCREF(__pyx_int_3575528878);
  __Pyx_GIVEREF(__pyx_int_3575528878);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_3575528878);
  __Pyx_INCREF(__pyx_int_3625268135);
  __Pyx_GIVEREF(__pyx_int_3625268135);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_3625268135);
  __Pyx_INCREF(__pyx_int_3473416636);
  __Pyx_GIVEREF(__pyx_int_3473416636);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3473416636);
  __Pyx_INCREF(__pyx_int_3254988725);
  __Pyx_GIVEREF(__pyx_int_3254988725);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_3254988725);
  __Pyx_INCREF(__pyx_int_3778151818);
  __Pyx_GIVEREF(__pyx_int_3778151818);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_3778151818);
  __Pyx_INCREF(__pyx_int_3963161475);
  __Pyx_GIVEREF(__pyx_int_3963161475);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_3963161475);
  __Pyx_INCREF(__pyx_int_4213447064);
  __Pyx_GIVEREF(__pyx_int_4213447064);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_4213447064);
  __Pyx_INCREF(__pyx_int_4130281361);
  __Pyx_GIVEREF(__pyx_int_4130281361);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_4130281361);
  __Pyx_INCREF(__pyx_int_3599595085);
  __Pyx_GIVEREF(__pyx_int_3599595085);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_3599595085);
  __Pyx_INCREF(__pyx_int_3683022916);
  __Pyx_GIVEREF(__pyx_int_3683022916);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_3683022916);
  __Pyx_INCREF(__pyx_int_3432737375);
  __Pyx_GIVEREF(__pyx_int_3432737375);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_3432737375);
  __Pyx_INCREF(__pyx_int_3247465558);
  __Pyx_GIVEREF(__pyx_int_3247465558);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_3247465558);
  __Pyx_INCREF(__pyx_int_3802222185);
  __Pyx_GIVEREF(__pyx_int_3802222185);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_3802222185);
  __Pyx_INCREF(__pyx_int_4020912224);
  __Pyx_GIVEREF(__pyx_int_4020912224);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_4020912224);
  __Pyx_INCREF(__pyx_int_4172763771);
  __Pyx_GIVEREF(__pyx_int_4172763771);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_4172763771);
  __Pyx_INCREF(__pyx_int_4122762354);
  __Pyx_GIVEREF(__pyx_int_4122762354);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_4122762354);
  __Pyx_INCREF(__pyx_int_3201631749);
  __Pyx_GIVEREF(__pyx_int_3201631749);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_3201631749);
  __Pyx_INCREF(__pyx_int_3017672716);
  __Pyx_GIVEREF(__pyx_int_3017672716);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_3017672716);
  __Pyx_INCREF(__pyx_int_2764249623);
  __Pyx_GIVEREF(__pyx_int_2764249623);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_2764249623);
  __Pyx_INCREF(__pyx_int_2848461854);
  __Pyx_GIVEREF(__pyx_int_2848461854);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_2848461854);
  __Pyx_INCREF(__pyx_int_2331590177);
  __Pyx_GIVEREF(__pyx_int_2331590177);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_2331590177);
  __Pyx_INCREF(__pyx_int_2280796200);
  __Pyx_GIVEREF(__pyx_int_2280796200);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_2280796200);
  __Pyx_INCREF(__pyx_int_2431590963);
  __Pyx_GIVEREF(__pyx_int_2431590963);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_2431590963);
  __Pyx_INCREF(__pyx_int_2648976442);
  __Pyx_GIVEREF(__pyx_int_2648976442);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_2648976442);
  __Pyx_INCREF(__pyx_int_104699613);
  __Pyx_GIVEREF(__pyx_int_104699613);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_104699613);
  __Pyx_INCREF(__pyx_int_188127444);
  __Pyx_GIVEREF(__pyx_int_188127444);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_188127444);
  __Pyx_INCREF(__pyx_int_472615631);
  __Pyx_GIVEREF(__pyx_int_472615631);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_472615631);
  __Pyx_INCREF(__pyx_int_287343814);
  __Pyx_GIVEREF(__pyx_int_287343814);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_287343814);
  __Pyx_INCREF(__pyx_int_840019705);
  __Pyx_GIVEREF(__pyx_int_840019705);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_840019705);
  __Pyx_INCREF(__pyx_int_1058709744);
  __Pyx_GIVEREF(__pyx_int_1058709744);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_1058709744);
  __Pyx_INCREF(__pyx_int_671593195);
  __Pyx_GIVEREF(__pyx_int_671593195);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_671593195);
  __Pyx_INCREF(__pyx_int_621591778);
  __Pyx_GIVEREF(__pyx_int_621591778);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_621591778);
  __Pyx_INCREF(__pyx_int_1852171925);
  __Pyx_GIVEREF(__pyx_int_1852171925);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_1852171925);
  __Pyx_INCREF(__pyx_int_1668212892);
  __Pyx_GIVEREF(__pyx_int_1668212892);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_1668212892);
  __Pyx_INCREF(__pyx_int_1953757831);
  __Pyx_GIVEREF(__pyx_int_1953757831);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_1953757831);
  __Pyx_INCREF(__pyx_int_2037970062);
  __Pyx_GIVEREF(__pyx_int_2037970062);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_2037970062);
  __Pyx_INCREF(__pyx_int_1514790577);
  __Pyx_GIVEREF(__pyx_int_1514790577);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_1514790577);
  __Pyx_INCREF(__pyx_int_1463996600);
  __Pyx_GIVEREF(__pyx_int_1463996600);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_1463996600);
  __Pyx_INCREF(__pyx_int_1080017571);
  __Pyx_GIVEREF(__pyx_int_1080017571);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_1080017571);
  __Pyx_INCREF(__pyx_int_1297403050);
  __Pyx_GIVEREF(__pyx_int_1297403050);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_1297403050);
  __Pyx_INCREF(__pyx_int_3673637356);
  __Pyx_GIVEREF(__pyx_int_3673637356);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_3673637356);
  __Pyx_INCREF(__pyx_int_3623636965);
  __Pyx_GIVEREF(__pyx_int_3623636965);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_3623636965);
  __Pyx_INCREF(__pyx_int_3235995134);
  __Pyx_GIVEREF(__pyx_int_3235995134);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_3235995134);
  __Pyx_INCREF(__pyx_int_3454686199);
  __Pyx_GIVEREF(__pyx_int_3454686199);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_3454686199);
  __Pyx_INCREF(__pyx_int_4007360968);
  __Pyx_GIVEREF(__pyx_int_4007360968);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_4007360968);
  __Pyx_INCREF(__pyx_int_3822090177);
  __Pyx_GIVEREF(__pyx_int_3822090177);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_3822090177);
  __Pyx_INCREF(__pyx_int_4107101658);
  __Pyx_GIVEREF(__pyx_int_4107101658);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_4107101658);
  __Pyx_INCREF(__pyx_int_4190530515);
  __Pyx_GIVEREF(__pyx_int_4190530515);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_4190530515);
  __Pyx_INCREF(__pyx_int_2997825956);
  __Pyx_GIVEREF(__pyx_int_2997825956);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_2997825956);
  __Pyx_INCREF(__pyx_int_3215212461);
  __Pyx_GIVEREF(__pyx_int_3215212461);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_3215212461);
  __Pyx_INCREF(__pyx_int_2830708150);
  __Pyx_GIVEREF(__pyx_int_2830708150);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_2830708150);
  __Pyx_INCREF(__pyx_int_2779915199);
  __Pyx_GIVEREF(__pyx_int_2779915199);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_2779915199);
  __Pyx_INCREF(__pyx_int_2256734592);
  __Pyx_GIVEREF(__pyx_int_2256734592);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_2256734592);
  __Pyx_INCREF(__pyx_int_2340947849);
  __Pyx_GIVEREF(__pyx_int_2340947849);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_2340947849);
  __Pyx_INCREF(__pyx_int_2627016082);
  __Pyx_GIVEREF(__pyx_int_2627016082);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_2627016082);
  __Pyx_INCREF(__pyx_int_2443058075);
  __Pyx_GIVEREF(__pyx_int_2443058075);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_2443058075);
  __Pyx_INCREF(__pyx_int_172466556);
  __Pyx_GIVEREF(__pyx_int_172466556);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_172466556);
  __Pyx_INCREF(__pyx_int_122466165);
  __Pyx_GIVEREF(__pyx_int_122466165);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_122466165);
  __Pyx_INCREF(__pyx_int_273792366);
  __Pyx_GIVEREF(__pyx_int_273792366);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_273792366);
  __Pyx_INCREF(__pyx_int_492483431);
  __Pyx_GIVEREF(__pyx_int_492483431);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_492483431);
  __Pyx_INCREF(__pyx_int_1047239000);
  __Pyx_GIVEREF(__pyx_int_1047239000);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1047239000);
  __Pyx_INCREF(__pyx_int_861968209);
  __Pyx_GIVEREF(__pyx_int_861968209);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_861968209);
  __Pyx_INCREF(__pyx_int_612205898);
  __Pyx_GIVEREF(__pyx_int_612205898);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_612205898);
  __Pyx_INCREF(__pyx_int_695634755);
  __Pyx_GIVEREF(__pyx_int_695634755);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_695634755);
  __Pyx_INCREF(__pyx_int_1646252340);
  __Pyx_GIVEREF(__pyx_int_1646252340);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_1646252340);
  __Pyx_INCREF(__pyx_int_1863638845);
  __Pyx_GIVEREF(__pyx_int_1863638845);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_1863638845);
  __Pyx_INCREF(__pyx_int_2013908262);
  __Pyx_GIVEREF(__pyx_int_2013908262);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_2013908262);
  __Pyx_INCREF(__pyx_int_1963115311);
  __Pyx_GIVEREF(__pyx_int_1963115311);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_1963115311);
  __Pyx_INCREF(__pyx_int_1446242576);
  __Pyx_GIVEREF(__pyx_int_1446242576);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_1446242576);
  __Pyx_INCREF(__pyx_int_1530455833);
  __Pyx_GIVEREF(__pyx_int_1530455833);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_1530455833);
  __Pyx_INCREF(__pyx_int_1277555970);
  __Pyx_GIVEREF(__pyx_int_1277555970);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_1277555970);
  __Pyx_INCREF(__pyx_int_1093597963);
  __Pyx_GIVEREF(__pyx_int_1093597963);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_1093597963);
  __Pyx_INCREF(__pyx_int_1636604631);
  __Pyx_GIVEREF(__pyx_int_1636604631);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_1636604631);
  __Pyx_INCREF(__pyx_int_1820824798);
  __Pyx_GIVEREF(__pyx_int_1820824798);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_1820824798);
  __Pyx_INCREF(__pyx_int_2073724613);
  __Pyx_GIVEREF(__pyx_int_2073724613);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_2073724613);
  __Pyx_INCREF(__pyx_int_1989249228);
  __Pyx_GIVEREF(__pyx_int_1989249228);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_1989249228);
  __Pyx_INCREF(__pyx_int_1436590835);
  __Pyx_GIVEREF(__pyx_int_1436590835);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_1436590835);
  __Pyx_INCREF(__pyx_int_1487645946);
  __Pyx_GIVEREF(__pyx_int_1487645946);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_1487645946);
  __Pyx_INCREF(__pyx_int_1337376481);
  __Pyx_GIVEREF(__pyx_int_1337376481);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_1337376481);
  __Pyx_INCREF(__pyx_int_1119727848);
  __Pyx_GIVEREF(__pyx_int_1119727848);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_1119727848);
  __Pyx_INCREF(__pyx_int_164948639);
  __Pyx_GIVEREF(__pyx_int_164948639);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_164948639);
  __Pyx_INCREF(__pyx_int_81781910);
  __Pyx_GIVEREF(__pyx_int_81781910);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_81781910);
  __Pyx_INCREF(__pyx_int_331544205);
  __Pyx_GIVEREF(__pyx_int_331544205);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_331544205);
  __Pyx_INCREF(__pyx_int_516552836);
  __Pyx_GIVEREF(__pyx_int_516552836);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_516552836);
  __Pyx_INCREF(__pyx_int_1039717051);
  __Pyx_GIVEREF(__pyx_int_1039717051);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_1039717051);
  __Pyx_INCREF(__pyx_int_821288114);
  __Pyx_GIVEREF(__pyx_int_821288114);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_821288114);
  __Pyx_INCREF(__pyx_int_669961897);
  __Pyx_GIVEREF(__pyx_int_669961897);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_669961897);
  __Pyx_INCREF(__pyx_int_719700128);
  __Pyx_GIVEREF(__pyx_int_719700128);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_719700128);
  __Pyx_INCREF(__pyx_int_2973530695);
  __Pyx_GIVEREF(__pyx_int_2973530695);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_2973530695);
  __Pyx_INCREF(__pyx_int_3157750862);
  __Pyx_GIVEREF(__pyx_int_3157750862);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_3157750862);
  __Pyx_INCREF(__pyx_int_2871682645);
  __Pyx_GIVEREF(__pyx_int_2871682645);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_2871682645);
  __Pyx_INCREF(__pyx_int_2787207260);
  __Pyx_GIVEREF(__pyx_int_2787207260);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_2787207260);
  __Pyx_INCREF(__pyx_int_2232435299);
  __Pyx_GIVEREF(__pyx_int_2232435299);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_2232435299);
  __Pyx_INCREF(__pyx_int_2283490410);
  __Pyx_GIVEREF(__pyx_int_2283490410);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_2283490410);
  __Pyx_INCREF(__pyx_int_2667994737);
  __Pyx_GIVEREF(__pyx_int_2667994737);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_2667994737);
  __Pyx_INCREF(__pyx_int_2450346104);
  __Pyx_GIVEREF(__pyx_int_2450346104);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_2450346104);
  __Pyx_INCREF(__pyx_int_3647212047);
  __Pyx_GIVEREF(__pyx_int_3647212047);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_3647212047);
  __Pyx_INCREF(__pyx_int_3564045318);
  __Pyx_GIVEREF(__pyx_int_3564045318);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_3564045318);
  __Pyx_INCREF(__pyx_int_3279033885);
  __Pyx_GIVEREF(__pyx_int_3279033885);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_3279033885);
  __Pyx_INCREF(__pyx_int_3464042516);
  __Pyx_GIVEREF(__pyx_int_3464042516);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_3464042516);
  __Pyx_INCREF(__pyx_int_3980931627);
  __Pyx_GIVEREF(__pyx_int_3980931627);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_3980931627);
  __Pyx_INCREF(__pyx_int_3762502690);
  __Pyx_GIVEREF(__pyx_int_3762502690);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_3762502690);
  __Pyx_INCREF(__pyx_int_4150144569);
  __Pyx_GIVEREF(__pyx_int_4150144569);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_4150144569);
  __Pyx_INCREF(__pyx_int_4199882800);
  __Pyx_GIVEREF(__pyx_int_4199882800);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_4199882800);
  __Pyx_INCREF(__pyx_int_3070356634);
  __Pyx_GIVEREF(__pyx_int_3070356634);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_3070356634);
  __Pyx_INCREF(__pyx_int_3121275539);
  __Pyx_GIVEREF(__pyx_int_3121275539);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_3121275539);
  __Pyx_INCREF(__pyx_int_2904027272);
  __Pyx_GIVEREF(__pyx_int_2904027272);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_2904027272);
  __Pyx_INCREF(__pyx_int_2686254721);
  __Pyx_GIVEREF(__pyx_int_2686254721);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_2686254721);
  __Pyx_INCREF(__pyx_int_2200818878);
  __Pyx_GIVEREF(__pyx_int_2200818878);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_2200818878);
  __Pyx_INCREF(__pyx_int_2384911031);
  __Pyx_GIVEREF(__pyx_int_2384911031);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_2384911031);
  __Pyx_INCREF(__pyx_int_2570832044);
  __Pyx_GIVEREF(__pyx_int_2570832044);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_2570832044);
  __Pyx_INCREF(__pyx_int_2486224549);
  __Pyx_GIVEREF(__pyx_int_2486224549);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_2486224549);
  __Pyx_INCREF(__pyx_int_3747192018);
  __Pyx_GIVEREF(__pyx_int_3747192018);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3747192018);
  __Pyx_INCREF(__pyx_int_3528626907);
  __Pyx_GIVEREF(__pyx_int_3528626907);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_3528626907);
  __Pyx_INCREF(__pyx_int_3310321856);
  __Pyx_GIVEREF(__pyx_int_3310321856);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_3310321856);
  __Pyx_INCREF(__pyx_int_3359936201);
  __Pyx_GIVEREF(__pyx_int_3359936201);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_3359936201);
  __Pyx_INCREF(__pyx_int_3950355702);
  __Pyx_GIVEREF(__pyx_int_3950355702);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_3950355702);
  __Pyx_INCREF(__pyx_int_3867060991);
  __Pyx_GIVEREF(__pyx_int_3867060991);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_3867060991);
  __Pyx_INCREF(__pyx_int_4049844452);
  __Pyx_GIVEREF(__pyx_int_4049844452);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_4049844452);
  __Pyx_INCREF(__pyx_int_4234721005);
  __Pyx_GIVEREF(__pyx_int_4234721005);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_4234721005);
  __Pyx_INCREF(__pyx_int_1739656202);
  __Pyx_GIVEREF(__pyx_int_1739656202);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_1739656202);
  __Pyx_INCREF(__pyx_int_1790575107);
  __Pyx_GIVEREF(__pyx_int_1790575107);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_1790575107);
  __Pyx_INCREF(__pyx_int_2108100632);
  __Pyx_GIVEREF(__pyx_int_2108100632);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_2108100632);
  __Pyx_INCREF(__pyx_int_1890328081);
  __Pyx_GIVEREF(__pyx_int_1890328081);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_1890328081);
  __Pyx_INCREF(__pyx_int_1402811438);
  __Pyx_GIVEREF(__pyx_int_1402811438);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_1402811438);
  __Pyx_INCREF(__pyx_int_1586903591);
  __Pyx_GIVEREF(__pyx_int_1586903591);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_1586903591);
  __Pyx_INCREF(__pyx_int_1233856572);
  __Pyx_GIVEREF(__pyx_int_1233856572);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_1233856572);
  __Pyx_INCREF(__pyx_int_1149249077);
  __Pyx_GIVEREF(__pyx_int_1149249077);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_1149249077);
  __Pyx_INCREF(__pyx_int_266959938);
  __Pyx_GIVEREF(__pyx_int_266959938);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_266959938);
  __Pyx_INCREF(__pyx_int_48394827);
  __Pyx_GIVEREF(__pyx_int_48394827);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_48394827);
  __Pyx_INCREF(__pyx_int_369057872);
  __Pyx_GIVEREF(__pyx_int_369057872);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_369057872);
  __Pyx_INCREF(__pyx_int_418672217);
  __Pyx_GIVEREF(__pyx_int_418672217);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_418672217);
  __Pyx_INCREF(__pyx_int_1002783846);
  __Pyx_GIVEREF(__pyx_int_1002783846);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_1002783846);
  __Pyx_INCREF(__pyx_int_919489135);
  __Pyx_GIVEREF(__pyx_int_919489135);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_919489135);
  __Pyx_INCREF(__pyx_int_567498868);
  __Pyx_GIVEREF(__pyx_int_567498868);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_567498868);
  __Pyx_INCREF(__pyx_int_752375421);
  __Pyx_GIVEREF(__pyx_int_752375421);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_752375421);
  __Pyx_INCREF(__pyx_int_209336225);
  __Pyx_GIVEREF(__pyx_int_209336225);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_209336225);
  __Pyx_INCREF(__pyx_int_24197544);
  __Pyx_GIVEREF(__pyx_int_24197544);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_24197544);
  __Pyx_INCREF(__pyx_int_376187827);
  __Pyx_GIVEREF(__pyx_int_376187827);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_376187827);
  __Pyx_INCREF(__pyx_int_459744698);
  __Pyx_GIVEREF(__pyx_int_459744698);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_459744698);
  __Pyx_INCREF(__pyx_int_945164165);
  __Pyx_GIVEREF(__pyx_int_945164165);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_945164165);
  __Pyx_INCREF(__pyx_int_895287692);
  __Pyx_GIVEREF(__pyx_int_895287692);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_895287692);
  __Pyx_INCREF(__pyx_int_574624663);
  __Pyx_GIVEREF(__pyx_int_574624663);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_574624663);
  __Pyx_INCREF(__pyx_int_793451934);
  __Pyx_GIVEREF(__pyx_int_793451934);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_793451934);
  __Pyx_INCREF(__pyx_int_1679968233);
  __Pyx_GIVEREF(__pyx_int_1679968233);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_1679968233);
  __Pyx_INCREF(__pyx_int_1764313568);
  __Pyx_GIVEREF(__pyx_int_1764313568);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_1764313568);
  __Pyx_INCREF(__pyx_int_2117360635);
  __Pyx_GIVEREF(__pyx_int_2117360635);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_2117360635);
  __Pyx_INCREF(__pyx_int_1933530610);
  __Pyx_GIVEREF(__pyx_int_1933530610);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_1933530610);
  __Pyx_INCREF(__pyx_int_1343127501);
  __Pyx_GIVEREF(__pyx_int_1343127501);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_1343127501);
  __Pyx_INCREF(__pyx_int_1560637892);
  __Pyx_GIVEREF(__pyx_int_1560637892);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_1560637892);
  __Pyx_INCREF(__pyx_int_1243112415);
  __Pyx_GIVEREF(__pyx_int_1243112415);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_1243112415);
  __Pyx_INCREF(__pyx_int_1192455638);
  __Pyx_GIVEREF(__pyx_int_1192455638);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_1192455638);
  __Pyx_INCREF(__pyx_int_3704280881);
  __Pyx_GIVEREF(__pyx_int_3704280881);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_3704280881);
  __Pyx_INCREF(__pyx_int_3519142200);
  __Pyx_GIVEREF(__pyx_int_3519142200);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_3519142200);
  __Pyx_INCREF(__pyx_int_3336358691);
  __Pyx_GIVEREF(__pyx_int_3336358691);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_3336358691);
  __Pyx_INCREF(__pyx_int_3419915562);
  __Pyx_GIVEREF(__pyx_int_3419915562);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_3419915562);
  __Pyx_INCREF(__pyx_int_3907448597);
  __Pyx_GIVEREF(__pyx_int_3907448597);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_3907448597);
  __Pyx_INCREF(__pyx_int_3857572124);
  __Pyx_GIVEREF(__pyx_int_3857572124);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_3857572124);
  __Pyx_INCREF(__pyx_int_4075877127);
  __Pyx_GIVEREF(__pyx_int_4075877127);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_4075877127);
  __Pyx_INCREF(__pyx_int_4294704398);
  __Pyx_GIVEREF(__pyx_int_4294704398);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_4294704398);
  __Pyx_INCREF(__pyx_int_3029510009);
  __Pyx_GIVEREF(__pyx_int_3029510009);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_3029510009);
  __Pyx_INCREF(__pyx_int_3113855344);
  __Pyx_GIVEREF(__pyx_int_3113855344);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_3113855344);
  __Pyx_INCREF(__pyx_int_2927934315);
  __Pyx_GIVEREF(__pyx_int_2927934315);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_2927934315);
  __Pyx_INCREF(__pyx_int_2744104290);
  __Pyx_GIVEREF(__pyx_int_2744104290);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_2744104290);
  __Pyx_INCREF(__pyx_int_2159976285);
  __Pyx_GIVEREF(__pyx_int_2159976285);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_2159976285);
  __Pyx_INCREF(__pyx_int_2377486676);
  __Pyx_GIVEREF(__pyx_int_2377486676);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_2377486676);
  __Pyx_INCREF(__pyx_int_2594734927);
  __Pyx_GIVEREF(__pyx_int_2594734927);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_2594734927);
  __Pyx_INCREF(__pyx_int_2544078150);
  __Pyx_GIVEREF(__pyx_int_2544078150);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_2544078150);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_U3, __pyx_t_1) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":83
 *     U2 = [ 0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697 ]
 *     U3 = [ 0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46 ]
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key):
 */
  __pyx_t_1 = PyList_New(256); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_151849742);
  __Pyx_GIVEREF(__pyx_int_151849742);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_151849742);
  __Pyx_INCREF(__pyx_int_303699484);
  __Pyx_GIVEREF(__pyx_int_303699484);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_303699484);
  __Pyx_INCREF(__pyx_int_454499602);
  __Pyx_GIVEREF(__pyx_int_454499602);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_454499602);
  __Pyx_INCREF(__pyx_int_607398968);
  __Pyx_GIVEREF(__pyx_int_607398968);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_int_607398968);
  __Pyx_INCREF(__pyx_int_758720310);
  __Pyx_GIVEREF(__pyx_int_758720310);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_int_758720310);
  __Pyx_INCREF(__pyx_int_908999204);
  __Pyx_GIVEREF(__pyx_int_908999204);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_int_908999204);
  __Pyx_INCREF(__pyx_int_1059270954);
  __Pyx_GIVEREF(__pyx_int_1059270954);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_int_1059270954);
  __Pyx_INCREF(__pyx_int_1214797936);
  __Pyx_GIVEREF(__pyx_int_1214797936);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_int_1214797936);
  __Pyx_INCREF(__pyx_int_1097159550);
  __Pyx_GIVEREF(__pyx_int_1097159550);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_int_1097159550);
  __Pyx_INCREF(__pyx_int_1517440620);
  __Pyx_GIVEREF(__pyx_int_1517440620);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_int_1517440620);
  __Pyx_INCREF(__pyx_int_1400849762);
  __Pyx_GIVEREF(__pyx_int_1400849762);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_int_1400849762);
  __Pyx_INCREF(__pyx_int_1817998408);
  __Pyx_GIVEREF(__pyx_int_1817998408);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_int_1817998408);
  __Pyx_INCREF(__pyx_int_1699839814);
  __Pyx_GIVEREF(__pyx_int_1699839814);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_int_1699839814);
  __Pyx_INCREF(__pyx_int_2118541908);
  __Pyx_GIVEREF(__pyx_int_2118541908);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_int_2118541908);
  __Pyx_INCREF(__pyx_int_2001430874);
  __Pyx_GIVEREF(__pyx_int_2001430874);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_int_2001430874);
  __Pyx_INCREF(__pyx_int_2429595872);
  __Pyx_GIVEREF(__pyx_int_2429595872);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_int_2429595872);
  __Pyx_INCREF(__pyx_int_2581445614);
  __Pyx_GIVEREF(__pyx_int_2581445614);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_int_2581445614);
  __Pyx_INCREF(__pyx_int_2194319100);
  __Pyx_GIVEREF(__pyx_int_2194319100);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_int_2194319100);
  __Pyx_INCREF(__pyx_int_2345119218);
  __Pyx_GIVEREF(__pyx_int_2345119218);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_int_2345119218);
  __Pyx_INCREF(__pyx_int_3034881240);
  __Pyx_GIVEREF(__pyx_int_3034881240);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_int_3034881240);
  __Pyx_INCREF(__pyx_int_3186202582);
  __Pyx_GIVEREF(__pyx_int_3186202582);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_int_3186202582);
  __Pyx_INCREF(__pyx_int_2801699524);
  __Pyx_GIVEREF(__pyx_int_2801699524);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_int_2801699524);
  __Pyx_INCREF(__pyx_int_2951971274);
  __Pyx_GIVEREF(__pyx_int_2951971274);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_int_2951971274);
  __Pyx_INCREF(__pyx_int_3635996816);
  __Pyx_GIVEREF(__pyx_int_3635996816);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_int_3635996816);
  __Pyx_INCREF(__pyx_int_3518358430);
  __Pyx_GIVEREF(__pyx_int_3518358430);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_int_3518358430);
  __Pyx_INCREF(__pyx_int_3399679628);
  __Pyx_GIVEREF(__pyx_int_3399679628);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_int_3399679628);
  __Pyx_INCREF(__pyx_int_3283088770);
  __Pyx_GIVEREF(__pyx_int_3283088770);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_int_3283088770);
  __Pyx_INCREF(__pyx_int_4237083816);
  __Pyx_GIVEREF(__pyx_int_4237083816);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_int_4237083816);
  __Pyx_INCREF(__pyx_int_4118925222);
  __Pyx_GIVEREF(__pyx_int_4118925222);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_int_4118925222);
  __Pyx_INCREF(__pyx_int_4002861748);
  __Pyx_GIVEREF(__pyx_int_4002861748);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_int_4002861748);
  __Pyx_INCREF(__pyx_int_3885750714);
  __Pyx_GIVEREF(__pyx_int_3885750714);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_int_3885750714);
  __Pyx_INCREF(__pyx_int_1002142683);
  __Pyx_GIVEREF(__pyx_int_1002142683);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_int_1002142683);
  __Pyx_INCREF(__pyx_int_850817237);
  __Pyx_GIVEREF(__pyx_int_850817237);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_int_850817237);
  __Pyx_INCREF(__pyx_int_698445255);
  __Pyx_GIVEREF(__pyx_int_698445255);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_int_698445255);
  __Pyx_INCREF(__pyx_int_548169417);
  __Pyx_GIVEREF(__pyx_int_548169417);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_int_548169417);
  __Pyx_INCREF(__pyx_int_529487843);
  __Pyx_GIVEREF(__pyx_int_529487843);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_int_529487843);
  __Pyx_INCREF(__pyx_int_377642221);
  __Pyx_GIVEREF(__pyx_int_377642221);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_int_377642221);
  __Pyx_INCREF(__pyx_int_227885567);
  __Pyx_GIVEREF(__pyx_int_227885567);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_int_227885567);
  __Pyx_INCREF(__pyx_int_77089521);
  __Pyx_GIVEREF(__pyx_int_77089521);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_int_77089521);
  __Pyx_INCREF(__pyx_int_1943217067);
  __Pyx_GIVEREF(__pyx_int_1943217067);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_int_1943217067);
  __Pyx_INCREF(__pyx_int_2061379749);
  __Pyx_GIVEREF(__pyx_int_2061379749);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_int_2061379749);
  __Pyx_INCREF(__pyx_int_1640576439);
  __Pyx_GIVEREF(__pyx_int_1640576439);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_int_1640576439);
  __Pyx_INCREF(__pyx_int_1757691577);
  __Pyx_GIVEREF(__pyx_int_1757691577);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_int_1757691577);
  __Pyx_INCREF(__pyx_int_1474760595);
  __Pyx_GIVEREF(__pyx_int_1474760595);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_int_1474760595);
  __Pyx_INCREF(__pyx_int_1592394909);
  __Pyx_GIVEREF(__pyx_int_1592394909);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_int_1592394909);
  __Pyx_INCREF(__pyx_int_1174215055);
  __Pyx_GIVEREF(__pyx_int_1174215055);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_int_1174215055);
  __Pyx_INCREF(__pyx_int_1290801793);
  __Pyx_GIVEREF(__pyx_int_1290801793);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_int_1290801793);
  __Pyx_INCREF(__pyx_int_2875968315);
  __Pyx_GIVEREF(__pyx_int_2875968315);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_int_2875968315);
  __Pyx_INCREF(__pyx_int_2724642869);
  __Pyx_GIVEREF(__pyx_int_2724642869);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_int_2724642869);
  __Pyx_INCREF(__pyx_int_3111247143);
  __Pyx_GIVEREF(__pyx_int_3111247143);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_int_3111247143);
  __Pyx_INCREF(__pyx_int_2960971305);
  __Pyx_GIVEREF(__pyx_int_2960971305);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_int_2960971305);
  __Pyx_INCREF(__pyx_int_2405426947);
  __Pyx_GIVEREF(__pyx_int_2405426947);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_int_2405426947);
  __Pyx_INCREF(__pyx_int_2253581325);
  __Pyx_GIVEREF(__pyx_int_2253581325);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_int_2253581325);
  __Pyx_INCREF(__pyx_int_2638606623);
  __Pyx_GIVEREF(__pyx_int_2638606623);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_int_2638606623);
  __Pyx_INCREF(__pyx_int_2487810577);
  __Pyx_GIVEREF(__pyx_int_2487810577);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_int_2487810577);
  __Pyx_INCREF(__pyx_int_3808662347);
  __Pyx_GIVEREF(__pyx_int_3808662347);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_int_3808662347);
  __Pyx_INCREF(__pyx_int_3926825029);
  __Pyx_GIVEREF(__pyx_int_3926825029);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_int_3926825029);
  __Pyx_INCREF(__pyx_int_4044981591);
  __Pyx_GIVEREF(__pyx_int_4044981591);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_int_4044981591);
  __Pyx_INCREF(__pyx_int_4162096729);
  __Pyx_GIVEREF(__pyx_int_4162096729);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_int_4162096729);
  __Pyx_INCREF(__pyx_int_3342319475);
  __Pyx_GIVEREF(__pyx_int_3342319475);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_int_3342319475);
  __Pyx_INCREF(__pyx_int_3459953789);
  __Pyx_GIVEREF(__pyx_int_3459953789);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_int_3459953789);
  __Pyx_INCREF(__pyx_int_3576539503);
  __Pyx_GIVEREF(__pyx_int_3576539503);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_int_3576539503);
  __Pyx_INCREF(__pyx_int_3693126241);
  __Pyx_GIVEREF(__pyx_int_3693126241);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_int_3693126241);
  __Pyx_INCREF(__pyx_int_1986918061);
  __Pyx_GIVEREF(__pyx_int_1986918061);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_int_1986918061);
  __Pyx_INCREF(__pyx_int_2137062819);
  __Pyx_GIVEREF(__pyx_int_2137062819);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_int_2137062819);
  __Pyx_INCREF(__pyx_int_1685577905);
  __Pyx_GIVEREF(__pyx_int_1685577905);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_int_1685577905);
  __Pyx_INCREF(__pyx_int_1836772287);
  __Pyx_GIVEREF(__pyx_int_1836772287);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_int_1836772287);
  __Pyx_INCREF(__pyx_int_1381620373);
  __Pyx_GIVEREF(__pyx_int_1381620373);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_int_1381620373);
  __Pyx_INCREF(__pyx_int_1532285339);
  __Pyx_GIVEREF(__pyx_int_1532285339);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_int_1532285339);
  __Pyx_INCREF(__pyx_int_1078185097);
  __Pyx_GIVEREF(__pyx_int_1078185097);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_int_1078185097);
  __Pyx_INCREF(__pyx_int_1229899655);
  __Pyx_GIVEREF(__pyx_int_1229899655);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_int_1229899655);
  __Pyx_INCREF(__pyx_int_1040559837);
  __Pyx_GIVEREF(__pyx_int_1040559837);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_int_1040559837);
  __Pyx_INCREF(__pyx_int_923313619);
  __Pyx_GIVEREF(__pyx_int_923313619);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_int_923313619);
  __Pyx_INCREF(__pyx_int_740276417);
  __Pyx_GIVEREF(__pyx_int_740276417);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_int_740276417);
  __Pyx_INCREF(__pyx_int_621982671);
  __Pyx_GIVEREF(__pyx_int_621982671);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_int_621982671);
  __Pyx_INCREF(__pyx_int_439452389);
  __Pyx_GIVEREF(__pyx_int_439452389);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_int_439452389);
  __Pyx_INCREF(__pyx_int_322734571);
  __Pyx_GIVEREF(__pyx_int_322734571);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_int_322734571);
  __Pyx_INCREF(__pyx_int_137073913);
  __Pyx_GIVEREF(__pyx_int_137073913);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_int_137073913);
  __Pyx_INCREF(__pyx_int_19308535);
  __Pyx_GIVEREF(__pyx_int_19308535);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_int_19308535);
  __Pyx_INCREF(__pyx_int_3871163981);
  __Pyx_GIVEREF(__pyx_int_3871163981);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_int_3871163981);
  __Pyx_INCREF(__pyx_int_4021308739);
  __Pyx_GIVEREF(__pyx_int_4021308739);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_int_4021308739);
  __Pyx_INCREF(__pyx_int_4104605777);
  __Pyx_GIVEREF(__pyx_int_4104605777);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_int_4104605777);
  __Pyx_INCREF(__pyx_int_4255800159);
  __Pyx_GIVEREF(__pyx_int_4255800159);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_int_4255800159);
  __Pyx_INCREF(__pyx_int_3263785589);
  __Pyx_GIVEREF(__pyx_int_3263785589);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_int_3263785589);
  __Pyx_INCREF(__pyx_int_3414450555);
  __Pyx_GIVEREF(__pyx_int_3414450555);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_int_3414450555);
  __Pyx_INCREF(__pyx_int_3499326569);
  __Pyx_GIVEREF(__pyx_int_3499326569);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_int_3499326569);
  __Pyx_INCREF(__pyx_int_3651041127);
  __Pyx_GIVEREF(__pyx_int_3651041127);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_int_3651041127);
  __Pyx_INCREF(__pyx_int_2933202493);
  __Pyx_GIVEREF(__pyx_int_2933202493);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_int_2933202493);
  __Pyx_INCREF(__pyx_int_2815956275);
  __Pyx_GIVEREF(__pyx_int_2815956275);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_int_2815956275);
  __Pyx_INCREF(__pyx_int_3167684641);
  __Pyx_GIVEREF(__pyx_int_3167684641);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_int_3167684641);
  __Pyx_INCREF(__pyx_int_3049390895);
  __Pyx_GIVEREF(__pyx_int_3049390895);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_int_3049390895);
  __Pyx_INCREF(__pyx_int_2330014213);
  __Pyx_GIVEREF(__pyx_int_2330014213);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_int_2330014213);
  __Pyx_INCREF(__pyx_int_2213296395);
  __Pyx_GIVEREF(__pyx_int_2213296395);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_int_2213296395);
  __Pyx_INCREF(__pyx_int_2566595609);
  __Pyx_GIVEREF(__pyx_int_2566595609);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_int_2566595609);
  __Pyx_INCREF(__pyx_int_2448830231);
  __Pyx_GIVEREF(__pyx_int_2448830231);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_int_2448830231);
  __Pyx_INCREF(__pyx_int_1305906550);
  __Pyx_GIVEREF(__pyx_int_1305906550);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_int_1305906550);
  __Pyx_INCREF(__pyx_int_1155237496);
  __Pyx_GIVEREF(__pyx_int_1155237496);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_int_1155237496);
  __Pyx_INCREF(__pyx_int_1607244650);
  __Pyx_GIVEREF(__pyx_int_1607244650);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_int_1607244650);
  __Pyx_INCREF(__pyx_int_1455525988);
  __Pyx_GIVEREF(__pyx_int_1455525988);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_int_1455525988);
  __Pyx_INCREF(__pyx_int_1776460110);
  __Pyx_GIVEREF(__pyx_int_1776460110);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_int_1776460110);
  __Pyx_INCREF(__pyx_int_1626319424);
  __Pyx_GIVEREF(__pyx_int_1626319424);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_int_1626319424);
  __Pyx_INCREF(__pyx_int_2079897426);
  __Pyx_GIVEREF(__pyx_int_2079897426);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_int_2079897426);
  __Pyx_INCREF(__pyx_int_1928707164);
  __Pyx_GIVEREF(__pyx_int_1928707164);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_int_1928707164);
  __Pyx_INCREF(__pyx_int_96392454);
  __Pyx_GIVEREF(__pyx_int_96392454);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_int_96392454);
  __Pyx_INCREF(__pyx_int_213114376);
  __Pyx_GIVEREF(__pyx_int_213114376);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_int_213114376);
  __Pyx_INCREF(__pyx_int_396673818);
  __Pyx_GIVEREF(__pyx_int_396673818);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_int_396673818);
  __Pyx_INCREF(__pyx_int_514443284);
  __Pyx_GIVEREF(__pyx_int_514443284);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_int_514443284);
  __Pyx_INCREF(__pyx_int_562755902);
  __Pyx_GIVEREF(__pyx_int_562755902);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_int_562755902);
  __Pyx_INCREF(__pyx_int_679998000);
  __Pyx_GIVEREF(__pyx_int_679998000);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_int_679998000);
  __Pyx_INCREF(__pyx_int_865136418);
  __Pyx_GIVEREF(__pyx_int_865136418);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_int_865136418);
  __Pyx_INCREF(__pyx_int_983426092);
  __Pyx_GIVEREF(__pyx_int_983426092);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_int_983426092);
  __Pyx_INCREF(__pyx_int_3708173718);
  __Pyx_GIVEREF(__pyx_int_3708173718);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_int_3708173718);
  __Pyx_INCREF(__pyx_int_3557504664);
  __Pyx_GIVEREF(__pyx_int_3557504664);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_int_3557504664);
  __Pyx_INCREF(__pyx_int_3474729866);
  __Pyx_GIVEREF(__pyx_int_3474729866);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_int_3474729866);
  __Pyx_INCREF(__pyx_int_3323011204);
  __Pyx_GIVEREF(__pyx_int_3323011204);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_int_3323011204);
  __Pyx_INCREF(__pyx_int_4180808110);
  __Pyx_GIVEREF(__pyx_int_4180808110);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_int_4180808110);
  __Pyx_INCREF(__pyx_int_4030667424);
  __Pyx_GIVEREF(__pyx_int_4030667424);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_int_4030667424);
  __Pyx_INCREF(__pyx_int_3945269170);
  __Pyx_GIVEREF(__pyx_int_3945269170);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_int_3945269170);
  __Pyx_INCREF(__pyx_int_3794078908);
  __Pyx_GIVEREF(__pyx_int_3794078908);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_int_3794078908);
  __Pyx_INCREF(__pyx_int_2507040230);
  __Pyx_GIVEREF(__pyx_int_2507040230);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_int_2507040230);
  __Pyx_INCREF(__pyx_int_2623762152);
  __Pyx_GIVEREF(__pyx_int_2623762152);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_int_2623762152);
  __Pyx_INCREF(__pyx_int_2272556026);
  __Pyx_GIVEREF(__pyx_int_2272556026);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_int_2272556026);
  __Pyx_INCREF(__pyx_int_2390325492);
  __Pyx_GIVEREF(__pyx_int_2390325492);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_int_2390325492);
  __Pyx_INCREF(__pyx_int_2975484382);
  __Pyx_GIVEREF(__pyx_int_2975484382);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_int_2975484382);
  __Pyx_INCREF(__pyx_int_3092726480);
  __Pyx_GIVEREF(__pyx_int_3092726480);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_int_3092726480);
  __Pyx_INCREF(__pyx_int_2738905026);
  __Pyx_GIVEREF(__pyx_int_2738905026);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_int_2738905026);
  __Pyx_INCREF(__pyx_int_2857194700);
  __Pyx_GIVEREF(__pyx_int_2857194700);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_int_2857194700);
  __Pyx_INCREF(__pyx_int_3973773121);
  __Pyx_GIVEREF(__pyx_int_3973773121);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_int_3973773121);
  __Pyx_INCREF(__pyx_int_3856137295);
  __Pyx_GIVEREF(__pyx_int_3856137295);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_int_3856137295);
  __Pyx_INCREF(__pyx_int_4274053469);
  __Pyx_GIVEREF(__pyx_int_4274053469);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_int_4274053469);
  __Pyx_INCREF(__pyx_int_4157467219);
  __Pyx_GIVEREF(__pyx_int_4157467219);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_int_4157467219);
  __Pyx_INCREF(__pyx_int_3371096953);
  __Pyx_GIVEREF(__pyx_int_3371096953);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_int_3371096953);
  __Pyx_INCREF(__pyx_int_3252932727);
  __Pyx_GIVEREF(__pyx_int_3252932727);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_int_3252932727);
  __Pyx_INCREF(__pyx_int_3673476453);
  __Pyx_GIVEREF(__pyx_int_3673476453);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_int_3673476453);
  __Pyx_INCREF(__pyx_int_3556361835);
  __Pyx_GIVEREF(__pyx_int_3556361835);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_int_3556361835);
  __Pyx_INCREF(__pyx_int_2763173681);
  __Pyx_GIVEREF(__pyx_int_2763173681);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_int_2763173681);
  __Pyx_INCREF(__pyx_int_2915017791);
  __Pyx_GIVEREF(__pyx_int_2915017791);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_int_2915017791);
  __Pyx_INCREF(__pyx_int_3064510765);
  __Pyx_GIVEREF(__pyx_int_3064510765);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_int_3064510765);
  __Pyx_INCREF(__pyx_int_3215307299);
  __Pyx_GIVEREF(__pyx_int_3215307299);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_int_3215307299);
  __Pyx_INCREF(__pyx_int_2156299017);
  __Pyx_GIVEREF(__pyx_int_2156299017);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_int_2156299017);
  __Pyx_INCREF(__pyx_int_2307622919);
  __Pyx_GIVEREF(__pyx_int_2307622919);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_int_2307622919);
  __Pyx_INCREF(__pyx_int_2459735317);
  __Pyx_GIVEREF(__pyx_int_2459735317);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_int_2459735317);
  __Pyx_INCREF(__pyx_int_2610011675);
  __Pyx_GIVEREF(__pyx_int_2610011675);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_int_2610011675);
  __Pyx_INCREF(__pyx_int_2081048481);
  __Pyx_GIVEREF(__pyx_int_2081048481);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_int_2081048481);
  __Pyx_INCREF(__pyx_int_1963412655);
  __Pyx_GIVEREF(__pyx_int_1963412655);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_int_1963412655);
  __Pyx_INCREF(__pyx_int_1846563261);
  __Pyx_GIVEREF(__pyx_int_1846563261);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_int_1846563261);
  __Pyx_INCREF(__pyx_int_1729977011);
  __Pyx_GIVEREF(__pyx_int_1729977011);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_int_1729977011);
  __Pyx_INCREF(__pyx_int_1480485785);
  __Pyx_GIVEREF(__pyx_int_1480485785);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_int_1480485785);
  __Pyx_INCREF(__pyx_int_1362321559);
  __Pyx_GIVEREF(__pyx_int_1362321559);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_int_1362321559);
  __Pyx_INCREF(__pyx_int_1243905413);
  __Pyx_GIVEREF(__pyx_int_1243905413);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_int_1243905413);
  __Pyx_INCREF(__pyx_int_1126790795);
  __Pyx_GIVEREF(__pyx_int_1126790795);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_int_1126790795);
  __Pyx_INCREF(__pyx_int_878845905);
  __Pyx_GIVEREF(__pyx_int_878845905);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_int_878845905);
  __Pyx_INCREF(__pyx_int_1030690015);
  __Pyx_GIVEREF(__pyx_int_1030690015);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_int_1030690015);
  __Pyx_INCREF(__pyx_int_645401037);
  __Pyx_GIVEREF(__pyx_int_645401037);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_int_645401037);
  __Pyx_INCREF(__pyx_int_796197571);
  __Pyx_GIVEREF(__pyx_int_796197571);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_int_796197571);
  __Pyx_INCREF(__pyx_int_274084841);
  __Pyx_GIVEREF(__pyx_int_274084841);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_int_274084841);
  __Pyx_INCREF(__pyx_int_425408743);
  __Pyx_GIVEREF(__pyx_int_425408743);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_int_425408743);
  __Pyx_INCREF(__pyx_int_38544885);
  __Pyx_GIVEREF(__pyx_int_38544885);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_int_38544885);
  __Pyx_INCREF(__pyx_int_188821243);
  __Pyx_GIVEREF(__pyx_int_188821243);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_int_188821243);
  __Pyx_INCREF(__pyx_int_3613494426);
  __Pyx_GIVEREF(__pyx_int_3613494426);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_int_3613494426);
  __Pyx_INCREF(__pyx_int_3731654548);
  __Pyx_GIVEREF(__pyx_int_3731654548);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_int_3731654548);
  __Pyx_INCREF(__pyx_int_3313212038);
  __Pyx_GIVEREF(__pyx_int_3313212038);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_int_3313212038);
  __Pyx_INCREF(__pyx_int_3430322568);
  __Pyx_GIVEREF(__pyx_int_3430322568);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_int_3430322568);
  __Pyx_INCREF(__pyx_int_4082475170);
  __Pyx_GIVEREF(__pyx_int_4082475170);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_int_4082475170);
  __Pyx_INCREF(__pyx_int_4200115116);
  __Pyx_GIVEREF(__pyx_int_4200115116);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_int_4200115116);
  __Pyx_INCREF(__pyx_int_3780097726);
  __Pyx_GIVEREF(__pyx_int_3780097726);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_int_3780097726);
  __Pyx_INCREF(__pyx_int_3896688048);
  __Pyx_GIVEREF(__pyx_int_3896688048);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_int_3896688048);
  __Pyx_INCREF(__pyx_int_2668221674);
  __Pyx_GIVEREF(__pyx_int_2668221674);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_int_2668221674);
  __Pyx_INCREF(__pyx_int_2516901860);
  __Pyx_GIVEREF(__pyx_int_2516901860);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_int_2516901860);
  __Pyx_INCREF(__pyx_int_2366882550);
  __Pyx_GIVEREF(__pyx_int_2366882550);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_int_2366882550);
  __Pyx_INCREF(__pyx_int_2216610296);
  __Pyx_GIVEREF(__pyx_int_2216610296);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_int_2216610296);
  __Pyx_INCREF(__pyx_int_3141400786);
  __Pyx_GIVEREF(__pyx_int_3141400786);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_int_3141400786);
  __Pyx_INCREF(__pyx_int_2989552604);
  __Pyx_GIVEREF(__pyx_int_2989552604);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_int_2989552604);
  __Pyx_INCREF(__pyx_int_2837966542);
  __Pyx_GIVEREF(__pyx_int_2837966542);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_int_2837966542);
  __Pyx_INCREF(__pyx_int_2687165888);
  __Pyx_GIVEREF(__pyx_int_2687165888);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_int_2687165888);
  __Pyx_INCREF(__pyx_int_1202797690);
  __Pyx_GIVEREF(__pyx_int_1202797690);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_int_1202797690);
  __Pyx_INCREF(__pyx_int_1320957812);
  __Pyx_GIVEREF(__pyx_int_1320957812);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_int_1320957812);
  __Pyx_INCREF(__pyx_int_1437280870);
  __Pyx_GIVEREF(__pyx_int_1437280870);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_int_1437280870);
  __Pyx_INCREF(__pyx_int_1554391400);
  __Pyx_GIVEREF(__pyx_int_1554391400);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_int_1554391400);
  __Pyx_INCREF(__pyx_int_1669664834);
  __Pyx_GIVEREF(__pyx_int_1669664834);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_int_1669664834);
  __Pyx_INCREF(__pyx_int_1787304780);
  __Pyx_GIVEREF(__pyx_int_1787304780);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_int_1787304780);
  __Pyx_INCREF(__pyx_int_1906247262);
  __Pyx_GIVEREF(__pyx_int_1906247262);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_int_1906247262);
  __Pyx_INCREF(__pyx_int_2022837584);
  __Pyx_GIVEREF(__pyx_int_2022837584);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_int_2022837584);
  __Pyx_INCREF(__pyx_int_265905162);
  __Pyx_GIVEREF(__pyx_int_265905162);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_int_265905162);
  __Pyx_INCREF(__pyx_int_114585348);
  __Pyx_GIVEREF(__pyx_int_114585348);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_int_114585348);
  __Pyx_INCREF(__pyx_int_499347990);
  __Pyx_GIVEREF(__pyx_int_499347990);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_int_499347990);
  __Pyx_INCREF(__pyx_int_349075736);
  __Pyx_GIVEREF(__pyx_int_349075736);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_int_349075736);
  __Pyx_INCREF(__pyx_int_736970802);
  __Pyx_GIVEREF(__pyx_int_736970802);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_int_736970802);
  __Pyx_INCREF(__pyx_int_585122620);
  __Pyx_GIVEREF(__pyx_int_585122620);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_int_585122620);
  __Pyx_INCREF(__pyx_int_972512814);
  __Pyx_GIVEREF(__pyx_int_972512814);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_int_972512814);
  __Pyx_INCREF(__pyx_int_821712160);
  __Pyx_GIVEREF(__pyx_int_821712160);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_int_821712160);
  __Pyx_INCREF(__pyx_int_2595684844);
  __Pyx_GIVEREF(__pyx_int_2595684844);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_int_2595684844);
  __Pyx_INCREF(__pyx_int_2478443234);
  __Pyx_GIVEREF(__pyx_int_2478443234);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_int_2478443234);
  __Pyx_INCREF(__pyx_int_2293045232);
  __Pyx_GIVEREF(__pyx_int_2293045232);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_int_2293045232);
  __Pyx_INCREF(__pyx_int_2174754046);
  __Pyx_GIVEREF(__pyx_int_2174754046);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_int_2174754046);
  __Pyx_INCREF(__pyx_int_3196267988);
  __Pyx_GIVEREF(__pyx_int_3196267988);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_int_3196267988);
  __Pyx_INCREF(__pyx_int_3079546586);
  __Pyx_GIVEREF(__pyx_int_3079546586);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_int_3079546586);
  __Pyx_INCREF(__pyx_int_2895723464);
  __Pyx_GIVEREF(__pyx_int_2895723464);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_int_2895723464);
  __Pyx_INCREF(__pyx_int_2777952454);
  __Pyx_GIVEREF(__pyx_int_2777952454);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_int_2777952454);
  __Pyx_INCREF(__pyx_int_3537852828);
  __Pyx_GIVEREF(__pyx_int_3537852828);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_int_3537852828);
  __Pyx_INCREF(__pyx_int_3687994002);
  __Pyx_GIVEREF(__pyx_int_3687994002);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_int_3687994002);
  __Pyx_INCREF(__pyx_int_3234156416);
  __Pyx_GIVEREF(__pyx_int_3234156416);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_int_3234156416);
  __Pyx_INCREF(__pyx_int_3385345166);
  __Pyx_GIVEREF(__pyx_int_3385345166);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_int_3385345166);
  __Pyx_INCREF(__pyx_int_4142626212);
  __Pyx_GIVEREF(__pyx_int_4142626212);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_int_4142626212);
  __Pyx_INCREF(__pyx_int_4293295786);
  __Pyx_GIVEREF(__pyx_int_4293295786);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_int_4293295786);
  __Pyx_INCREF(__pyx_int_3841024952);
  __Pyx_GIVEREF(__pyx_int_3841024952);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_int_3841024952);
  __Pyx_INCREF(__pyx_int_3992742070);
  __Pyx_GIVEREF(__pyx_int_3992742070);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_int_3992742070);
  __Pyx_INCREF(__pyx_int_174567692);
  __Pyx_GIVEREF(__pyx_int_174567692);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_int_174567692);
  __Pyx_INCREF(__pyx_int_57326082);
  __Pyx_GIVEREF(__pyx_int_57326082);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_int_57326082);
  __Pyx_INCREF(__pyx_int_410887952);
  __Pyx_GIVEREF(__pyx_int_410887952);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_int_410887952);
  __Pyx_INCREF(__pyx_int_292596766);
  __Pyx_GIVEREF(__pyx_int_292596766);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_int_292596766);
  __Pyx_INCREF(__pyx_int_777231668);
  __Pyx_GIVEREF(__pyx_int_777231668);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_int_777231668);
  __Pyx_INCREF(__pyx_int_660510266);
  __Pyx_GIVEREF(__pyx_int_660510266);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_int_660510266);
  __Pyx_INCREF(__pyx_int_1011452712);
  __Pyx_GIVEREF(__pyx_int_1011452712);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_int_1011452712);
  __Pyx_INCREF(__pyx_int_893681702);
  __Pyx_GIVEREF(__pyx_int_893681702);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_int_893681702);
  __Pyx_INCREF(__pyx_int_1108339068);
  __Pyx_GIVEREF(__pyx_int_1108339068);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_int_1108339068);
  __Pyx_INCREF(__pyx_int_1258480242);
  __Pyx_GIVEREF(__pyx_int_1258480242);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_int_1258480242);
  __Pyx_INCREF(__pyx_int_1343618912);
  __Pyx_GIVEREF(__pyx_int_1343618912);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_int_1343618912);
  __Pyx_INCREF(__pyx_int_1494807662);
  __Pyx_GIVEREF(__pyx_int_1494807662);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_int_1494807662);
  __Pyx_INCREF(__pyx_int_1715193156);
  __Pyx_GIVEREF(__pyx_int_1715193156);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_int_1715193156);
  __Pyx_INCREF(__pyx_int_1865862730);
  __Pyx_GIVEREF(__pyx_int_1865862730);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_int_1865862730);
  __Pyx_INCREF(__pyx_int_1948373848);
  __Pyx_GIVEREF(__pyx_int_1948373848);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_int_1948373848);
  __Pyx_INCREF(__pyx_int_2100090966);
  __Pyx_GIVEREF(__pyx_int_2100090966);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_int_2100090966);
  __Pyx_INCREF(__pyx_int_2701949495);
  __Pyx_GIVEREF(__pyx_int_2701949495);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_int_2701949495);
  __Pyx_INCREF(__pyx_int_2818666809);
  __Pyx_GIVEREF(__pyx_int_2818666809);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_int_2818666809);
  __Pyx_INCREF(__pyx_int_3004591147);
  __Pyx_GIVEREF(__pyx_int_3004591147);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_int_3004591147);
  __Pyx_INCREF(__pyx_int_3122358053);
  __Pyx_GIVEREF(__pyx_int_3122358053);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_int_3122358053);
  __Pyx_INCREF(__pyx_int_2235061775);
  __Pyx_GIVEREF(__pyx_int_2235061775);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_int_2235061775);
  __Pyx_INCREF(__pyx_int_2352307457);
  __Pyx_GIVEREF(__pyx_int_2352307457);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_int_2352307457);
  __Pyx_INCREF(__pyx_int_2535604243);
  __Pyx_GIVEREF(__pyx_int_2535604243);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_int_2535604243);
  __Pyx_INCREF(__pyx_int_2653899549);
  __Pyx_GIVEREF(__pyx_int_2653899549);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_int_2653899549);
  __Pyx_INCREF(__pyx_int_3915653703);
  __Pyx_GIVEREF(__pyx_int_3915653703);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_int_3915653703);
  __Pyx_INCREF(__pyx_int_3764988233);
  __Pyx_GIVEREF(__pyx_int_3764988233);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_int_3764988233);
  __Pyx_INCREF(__pyx_int_4219352155);
  __Pyx_GIVEREF(__pyx_int_4219352155);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_int_4219352155);
  __Pyx_INCREF(__pyx_int_4067639125);
  __Pyx_GIVEREF(__pyx_int_4067639125);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_int_4067639125);
  __Pyx_INCREF(__pyx_int_3444575871);
  __Pyx_GIVEREF(__pyx_int_3444575871);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_int_3444575871);
  __Pyx_INCREF(__pyx_int_3294430577);
  __Pyx_GIVEREF(__pyx_int_3294430577);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_int_3294430577);
  __Pyx_INCREF(__pyx_int_3746175075);
  __Pyx_GIVEREF(__pyx_int_3746175075);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_int_3746175075);
  __Pyx_INCREF(__pyx_int_3594982253);
  __Pyx_GIVEREF(__pyx_int_3594982253);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_int_3594982253);
  __Pyx_INCREF(__pyx_int_836553431);
  __Pyx_GIVEREF(__pyx_int_836553431);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_int_836553431);
  __Pyx_INCREF(__pyx_int_953270745);
  __Pyx_GIVEREF(__pyx_int_953270745);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_int_953270745);
  __Pyx_INCREF(__pyx_int_600235211);
  __Pyx_GIVEREF(__pyx_int_600235211);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_int_600235211);
  __Pyx_INCREF(__pyx_int_718002117);
  __Pyx_GIVEREF(__pyx_int_718002117);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_int_718002117);
  __Pyx_INCREF(__pyx_int_367585007);
  __Pyx_GIVEREF(__pyx_int_367585007);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_int_367585007);
  __Pyx_INCREF(__pyx_int_484830689);
  __Pyx_GIVEREF(__pyx_int_484830689);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_int_484830689);
  __Pyx_INCREF(__pyx_int_133361907);
  __Pyx_GIVEREF(__pyx_int_133361907);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_int_133361907);
  __Pyx_INCREF(__pyx_int_251657213);
  __Pyx_GIVEREF(__pyx_int_251657213);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_int_251657213);
  __Pyx_INCREF(__pyx_int_2041877159);
  __Pyx_GIVEREF(__pyx_int_2041877159);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_int_2041877159);
  __Pyx_INCREF(__pyx_int_1891211689);
  __Pyx_GIVEREF(__pyx_int_1891211689);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_int_1891211689);
  __Pyx_INCREF(__pyx_int_1806599355);
  __Pyx_GIVEREF(__pyx_int_1806599355);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_int_1806599355);
  __Pyx_INCREF(__pyx_int_1654886325);
  __Pyx_GIVEREF(__pyx_int_1654886325);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_int_1654886325);
  __Pyx_INCREF(__pyx_int_1568718495);
  __Pyx_GIVEREF(__pyx_int_1568718495);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_int_1568718495);
  __Pyx_INCREF(__pyx_int_1418573201);
  __Pyx_GIVEREF(__pyx_int_1418573201);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_int_1418573201);
  __Pyx_INCREF(__pyx_int_1335535747);
  __Pyx_GIVEREF(__pyx_int_1335535747);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_int_1335535747);
  __Pyx_INCREF(__pyx_int_1184342925);
  __Pyx_GIVEREF(__pyx_int_1184342925);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_int_1184342925);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_U4, __pyx_t_1) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":85
 *     U4 = [ 0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d ]
 * 
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 * 
 *         if len(key) not in (16, 24, 32):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_3AES_1__init__, 0, __pyx_n_s_AES___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":157
 *                                   self.U4[ tt        & 0xFF])
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 * 
 *         if len(plaintext) != 16:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_3AES_3encrypt, 0, __pyx_n_s_AES_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_encrypt, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":190
 *         return result
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 * 
 *         if len(ciphertext) != 16:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_3AES_5decrypt, 0, __pyx_n_s_AES_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_decrypt, __pyx_t_1) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":55
 *         return c
 * 
 * class AES(object):             # <<<<<<<<<<<<<<
 * 
 *     # Number of rounds by keysize ~
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AES, __pyx_tuple__48, __pyx_t_6, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":224
 * 
 * 
 * class Counter(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, initial_value = 1):
 */
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__55); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_tuple__55, __pyx_n_s_Counter, __pyx_n_s_Counter, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Aeskeys.pyx":226
 * class Counter(object):
 * 
 *     def __init__(self, initial_value = 1):             # <<<<<<<<<<<<<<
 * 
 *         # Convert the value into an array of bytes long ~
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7Counter_1__init__, 0, __pyx_n_s_Counter___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__58);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":231
 *         self._counter = [ ((initial_value >> i) % 256) for i in xrange(128 - 8, -1, -8) ]
 * 
 *     value = property(lambda s: s._counter)             # <<<<<<<<<<<<<<
 * 
 *     def increment(self):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7Counter_4lambda3, 0, __pyx_n_s_Counter_lambda, NULL, __pyx_n_s_Aeskeys, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_value, __pyx_t_8) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":233
 *     value = property(lambda s: s._counter)
 * 
 *     def increment(self):             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(len(self._counter) - 1, -1, -1):
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7Counter_3increment, 0, __pyx_n_s_Counter_increment, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_increment, __pyx_t_8) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":224
 * 
 * 
 * class Counter(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, initial_value = 1):
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_Counter, __pyx_tuple__55, __pyx_t_6, NULL, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Counter, __pyx_t_8) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":248
 * 
 * 
 * class AESBlockModeOfOperation(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, key):
 *         self._aes = AES(key)
 */
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__61); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_tuple__61, __pyx_n_s_AESBlockModeOfOperation, __pyx_n_s_AESBlockModeOfOperation, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Aeskeys.pyx":249
 * 
 * class AESBlockModeOfOperation(object):
 *     def __init__(self, key):             # <<<<<<<<<<<<<<
 *         self._aes = AES(key)
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_1__init__, 0, __pyx_n_s_AESBlockModeOfOperation___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_init, __pyx_t_8) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":252
 *         self._aes = AES(key)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_3decrypt, 0, __pyx_n_s_AESBlockModeOfOperation_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_decrypt, __pyx_t_8) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":255
 *         raise Exception('not implemented ~')
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         raise Exception('not implemented ~')
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_23AESBlockModeOfOperation_5encrypt, 0, __pyx_n_s_AESBlockModeOfOperation_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_encrypt, __pyx_t_8) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":248
 * 
 * 
 * class AESBlockModeOfOperation(object):             # <<<<<<<<<<<<<<
 *     def __init__(self, key):
 *         self._aes = AES(key)
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AESBlockModeOfOperation, __pyx_tuple__61, __pyx_t_6, NULL, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AESBlockModeOfOperation, __pyx_t_8) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":259
 * 
 * 
 * class AESStreamModeOfOperation(AESBlockModeOfOperation):...             # <<<<<<<<<<<<<<
 * 
 * class AESSegmentModeOfOperation(AESStreamModeOfOperation):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_AESStreamModeOfOperation, __pyx_n_s_AESStreamModeOfOperation, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AESStreamModeOfOperation, __pyx_t_6, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AESStreamModeOfOperation, __pyx_t_1) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":261
 * class AESStreamModeOfOperation(AESBlockModeOfOperation):...
 * 
 * class AESSegmentModeOfOperation(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     segment_bytes = 16
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_6, __pyx_t_7, __pyx_n_s_AESSegmentModeOfOperation, __pyx_n_s_AESSegmentModeOfOperation, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":263
 * class AESSegmentModeOfOperation(AESStreamModeOfOperation):
 * 
 *     segment_bytes = 16             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_segment_bytes_2, __pyx_int_16) < 0) __PYX_ERR(0, 263, __pyx_L1_error)

  /* "Aeskeys.pyx":261
 * class AESStreamModeOfOperation(AESBlockModeOfOperation):...
 * 
 * class AESSegmentModeOfOperation(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     segment_bytes = 16
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_6, __pyx_n_s_AESSegmentModeOfOperation, __pyx_t_7, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AESSegmentModeOfOperation, __pyx_t_1) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":267
 * 
 * 
 * class AES_ECB(AESBlockModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_AES_ECB, __pyx_n_s_AES_ECB, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":269
 * class AES_ECB(AESBlockModeOfOperation):
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_ECB_1encrypt, 0, __pyx_n_s_AES_ECB_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_encrypt, __pyx_t_1) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":276
 *         return _bytes_to_string(self._aes.encrypt(plaintext))
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_ECB_3decrypt, 0, __pyx_n_s_AES_ECB_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_decrypt, __pyx_t_1) < 0) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":267
 * 
 * 
 * class AES_ECB(AESBlockModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AES_ECB, __pyx_t_6, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES_ECB, __pyx_t_1) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":285
 * 
 * 
 * class AES_CBC(AESBlockModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv = None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_6, __pyx_t_7, __pyx_n_s_AES_CBC, __pyx_n_s_AES_CBC, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":287
 * class AES_CBC(AESBlockModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_cipherblock = [ 0 ] * 16
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CBC_1__init__, 0, __pyx_n_s_AES_CBC___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__74);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":297
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) != 16:
 *             raise ValueError('plaintext block must be 16 bytes >< \nBut you give %d' % len(plaintext))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CBC_3encrypt, 0, __pyx_n_s_AES_CBC_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_encrypt, __pyx_t_1) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":307
 *         return _bytes_to_string(self._last_cipherblock)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) != 16:
 *             raise ValueError('ciphertext block must be 16 bytes >< \nBut you give %d' % len(ciphertext))
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CBC_5decrypt, 0, __pyx_n_s_AES_CBC_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_decrypt, __pyx_t_1) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":285
 * 
 * 
 * class AES_CBC(AESBlockModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv = None):
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_6, __pyx_n_s_AES_CBC, __pyx_t_7, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES_CBC, __pyx_t_1) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":319
 * 
 * 
 * class AES_CFB(AESSegmentModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv, segment_size = 1):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESSegmentModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_AES_CFB, __pyx_n_s_AES_CFB, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":321
 * class AES_CFB(AESSegmentModeOfOperation):
 * 
 *     def __init__(self, key, iv, segment_size = 1):             # <<<<<<<<<<<<<<
 *         if segment_size == 0: segment_size = 1
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CFB_1__init__, 0, __pyx_n_s_AES_CFB___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_tuple__81);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":335
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     segment_bytes = property(lambda s: s._segment_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def encrypt(self, plaintext):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CFB_6lambda4, 0, __pyx_n_s_AES_CFB_lambda, NULL, __pyx_n_s_Aeskeys, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_segment_bytes_2, __pyx_t_9) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":337
 *     segment_bytes = property(lambda s: s._segment_bytes)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         if len(plaintext) % self._segment_bytes != 0:
 *             raise ValueError('plaintext block must be a multiple of segment_size ><')
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CFB_3encrypt, 0, __pyx_n_s_AES_CFB_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_encrypt, __pyx_t_9) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":357
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         if len(ciphertext) % self._segment_bytes != 0:
 *             raise ValueError('ciphertext block must be a multiple of segment_size ><')
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CFB_5decrypt, 0, __pyx_n_s_AES_CFB_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_decrypt, __pyx_t_9) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":319
 * 
 * 
 * class AES_CFB(AESSegmentModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv, segment_size = 1):
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AES_CFB, __pyx_t_6, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES_CFB, __pyx_t_9) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":379
 * 
 * 
 * class AES_OFB(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv = None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_6, __pyx_t_7, __pyx_n_s_AES_OFB, __pyx_n_s_AES_OFB, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":381
 * class AES_OFB(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, iv = None):             # <<<<<<<<<<<<<<
 *         if iv is None:
 *             self._last_precipherblock = [ 0 ] * 16
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_OFB_1__init__, 0, __pyx_n_s_AES_OFB___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_9, __pyx_tuple__88);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_9) < 0) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":393
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         encrypted = [ ]
 *         for p in _string_to_bytes(plaintext):
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_OFB_3encrypt, 0, __pyx_n_s_AES_OFB_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_encrypt, __pyx_t_9) < 0) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":406
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, ciphertext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(ciphertext)
 * 
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_OFB_5decrypt, 0, __pyx_n_s_AES_OFB_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_decrypt, __pyx_t_9) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":379
 * 
 * 
 * class AES_OFB(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, iv = None):
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_6, __pyx_n_s_AES_OFB, __pyx_t_7, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES_OFB, __pyx_t_9) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":411
 * 
 * 
 * class AES_CTR(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, counter = None):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_AES_CTR, __pyx_n_s_AES_CTR, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":413
 * class AES_CTR(AESStreamModeOfOperation):
 * 
 *     def __init__(self, key, counter = None):             # <<<<<<<<<<<<<<
 *         AESBlockModeOfOperation.__init__(self, key)
 * 
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CTR_1__init__, 0, __pyx_n_s_AES_CTR___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_9, __pyx_tuple__95);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_9) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":422
 *         self._remaining_counter = [ ]
 * 
 *     def encrypt(self, plaintext):             # <<<<<<<<<<<<<<
 *         while len(self._remaining_counter) < len(plaintext):
 *             self._remaining_counter += self._aes.encrypt(self._counter.value)
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CTR_3encrypt, 0, __pyx_n_s_AES_CTR_encrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_encrypt, __pyx_t_9) < 0) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":434
 *         return _bytes_to_string(encrypted)
 * 
 *     def decrypt(self, crypttext):             # <<<<<<<<<<<<<<
 *         return self.encrypt(crypttext)
 * 
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_7AES_CTR_5decrypt, 0, __pyx_n_s_AES_CTR_decrypt, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_decrypt, __pyx_t_9) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":411
 * 
 * 
 * class AES_CTR(AESStreamModeOfOperation):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, key, counter = None):
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_AES_CTR, __pyx_t_6, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AES_CTR, __pyx_t_9) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":440
 * # Simple lookup table for each mode
 * AESoperation = dict(
 *     ctr = AES_CTR,             # <<<<<<<<<<<<<<
 *     cbc = AES_CBC,
 *     cfb = AES_CFB,
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AES_CTR); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ctr, __pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":441
 * AESoperation = dict(
 *     ctr = AES_CTR,
 *     cbc = AES_CBC,             # <<<<<<<<<<<<<<
 *     cfb = AES_CFB,
 *     ecb = AES_ECB,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AES_CBC); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_cbc, __pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":442
 *     ctr = AES_CTR,
 *     cbc = AES_CBC,
 *     cfb = AES_CFB,             # <<<<<<<<<<<<<<
 *     ecb = AES_ECB,
 *     ofb = AES_OFB,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AES_CFB); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_cfb, __pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":443
 *     cbc = AES_CBC,
 *     cfb = AES_CFB,
 *     ecb = AES_ECB,             # <<<<<<<<<<<<<<
 *     ofb = AES_OFB,
 * )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AES_ECB); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ecb, __pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":444
 *     cfb = AES_CFB,
 *     ecb = AES_ECB,
 *     ofb = AES_OFB,             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AES_OFB); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_ofb, __pyx_t_7) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AESoperation, __pyx_t_6) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":448
 * 
 * 
 * PADDING_NONE       = 'none'             # <<<<<<<<<<<<<<
 * PADDING_DEFAULT    = 'default'
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PADDING_NONE, __pyx_n_s_none) < 0) __PYX_ERR(0, 448, __pyx_L1_error)

  /* "Aeskeys.pyx":449
 * 
 * PADDING_NONE       = 'none'
 * PADDING_DEFAULT    = 'default'             # <<<<<<<<<<<<<<
 * 
 * # @TODO: Ciphertext stealing and explicit PKCS#7
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PADDING_DEFAULT, __pyx_n_s_default) < 0) __PYX_ERR(0, 449, __pyx_L1_error)

  /* "Aeskeys.pyx":457
 * # ECB and CBC are block-only ciphers
 * 
 * def _block_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     if size >= 16: return 16
 *     return 0
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_19_block_can_consume, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_block_can_consume, __pyx_t_6) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":462
 * 
 * # After padding, we may have more than one block
 * def _block_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         data = util.append_PKCS7_padding(data)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_k__10 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_21_block_final_encrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_block_final_encrypt, __pyx_t_6) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":478
 * 
 * 
 * def _block_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding == PADDING_DEFAULT:
 *         return util.strip_PKCS7_padding(self.decrypt(data))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_k__15 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_23_block_final_decrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_block_final_decrypt, __pyx_t_6) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":489
 *     raise Exception('invalid padding option ^^')
 * 
 * AESBlockModeOfOperation._can_consume = _block_can_consume             # <<<<<<<<<<<<<<
 * AESBlockModeOfOperation._final_encrypt = _block_final_encrypt
 * AESBlockModeOfOperation._final_decrypt = _block_final_decrypt
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_block_can_consume); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_can_consume, __pyx_t_6) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":490
 * 
 * AESBlockModeOfOperation._can_consume = _block_can_consume
 * AESBlockModeOfOperation._final_encrypt = _block_final_encrypt             # <<<<<<<<<<<<<<
 * AESBlockModeOfOperation._final_decrypt = _block_final_decrypt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_block_final_encrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_final_encrypt, __pyx_t_7) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":491
 * AESBlockModeOfOperation._can_consume = _block_can_consume
 * AESBlockModeOfOperation._final_encrypt = _block_final_encrypt
 * AESBlockModeOfOperation._final_decrypt = _block_final_decrypt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_block_final_decrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESBlockModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_final_decrypt, __pyx_t_6) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":495
 * 
 * 
 * def _segment_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return self.segment_bytes * int(size // self.segment_bytes)
 * 
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_25_segment_can_consume, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_segment_can_consume, __pyx_t_7) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":499
 * 
 * # CFB can handle a non-segment-sized block at the end using the remaining cipherblock ~
 * def _segment_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__16 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_27_segment_final_encrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_segment_final_encrypt, __pyx_t_7) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":507
 *     return self.encrypt(padded)[:len(data)]
 * 
 * def _segment_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding != PADDING_DEFAULT:
 *         raise Exception('invalid padding option ><')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__19 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_29_segment_final_decrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_segment_final_decrypt, __pyx_t_7) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":515
 *     return self.decrypt(padded)[:len(data)]
 * 
 * AESSegmentModeOfOperation._can_consume = _segment_can_consume             # <<<<<<<<<<<<<<
 * AESSegmentModeOfOperation._final_encrypt = _segment_final_encrypt
 * AESSegmentModeOfOperation._final_decrypt = _segment_final_decrypt
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_segment_can_consume); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESSegmentModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_can_consume, __pyx_t_7) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":516
 * 
 * AESSegmentModeOfOperation._can_consume = _segment_can_consume
 * AESSegmentModeOfOperation._final_encrypt = _segment_final_encrypt             # <<<<<<<<<<<<<<
 * AESSegmentModeOfOperation._final_decrypt = _segment_final_decrypt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_segment_final_encrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESSegmentModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_final_encrypt, __pyx_t_6) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":517
 * AESSegmentModeOfOperation._can_consume = _segment_can_consume
 * AESSegmentModeOfOperation._final_encrypt = _segment_final_encrypt
 * AESSegmentModeOfOperation._final_decrypt = _segment_final_decrypt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_segment_final_decrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESSegmentModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_final_decrypt, __pyx_t_7) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":523
 * # OFB and CTR are stream ciphers
 * 
 * def _stream_can_consume(self, size):             # <<<<<<<<<<<<<<
 *     return size
 * 
 */
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_31_stream_can_consume, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_can_consume, __pyx_t_6) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":526
 *     return size
 * 
 * def _stream_final_encrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_k__20 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_33_stream_final_encrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_final_encrypt, __pyx_t_6) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":532
 *     return self.encrypt(data)
 * 
 * def _stream_final_decrypt(self, data, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *     if padding not in [PADDING_NONE, PADDING_DEFAULT]:
 *         raise Exception('invalid padding option ^^')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_k__21 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_35_stream_final_decrypt, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_stream_final_decrypt, __pyx_t_6) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":538
 *     return self.decrypt(data)
 * 
 * AESStreamModeOfOperation._can_consume = _stream_can_consume             # <<<<<<<<<<<<<<
 * AESStreamModeOfOperation._final_encrypt = _stream_final_encrypt
 * AESStreamModeOfOperation._final_decrypt = _stream_final_decrypt
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_stream_can_consume); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_can_consume, __pyx_t_6) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":539
 * 
 * AESStreamModeOfOperation._can_consume = _stream_can_consume
 * AESStreamModeOfOperation._final_encrypt = _stream_final_encrypt             # <<<<<<<<<<<<<<
 * AESStreamModeOfOperation._final_decrypt = _stream_final_decrypt
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_stream_final_encrypt); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_final_encrypt, __pyx_t_7) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":540
 * AESStreamModeOfOperation._can_consume = _stream_can_consume
 * AESStreamModeOfOperation._final_encrypt = _stream_final_encrypt
 * AESStreamModeOfOperation._final_decrypt = _stream_final_decrypt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_stream_final_decrypt); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_AESStreamModeOfOperation); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_7, __pyx_n_s_final_decrypt, __pyx_t_6) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":544
 * 
 * 
 * class BlockFeeder(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):
 */
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__118); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_tuple__118, __pyx_n_s_BlockFeeder, __pyx_n_s_BlockFeeder, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Aeskeys.pyx":546
 * class BlockFeeder(object):
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         self._mode = mode
 *         self._feed = feed
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_11BlockFeeder_1__init__, 0, __pyx_n_s_BlockFeeder___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_8, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_8)->__pyx_arg_padding = __pyx_t_9;
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_8, __pyx_pf_7Aeskeys_42__defaults__);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_init, __pyx_t_8) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":553
 *         self._padding = padding
 * 
 *     def feed(self, data = None):             # <<<<<<<<<<<<<<
 * 
 *         if self._buffer is None:
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_11BlockFeeder_3feed, 0, __pyx_n_s_BlockFeeder_feed, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_8, __pyx_tuple__123);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_feed, __pyx_t_8) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":544
 * 
 * 
 * class BlockFeeder(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, feed, final, padding = PADDING_DEFAULT):
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_BlockFeeder, __pyx_tuple__118, __pyx_t_6, NULL, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BlockFeeder, __pyx_t_8) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":576
 * 
 * 
 * class Encrypter(BlockFeeder):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BlockFeeder); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_6, __pyx_n_s_Encrypter, __pyx_n_s_Encrypter, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":578
 * class Encrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.encrypt, mode._final_encrypt, padding)
 * 
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_9Encrypter_1__init__, 0, __pyx_n_s_Encrypter___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_9, sizeof(__pyx_defaults1), 1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_9)->__pyx_arg_padding = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_9, __pyx_pf_7Aeskeys_44__defaults__);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_9) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":576
 * 
 * 
 * class Encrypter(BlockFeeder):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_Encrypter, __pyx_t_6, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Encrypter, __pyx_t_9) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "Aeskeys.pyx":582
 * 
 * 
 * class Decrypter(BlockFeeder):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_BlockFeeder); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CalculateMetaclass(NULL, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_Py3MetaclassPrepare(__pyx_t_6, __pyx_t_7, __pyx_n_s_Decrypter, __pyx_n_s_Decrypter, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "Aeskeys.pyx":584
 * class Decrypter(BlockFeeder):
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 *         BlockFeeder.__init__(self, mode, mode.decrypt, mode._final_decrypt, padding)
 * 
 */
  __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_9Decrypter_1__init__, 0, __pyx_n_s_Decrypter___init, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_9, sizeof(__pyx_defaults2), 1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_9)->__pyx_arg_padding = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_9, __pyx_pf_7Aeskeys_46__defaults__);
  if (__Pyx_SetNameInClass(__pyx_t_8, __pyx_n_s_init, __pyx_t_9) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "Aeskeys.pyx":582
 * 
 * 
 * class Decrypter(BlockFeeder):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, mode, padding = PADDING_DEFAULT):
 */
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_6, __pyx_n_s_Decrypter, __pyx_t_7, __pyx_t_8, NULL, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decrypter, __pyx_t_9) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":588
 * 
 * 
 * BLOCK_SIZE = (1 << 13)             # <<<<<<<<<<<<<<
 * 
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BLOCK_SIZE, __pyx_int_8192) < 0) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "Aeskeys.pyx":590
 * BLOCK_SIZE = (1 << 13)
 * 
 * def _feed_stream(feeder, in_stream, out_stream, block_size = BLOCK_SIZE):             # <<<<<<<<<<<<<<
 * 
 *     while True:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BLOCK_SIZE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__23 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_37_feed_stream, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_feed_stream, __pyx_t_7) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":602
 * 
 * 
 * def encrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     encrypter = Encrypter(mode, padding = padding)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BLOCK_SIZE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__24 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__25 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_39encrypt_stream, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_encrypt_stream, __pyx_t_7) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":608
 * 
 * 
 * def decrypt_stream(mode, in_stream, out_stream, block_size = BLOCK_SIZE, padding = PADDING_DEFAULT):             # <<<<<<<<<<<<<<
 * 
 *     decrypter = Decrypter(mode, padding = padding)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_BLOCK_SIZE); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__26 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PADDING_DEFAULT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_k__27 = __pyx_t_7;
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_7Aeskeys_41decrypt_stream, NULL, __pyx_n_s_Aeskeys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decrypt_stream, __pyx_t_7) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":614
 * 
 * 
 * class util(object):             # <<<<<<<<<<<<<<
 * 
 *     def to_bufferable(binary):
 */
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__134); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_tuple__134, __pyx_n_s_util, __pyx_n_s_util, (PyObject *) NULL, __pyx_n_s_Aeskeys, (PyObject *) NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "Aeskeys.pyx":616
 * class util(object):
 * 
 *     def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *         return binary
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_1to_bufferable, 0, __pyx_n_s_util_to_bufferable, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_to_bufferable, __pyx_t_8) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":619
 *         return binary
 * 
 *     def _get_byte(c):             # <<<<<<<<<<<<<<
 *         return ord(c)
 * 
 */
  __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_3_get_byte, 0, __pyx_n_s_util__get_byte, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_get_byte, __pyx_t_8) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "Aeskeys.pyx":622
 *         return ord(c)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         xrange
 *     except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    /*try:*/ {

      /* "Aeskeys.pyx":623
 * 
 *     try:
 *         xrange             # <<<<<<<<<<<<<<
 *     except:
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_xrange); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 623, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "Aeskeys.pyx":622
 *         return ord(c)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         xrange
 *     except:
 */
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "Aeskeys.pyx":624
 *     try:
 *         xrange
 *     except:             # <<<<<<<<<<<<<<
 * 
 *         def to_bufferable(binary):
 */
    /*except:*/ {
      __Pyx_AddTraceback("Aeskeys.util", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_1) < 0) __PYX_ERR(0, 624, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_1);

      /* "Aeskeys.pyx":626
 *     except:
 * 
 *         def to_bufferable(binary):             # <<<<<<<<<<<<<<
 *             if isinstance(binary, bytes):
 *                 return binary
 */
      __pyx_t_10 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_5to_bufferable, 0, __pyx_n_s_util_to_bufferable, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 626, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_to_bufferable, __pyx_t_10) < 0) __PYX_ERR(0, 626, __pyx_L12_except_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "Aeskeys.pyx":631
 *             return bytes(ord(b) for b in binary)
 * 
 *         def _get_byte(c):             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
      __pyx_t_10 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_7_get_byte, 0, __pyx_n_s_util__get_byte, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 631, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_get_byte, __pyx_t_10) < 0) __PYX_ERR(0, 631, __pyx_L12_except_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L11_exception_handled;
    }
    __pyx_L12_except_error:;

    /* "Aeskeys.pyx":622
 *         return ord(c)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         xrange
 *     except:
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_2);
    goto __pyx_L1_error;
    __pyx_L11_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_2);
    __pyx_L15_try_end:;
  }

  /* "Aeskeys.pyx":634
 *             return c
 * 
 *     def append_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         pad = 16 - (len(data) % 16)
 *         return data + to_bufferable(chr(pad) * pad)
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_9append_PKCS7_padding, 0, __pyx_n_s_util_append_PKCS7_padding, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_append_PKCS7_padding, __pyx_t_1) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":638
 *         return data + to_bufferable(chr(pad) * pad)
 * 
 *     def strip_PKCS7_padding(data):             # <<<<<<<<<<<<<<
 *         if len(data) % 16 != 0:
 *             raise ValueError("invalid length ~")
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_7Aeskeys_4util_11strip_PKCS7_padding, 0, __pyx_n_s_util_strip_PKCS7_padding, NULL, __pyx_n_s_Aeskeys, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_SetNameInClass(__pyx_t_6, __pyx_n_s_strip_PKCS7_padding, __pyx_t_1) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Aeskeys.pyx":614
 * 
 * 
 * class util(object):             # <<<<<<<<<<<<<<
 * 
 *     def to_bufferable(binary):
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_util, __pyx_tuple__134, __pyx_t_6, NULL, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_util, __pyx_t_1) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "Aeskeys.pyx":1
 * # Supported key sizes:             # <<<<<<<<<<<<<<
 * #   128-bit
 * #   192-bit
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Aeskeys", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Aeskeys");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_LshiftObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            if (likely(b < (long) (sizeof(long)*8) && a == (a << b) >> b) || !a) {
                return PyInt_FromLong(a << b);
            }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_lshift(op1, op2);
            }
        }
                x = a << b;
#ifdef HAVE_LONG_LONG
                if (unlikely(!(b < (long) (sizeof(long)*8) && a == x >> b)) && a) {
                    lla = a;
                    goto long_long;
                }
#else
                if (likely(b < (long) (sizeof(long)*8) && a == x >> b) || !a)
#endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla << llb;
                if (likely(lla == llx >> llb))
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceLshift : PyNumber_Lshift)(op1, op2);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", Py_TYPE(c)->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* StringJoin */
#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_FloorDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
            if (unlikely(b == -1 && ((unsigned long)a) == 0-(unsigned long)a))
                return PyInt_Type.tp_as_number->nb_floor_divide(op1, op2);
            else {
                long q, r;
                q = a / b;
                r = a - q*b;
                q -= ((r != 0) & ((r ^ b) < 0));
                x = q;
            }
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_floor_divide(op1, op2);
            }
        }
                __Pyx_PyInt_FloorDivideObjC_ZeroDivisionError(b)
                {
                    long q, r;
                    q = a / b;
                    r = a - q*b;
                    q -= ((r != 0) & ((r ^ b) < 0));
                    x = q;
                }
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                {
                    PY_LONG_LONG q, r;
                    q = lla / llb;
                    r = lla - q*llb;
                    q -= ((r != 0) & ((r ^ llb) < 0));
                    llx = q;
                }
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceFloorDivide : PyNumber_FloorDivide)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_RemainderObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AndObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a & b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_and(op1, op2);
            }
        }
                x = a & b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla & llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceAnd : PyNumber_And)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RshiftObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            return PyInt_FromLong(a >> b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_rshift(op1, op2);
            }
        }
                x = a >> b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla >> llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRshift : PyNumber_Rshift)(op1, op2);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* pop_index */
static PyObject* __Pyx__PyObject_PopNewIndex(PyObject* L, PyObject* py_ix) {
    PyObject *r;
    if (unlikely(!py_ix)) return NULL;
    r = __Pyx__PyObject_PopIndex(L, py_ix);
    Py_DECREF(py_ix);
    return r;
}
static PyObject* __Pyx__PyObject_PopIndex(PyObject* L, PyObject* py_ix) {
    return __Pyx_PyObject_CallMethod1(L, __pyx_n_s_pop, py_ix);
}
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static PyObject* __Pyx__PyList_PopIndex(PyObject* L, PyObject* py_ix, Py_ssize_t ix) {
    Py_ssize_t size = PyList_GET_SIZE(L);
    if (likely(size > (((PyListObject*)L)->allocated >> 1))) {
        Py_ssize_t cix = ix;
        if (cix < 0) {
            cix += size;
        }
        if (likely(__Pyx_is_valid_index(cix, size))) {
            PyObject* v = PyList_GET_ITEM(L, cix);
            __Pyx_SET_SIZE(L, Py_SIZE(L) - 1);
            size -= 1;
            memmove(&PyList_GET_ITEM(L, cix), &PyList_GET_ITEM(L, cix+1), (size_t)(size-cix)*sizeof(PyObject*));
            return v;
        }
    }
    if (py_ix == Py_None) {
        return __Pyx__PyObject_PopNewIndex(L, PyInt_FromSsize_t(ix));
    } else {
        return __Pyx__PyObject_PopIndex(L, py_ix);
    }
}
#endif

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ModInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_mod_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
